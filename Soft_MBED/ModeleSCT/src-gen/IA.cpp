
#include "IA.h"
#include <string.h>

/*! \file Implementation of the state machine 'IA'
*/


IA::IA():
	timer(null),
	stateConfVectorPosition(0),
	iface(),
	ifaceInternalSCI(),
	ifaceAsser(),
	ifaceServo(),
	ifaceAx(),
	ifaceMoteur(),
	ifaceChariot(),
	ifaceCapteur(),
	ifaceIhm()
{
	for (sc_ushort i = 0; i < maxHistoryStates; ++i)
		historyVector[i] = IA_last_state;
		
}

IA::~IA()
{
}

const int32_t IA::DefaultSCI::TOB_G_HAUT = 135;
const int32_t IA::DefaultSCI::TOB_G_MILIEU = 95;
const int32_t IA::DefaultSCI::TOB_G_BAS = 75;
const int32_t IA::DefaultSCI::TOB_D_HAUT = 110;
const int32_t IA::DefaultSCI::TOB_D_MILIEU = 170;
const int32_t IA::DefaultSCI::TOB_D_BAS = 184;
const int32_t IA::DefaultSCI::TOUSE_G_HAUT = 620;
const int32_t IA::DefaultSCI::TOUSE_G_MILIEU = 512;
const int32_t IA::DefaultSCI::TOUSE_G_MI_BAS = 430;
const int32_t IA::DefaultSCI::TOUSE_G_BAS = 170;
const int32_t IA::DefaultSCI::TOUSE_D_HAUT = 390;
const int32_t IA::DefaultSCI::TOUSE_D_MILIEU = 512;
const int32_t IA::DefaultSCI::TOUSE_D_MI_BAS = 580;
const int32_t IA::DefaultSCI::TOUSE_D_BAS = 850;
const int32_t IA::DefaultSCI::KMAR_G_HAUT = 110;
const int32_t IA::DefaultSCI::KMAR_G_MILIEU = 205;
const int32_t IA::DefaultSCI::KMAR_G_BAS = 250;
const int32_t IA::DefaultSCI::KMAR_D_HAUT = 155;
const int32_t IA::DefaultSCI::KMAR_D_MILIEU = 63;
const int32_t IA::DefaultSCI::KMAR_D_BAS = 10;
const int32_t IA::DefaultSCI::KMAR_DROITE = 850;
const int32_t IA::DefaultSCI::KMAR_MILIEU = 512;
const int32_t IA::DefaultSCI::KMAR_GAUCHE = 150;
const int32_t IA::DefaultSCI::KMAR_ERECTION = 750;
const int32_t IA::DefaultSCI::KMAR_MI_MOLLE = 512;
const int32_t IA::DefaultSCI::KMAR_MOLLE = 200;
const int32_t IA::DefaultSCI::PARE_CHOC_BAS = 8;
const int32_t IA::DefaultSCI::PARE_CHOC_HAUT = 210;
const int32_t IA::DefaultSCI::CHUCK_FERME = 512;
const int32_t IA::DefaultSCI::CHUCK_OUVERT = 805;
const int32_t IA::DefaultSCI::CODEUR_NON_DEFINI = 0;
const int32_t IA::DefaultSCI::CODEUR_CHARIOT = 1;
const int32_t IA::DefaultSCI::CODEUR_ROUE_DROITE = 2;
const int32_t IA::DefaultSCI::CODEUR_ROUE_GAUCHE = 3;
const int32_t IA::DefaultSCI::VIOLET = 0;
const int32_t IA::DefaultSCI::JAUNE = 1;
const float IA::DefaultSCI::PI = 3.14;


void IA::init()
{
	for (sc_ushort i = 0; i < maxOrthogonalStates; ++i)
		stateConfVector[i] = IA_last_state;
	
	for (sc_ushort i = 0; i < maxHistoryStates; ++i)
		historyVector[i] = IA_last_state;
	
	stateConfVectorPosition = 0;

	clearInEvents();
	clearOutEvents();
	
	/* Default init sequence for statechart IA */
	iface.IN_x_pos = 0.0;
	iface.IN_y_pos = 0.0;
	iface.IN_teta_pos = 0.0;
	iface.IN_vitesse = 0.0;
	iface.IN_sens_deplacement = 0.0;
	iface.IN_Couleur = 0;
	iface.IN_choixStrategie = 0;
	iface.IN_Obstacle = 0;
	iface.IN_Depression = false;
	iface.forceObstacle = false;
	iface.US_AV = true;
	iface.US_AR = true;
	iface.Couleur = 1;
	iface.choixStrategie = 0;
	iface.countTimeMvt = 0;
	iface.tempsMatch = 0;
	iface.countTempo = 0;
	iface.countTempo2 = 0;
	iface.countTime = 0;
	iface.x_pos_mem = 0;
	iface.y_pos_mem = 0;
	iface.teta_pos_mem = 0;
	iface.nb_Modules = 1;
	iface.score_grosbot = 0;
	iface.score_minibot = 0;
	iface.score_experience = 0;
	iface.score_total = 0;
	iface.evitementEnCours = false;
	iface.inhibeObstacle = false;
	iface.evit_memo_cde_min = 0;
	iface.evit_memo_cde_max = 0;
	iface.evit_memo_idx_sportiv = 0.0;
	iface.evit_memo_vitesse_avance = 0.0;
	iface.evit_memo_vitesse_angle = 0.0;
	iface.evit_memo_force_obstacle = false;
	iface.evit_sens_avant_detection = 0.0;
	iface.evit_nombre_tentatives = 0;
	iface.evit_nombre_max_tentatives = 0;
	iface.evit_detection_obstacle_bitfield = 0;
	iface.evit_strategie_evitement_en_cours = false;
	iface.evit_sgn_dist_eloigne = 1;
	iface.evit_sgn_angle_pivote = 1;
	iface.evit_sgn_dist_evacue = 1;
	iface.evit_toggle_signe = 1;
	iface.evit_debug_etape = 0;
	iface.evit_choix_strategie = 0;
	ifaceInternalSCI.invMouv = 1;
	ifaceInternalSCI.Te = 0.02;
	ifaceInternalSCI.sequence0 = true;
	ifaceInternalSCI.sequence1 = false;
	ifaceInternalSCI.sequence2 = false;
	ifaceInternalSCI.sequence3 = false;
	ifaceInternalSCI.sequence4 = false;
	ifaceInternalSCI.sequence5 = false;
	ifaceInternalSCI.sequence6 = false;
	ifaceInternalSCI.sequence7 = false;
	ifaceInternalSCI.nb_tentatives = 0;
	ifaceInternalSCI.idx_strategy = -1;
	ifaceAx.BRAS_OUVERT = 55;
	ifaceChariot.isReady = false;
	ifaceChariot.isConv = false;
}

void IA::enter()
{
	/* Default enter sequence for statechart IA */
	/* 'default' enter sequence for region main region */
	/* Default react sequence for initial entry  */
	/* 'default' enter sequence for state ATTENTE_TIRETTE */
	/* 'default' enter sequence for region null */
	/* Default react sequence for initial entry  */
	/* 'default' enter sequence for state ATTENTE_TIRETTE */
	/* 'default' enter sequence for region INIT */
	/* Default react sequence for initial entry  */
	/* 'default' enter sequence for state INIT */
	/* Entry action for state 'INIT'. */
	timer->setTimer(this, (sc_eventid)(&timeEvents[0]), 1 * 1000, false);
	Application.m_asservissement.CommandeManuelle(0, 0);
	Application.m_power_switch.setOutput(POMPE_ARG, false);
	Application.m_leds.setPattern(PATTERN_K2000, 50);
	stateConfVector[0] = main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_INIT;
	stateConfVectorPosition = 0;
	/* 'default' enter sequence for region CHOIX_COULEUR */
	/* Default react sequence for initial entry  */
	/* 'default' enter sequence for state CHOIX_COULEUR_VIOLET */
	/* Entry action for state 'CHOIX_COULEUR_VIOLET'. */
	iface.Couleur = IA::DefaultSCI::VIOLET;
	Application.m_leds.setPattern(PATTERN_K2000, 50);
	ifaceInternalSCI.invMouv = -1;
	stateConfVector[1] = main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_COULEUR_CHOIX_COULEUR_VIOLET;
	stateConfVectorPosition = 1;
	/* 'default' enter sequence for region CHOIX_STRATEGIE */
	/* Default react sequence for initial entry  */
	/* 'default' enter sequence for state CHOIX_NUM_STRATEGIE */
	stateConfVector[2] = main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_STRATEGIE_CHOIX_NUM_STRATEGIE;
	stateConfVectorPosition = 2;
}

void IA::exit()
{
	/* Default exit sequence for statechart IA */
	exseq_main_region();
}

sc_boolean IA::isActive() const
{
	return stateConfVector[0] != IA_last_state||stateConfVector[1] != IA_last_state||stateConfVector[2] != IA_last_state;
}

/* 
 * Always returns 'false' since this state machine can never become final.
 */
sc_boolean IA::isFinal() const
{
   return false;}

void IA::runCycle()
{
	
	clearOutEvents();
	for (stateConfVectorPosition = 0;
		stateConfVectorPosition < maxOrthogonalStates;
		stateConfVectorPosition++)
		{
			
		switch (stateConfVector[stateConfVectorPosition])
		{
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_INIT :
		{
			react_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_INIT();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_HAUTS :
		{
			react_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_HAUTS();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_APPRENTISSAGE_ASCENSEUR :
		{
			react_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_APPRENTISSAGE_ASCENSEUR();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_BAS :
		{
			react_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_BAS();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_RANGE_01 :
		{
			react_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_RANGE_01();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_RANGE_02 :
		{
			react_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_RANGE_02();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_SORTI_01 :
		{
			react_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_SORTI_01();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_SORTI_02 :
		{
			react_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_SORTI_02();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_HAUT :
		{
			react_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_HAUT();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_Copy_1_TOBOGGANS_BAS :
		{
			react_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_Copy_1_TOBOGGANS_BAS();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_COULEUR_CHOIX_COULEUR_VIOLET :
		{
			react_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_COULEUR_CHOIX_COULEUR_VIOLET();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_COULEUR_CHOIX_COULEUR_JAUNE :
		{
			react_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_COULEUR_CHOIX_COULEUR_JAUNE();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_STRATEGIE_CHOIX_NUM_STRATEGIE :
		{
			react_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_STRATEGIE_CHOIX_NUM_STRATEGIE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_SORTIE_EVITEMENT :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_SORTIE_EVITEMENT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_ATTENTE :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_ATTENTE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ELOIGNEMENT :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ELOIGNEMENT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ROTATION :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ROTATION();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_FIN_STRATEGIE_EVITEMENT :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_FIN_STRATEGIE_EVITEMENT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_DEBUT_STRATEGIE_EVITEMENT :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_DEBUT_STRATEGIE_EVITEMENT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVD :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVD();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVG :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVG();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_SYNCHRO :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_SYNCHRO();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVD_AVG :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVD_AVG();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARD :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARD();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARG :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARG();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARD_ARG :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARD_ARG();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_DEFAULT :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_DEFAULT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_REDRESSE :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_REDRESSE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE_2 :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE_2();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_RETENTATIVE :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_RETENTATIVE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_BUG_YAKINDU_CHOICE :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_BUG_YAKINDU_CHOICE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_DEPASSE_ZONE_CHAOS :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_DEPASSE_ZONE_CHAOS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_FACE_ZONE_CHAOS :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_FACE_ZONE_CHAOS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_STOCKAGE_DANS_ZONE_DEPART :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_STOCKAGE_DANS_ZONE_DEPART();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_FIN_SEQUENCE :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_FIN_SEQUENCE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE__final_ :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE__final_();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_PARE_CHOC :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_PARE_CHOC();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_MAINTIEN_KMAR_AR :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_MAINTIEN_KMAR_AR();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FACE_BLEUIUM :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FACE_BLEUIUM();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPA_POUSSETTE_JAUNE :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPA_POUSSETTE_JAUNE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DEPLACEMENT_VERS_GOLDENIUM :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DEPLACEMENT_VERS_GOLDENIUM();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_POUR_GOLDENIUM :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_POUR_GOLDENIUM();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_VENTOUSAGE_GOLDENIUM :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_VENTOUSAGE_GOLDENIUM();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_DROITE :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_DROITE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPA_POUSSETTE_VIOLET :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPA_POUSSETTE_VIOLET();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_GOLDENIUM_DANS_ROBOT_GAUCHE :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_GOLDENIUM_DANS_ROBOT_GAUCHE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLACEMENT_DEVANT_BALANCE :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLACEMENT_DEVANT_BALANCE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLUS_PROCHE_BALANCE :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLUS_PROCHE_BALANCE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_GOLDENIUM_EN_L_AIR :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_GOLDENIUM_EN_L_AIR();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DROPAGE_GOLDENIUM :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DROPAGE_GOLDENIUM();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM__final_ :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM__final_();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DROPAGE_GOLDENIUM :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DROPAGE_GOLDENIUM();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RECULE_AVEC_PRECAUTION :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RECULE_AVEC_PRECAUTION();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ARRET_MOTEURS :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ARRET_MOTEURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_MISE_GOLDENIUM_BAS :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_MISE_GOLDENIUM_BAS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RALENTISSEMENT_KMAR_01 :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RALENTISSEMENT_KMAR_01();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RALENTISSEMENT_KMAR_02 :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RALENTISSEMENT_KMAR_02();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_POSE_GOLDENIUM :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_POSE_GOLDENIUM();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_01 :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_01();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_02 :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_02();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_SECURE :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_SECURE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_03 :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_03();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_GOLDENIUM_DANS_ROBOT_GAUCHE :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_GOLDENIUM_DANS_ROBOT_GAUCHE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DESCEND_KMAR :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DESCEND_KMAR();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_MONTE :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_MONTE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_BIEN_DROIT :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_BIEN_DROIT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ROTATION_VERS_GOLDENIUM :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ROTATION_VERS_GOLDENIUM();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLACEMENT_FACE_GOLDENIUM :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLACEMENT_FACE_GOLDENIUM();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_ACCOSTAGE_BALANCE :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_ACCOSTAGE_BALANCE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECLENCHEMENT_ACCELERATEUR_JAUNE :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECLENCHEMENT_ACCELERATEUR_JAUNE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_FACE_BLEUIUM :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_FACE_BLEUIUM();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECLENCHEMENT_ACCELERATEUR_VIOLET :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECLENCHEMENT_ACCELERATEUR_VIOLET();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ROTATION_VERS_GOLDENIUM_VIOLET :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ROTATION_VERS_GOLDENIUM_VIOLET();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN_POUSSETTE_JAUNE :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN_POUSSETTE_JAUNE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RAPPROCHEMENT_DEVANT_BALANCE :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RAPPROCHEMENT_DEVANT_BALANCE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_FACE_BLEUIUM :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_FACE_BLEUIUM();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_LEGEREMENT_A_GAUCHE :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_LEGEREMENT_A_GAUCHE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_LEGEREMENT_A_DROITE :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_LEGEREMENT_A_DROITE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN_POUSSETTE_VIOLET :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN_POUSSETTE_VIOLET();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_FACE_BLEUIUM :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_FACE_BLEUIUM();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ATTENTE :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ATTENTE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DECLENCHEMENT_ACCELERATEUR_JAUNE :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DECLENCHEMENT_ACCELERATEUR_JAUNE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DECLENCHEMENT_ACCELERATEUR_VIOLET :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DECLENCHEMENT_ACCELERATEUR_VIOLET();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_DECLENCHEMENT_ACCELERATEUR_JAUNE :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_DECLENCHEMENT_ACCELERATEUR_JAUNE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_DECLENCHEMENT_ACCELERATEUR_JAUNE :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_DECLENCHEMENT_ACCELERATEUR_JAUNE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_DECLENCHEMENT_ACCELERATEUR_VIOLET :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_DECLENCHEMENT_ACCELERATEUR_VIOLET();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_DECLENCHEMENT_ACCELERATEUR_VIOLET :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_DECLENCHEMENT_ACCELERATEUR_VIOLET();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_01 :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_01();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_02 :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_02();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__final_ :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__final_();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_03 :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_03();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_AUCUNE_SEQUENCE :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_AUCUNE_SEQUENCE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_04 :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_04();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_05 :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_05();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_06 :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_06();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_HOMOLO1 :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_HOMOLO1();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_HOMOLO2 :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_HOMOLO2();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE__final_ :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE__final_();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_STRATEGIE1 :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_STRATEGIE1();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_STRATEGIE_PAR_DEFAUT :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_STRATEGIE_PAR_DEFAUT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PLACEMENT_DEVANT_DISTRIBUTEUR :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PLACEMENT_DEVANT_DISTRIBUTEUR();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_DEVENTOUSAGE_ATOMES :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_DEVENTOUSAGE_ATOMES();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_FIN_SEQUENCE :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_FIN_SEQUENCE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR__final_ :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR__final_();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_PLATEAUX_BAS :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_PLATEAUX_BAS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_BRAS_HAUT :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_BRAS_HAUT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_VENTOUSES_HAUT_01 :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_VENTOUSES_HAUT_01();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_VENTOUSES_HAUT_02 :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_VENTOUSES_HAUT_02();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MISE_EN_ROUTE_POMPES :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MISE_EN_ROUTE_POMPES();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_ABAISSEMENT_BRAS :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_ABAISSEMENT_BRAS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VENTOUSAGE :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VENTOUSAGE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_RETIRER_ATOMES :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_RETIRER_ATOMES();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VITESSE_VENTOUSE_01 :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VITESSE_VENTOUSE_01();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VITESSE_VENTOUSE_02 :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VITESSE_VENTOUSE_02();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PIVOTEMENT_ATOME_01 :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PIVOTEMENT_ATOME_01();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PIVOTEMENT_ATOME_02 :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PIVOTEMENT_ATOME_02();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_MILIEU :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_MILIEU();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_BRAS_HAUT_01 :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_BRAS_HAUT_01();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_BRAS_HAUT_02 :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_BRAS_HAUT_02();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_SECU_ELETROVANNES :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_SECU_ELETROVANNES();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_BAS :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_BAS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_DEGAGEMENT_BRAS :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_DEGAGEMENT_BRAS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_HAUT :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_HAUT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_STOCKAGE_HORIZONTAL_ATOMES :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_STOCKAGE_HORIZONTAL_ATOMES();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_RANGEMENT_BRAS :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_RANGEMENT_BRAS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MAINTIEN_KMAR_AR :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MAINTIEN_KMAR_AR();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEPLACEMENT_RAMASSAGE_ATOME :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEPLACEMENT_RAMASSAGE_ATOME();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_FIN_SEQUENCE :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_FIN_SEQUENCE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS__final_ :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS__final_();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_GLISSSADE :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_GLISSSADE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_ACTIVATION_POMPE :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_ACTIVATION_POMPE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEVENTOUSAGE_ATOMES :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEVENTOUSAGE_ATOMES();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_VITESSE_VENTOUSE_01 :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_VITESSE_VENTOUSE_01();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_VITESSE_VENTOUSE_02 :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_VITESSE_VENTOUSE_02();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_PIVOTEMENT_ATOME_01 :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_PIVOTEMENT_ATOME_01();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_PIVOTEMENT_ATOME_02 :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_PIVOTEMENT_ATOME_02();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_BRAS_HAUT_01 :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_BRAS_HAUT_01();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_BRAS_HAUT_02 :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_BRAS_HAUT_02();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_SECU_ELETROVANNES :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_SECU_ELETROVANNES();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_PLATEAUX_BAS :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_PLATEAUX_BAS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEPASSE_ZONE_CHAOS_RAMASSE_DEPART :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEPASSE_ZONE_CHAOS_RAMASSE_DEPART();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_FIN_SEQUENCE :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_FIN_SEQUENCE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART__final_ :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART__final_();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEPLACEMENT_RAMASSAGE_ATOME :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEPLACEMENT_RAMASSAGE_ATOME();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PRISE_ATOME :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PRISE_ATOME();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DESCENTE_PARECHOC :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DESCENTE_PARECHOC();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_ACTIVATION_POMPE :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_ACTIVATION_POMPE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEVENTOUSAGE_ATOMES :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEVENTOUSAGE_ATOMES();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_VITESSE_VENTOUSE_01 :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_VITESSE_VENTOUSE_01();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_VITESSE_VENTOUSE_02 :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_VITESSE_VENTOUSE_02();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PIVOTEMENT_ATOME_01 :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PIVOTEMENT_ATOME_01();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PIVOTEMENT_ATOME_02 :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PIVOTEMENT_ATOME_02();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_PLATEAUX_MILIEU :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_PLATEAUX_MILIEU();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_BRAS_HAUT_01 :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_BRAS_HAUT_01();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_BRAS_HAUT_02 :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_BRAS_HAUT_02();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_SECU_ELETROVANNES :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_SECU_ELETROVANNES();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_PLATEAUX_BAS :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_PLATEAUX_BAS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_1_POSITIONS_PLATEAUX_MILIEU :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_1_POSITIONS_PLATEAUX_MILIEU();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_GLISSSADE :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_GLISSSADE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_1_PRISE_ATOME :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_1_PRISE_ATOME();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_2_PRISE_ATOME :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_2_PRISE_ATOME();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_SE_METTRE_EN_LIEU_SUR :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_SE_METTRE_EN_LIEU_SUR();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO__final_ :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO__final_();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_MAINTIEN_KMAR_AR :
		{
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_MAINTIEN_KMAR_AR();
			break;
		}
		case main_region_FIN_MATCH :
		{
			react_main_region_FIN_MATCH();
			break;
		}
		default:
			break;
		}
	}
	clearInEvents();
}

void IA::clearInEvents()
{
	iface.EV_Tirette_raised = false;
	iface.EV_Obstacle_raised = false;
	iface.EV_ConvergenceMvt_raised = false;
	iface.EV_ConvergenceMvt_Rapide_raised = false;
	iface.EV_ConvergenceChariot_raised = false;
	timeEvents[0] = false; 
	timeEvents[1] = false; 
	timeEvents[2] = false; 
	timeEvents[3] = false; 
	timeEvents[4] = false; 
	timeEvents[5] = false; 
	timeEvents[6] = false; 
	timeEvents[7] = false; 
	timeEvents[8] = false; 
	timeEvents[9] = false; 
	timeEvents[10] = false; 
	timeEvents[11] = false; 
	timeEvents[12] = false; 
	timeEvents[13] = false; 
	timeEvents[14] = false; 
	timeEvents[15] = false; 
	timeEvents[16] = false; 
	timeEvents[17] = false; 
	timeEvents[18] = false; 
	timeEvents[19] = false; 
	timeEvents[20] = false; 
	timeEvents[21] = false; 
	timeEvents[22] = false; 
	timeEvents[23] = false; 
	timeEvents[24] = false; 
	timeEvents[25] = false; 
	timeEvents[26] = false; 
	timeEvents[27] = false; 
	timeEvents[28] = false; 
	timeEvents[29] = false; 
	timeEvents[30] = false; 
	timeEvents[31] = false; 
	timeEvents[32] = false; 
	timeEvents[33] = false; 
	timeEvents[34] = false; 
	timeEvents[35] = false; 
	timeEvents[36] = false; 
	timeEvents[37] = false; 
	timeEvents[38] = false; 
	timeEvents[39] = false; 
	timeEvents[40] = false; 
	timeEvents[41] = false; 
	timeEvents[42] = false; 
	timeEvents[43] = false; 
	timeEvents[44] = false; 
	timeEvents[45] = false; 
	timeEvents[46] = false; 
	timeEvents[47] = false; 
	timeEvents[48] = false; 
	timeEvents[49] = false; 
	timeEvents[50] = false; 
	timeEvents[51] = false; 
	timeEvents[52] = false; 
	timeEvents[53] = false; 
	timeEvents[54] = false; 
	timeEvents[55] = false; 
	timeEvents[56] = false; 
	timeEvents[57] = false; 
	timeEvents[58] = false; 
	timeEvents[59] = false; 
	timeEvents[60] = false; 
	timeEvents[61] = false; 
	timeEvents[62] = false; 
	timeEvents[63] = false; 
	timeEvents[64] = false; 
	timeEvents[65] = false; 
	timeEvents[66] = false; 
	timeEvents[67] = false; 
	timeEvents[68] = false; 
	timeEvents[69] = false; 
	timeEvents[70] = false; 
	timeEvents[71] = false; 
	timeEvents[72] = false; 
	timeEvents[73] = false; 
	timeEvents[74] = false; 
	timeEvents[75] = false; 
	timeEvents[76] = false; 
	timeEvents[77] = false; 
	timeEvents[78] = false; 
	timeEvents[79] = false; 
	timeEvents[80] = false; 
	timeEvents[81] = false; 
	timeEvents[82] = false; 
	timeEvents[83] = false; 
	timeEvents[84] = false; 
	timeEvents[85] = false; 
	timeEvents[86] = false; 
	timeEvents[87] = false; 
	timeEvents[88] = false; 
	timeEvents[89] = false; 
	timeEvents[90] = false; 
	timeEvents[91] = false; 
	timeEvents[92] = false; 
	timeEvents[93] = false; 
	timeEvents[94] = false; 
	timeEvents[95] = false; 
	timeEvents[96] = false; 
	timeEvents[97] = false; 
	timeEvents[98] = false; 
	timeEvents[99] = false; 
	timeEvents[100] = false; 
	timeEvents[101] = false; 
	timeEvents[102] = false; 
	timeEvents[103] = false; 
	timeEvents[104] = false; 
	timeEvents[105] = false; 
	timeEvents[106] = false; 
	timeEvents[107] = false; 
	timeEvents[108] = false; 
	timeEvents[109] = false; 
	timeEvents[110] = false; 
	timeEvents[111] = false; 
	timeEvents[112] = false; 
	timeEvents[113] = false; 
	timeEvents[114] = false; 
	timeEvents[115] = false; 
	timeEvents[116] = false; 
	timeEvents[117] = false; 
	timeEvents[118] = false; 
	timeEvents[119] = false; 
	timeEvents[120] = false; 
	timeEvents[121] = false; 
	timeEvents[122] = false; 
	timeEvents[123] = false; 
	timeEvents[124] = false; 
	timeEvents[125] = false; 
	timeEvents[126] = false; 
	timeEvents[127] = false; 
	timeEvents[128] = false; 
}

void IA::clearOutEvents()
{
}


void IA::setTimer(TimerInterface* timerInterface)
{
	this->timer = timerInterface;
}

TimerInterface* IA::getTimer()
{
	return timer;
}

void IA::raiseTimeEvent(sc_eventid evid)
{
	if ((evid >= (sc_eventid)timeEvents) && (evid < (sc_eventid)(&timeEvents[timeEventsCount])))
	{
		*(sc_boolean*)evid = true;
	}				
}

sc_boolean IA::isStateActive(IAStates state) const
{
	switch (state)
	{
		case main_region_ATTENTE_TIRETTE : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_ATTENTE_TIRETTE] >= main_region_ATTENTE_TIRETTE
				&& stateConfVector[SCVI_MAIN_REGION_ATTENTE_TIRETTE] <= main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_STRATEGIE_CHOIX_NUM_STRATEGIE);
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_ATTENTE_TIRETTE__REGION0_ATTENTE_TIRETTE] >= main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE
				&& stateConfVector[SCVI_MAIN_REGION_ATTENTE_TIRETTE__REGION0_ATTENTE_TIRETTE] <= main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_STRATEGIE_CHOIX_NUM_STRATEGIE);
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_INIT : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_ATTENTE_TIRETTE__REGION0_ATTENTE_TIRETTE_INIT_INIT] == main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_INIT
			);
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_HAUTS : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_ATTENTE_TIRETTE__REGION0_ATTENTE_TIRETTE_INIT_TOBOGGANS_HAUTS] == main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_HAUTS
			);
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_APPRENTISSAGE_ASCENSEUR : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_ATTENTE_TIRETTE__REGION0_ATTENTE_TIRETTE_INIT_APPRENTISSAGE_ASCENSEUR] == main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_APPRENTISSAGE_ASCENSEUR
			);
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_BAS : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_ATTENTE_TIRETTE__REGION0_ATTENTE_TIRETTE_INIT_TOBOGGANS_BAS] == main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_BAS
			);
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_RANGE_01 : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_ATTENTE_TIRETTE__REGION0_ATTENTE_TIRETTE_INIT_KMAR_RANGE_01] == main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_RANGE_01
			);
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_RANGE_02 : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_ATTENTE_TIRETTE__REGION0_ATTENTE_TIRETTE_INIT_KMAR_RANGE_02] == main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_RANGE_02
			);
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_SORTI_01 : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_ATTENTE_TIRETTE__REGION0_ATTENTE_TIRETTE_INIT_KMAR_SORTI_01] == main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_SORTI_01
			);
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_SORTI_02 : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_ATTENTE_TIRETTE__REGION0_ATTENTE_TIRETTE_INIT_KMAR_SORTI_02] == main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_SORTI_02
			);
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_HAUT : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_ATTENTE_TIRETTE__REGION0_ATTENTE_TIRETTE_INIT_TOBOGGANS_HAUT] == main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_HAUT
			);
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_Copy_1_TOBOGGANS_BAS : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_ATTENTE_TIRETTE__REGION0_ATTENTE_TIRETTE_INIT_COPY_1_TOBOGGANS_BAS] == main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_Copy_1_TOBOGGANS_BAS
			);
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_COULEUR_CHOIX_COULEUR_VIOLET : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_ATTENTE_TIRETTE__REGION0_ATTENTE_TIRETTE_CHOIX_COULEUR_CHOIX_COULEUR_VIOLET] == main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_COULEUR_CHOIX_COULEUR_VIOLET
			);
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_COULEUR_CHOIX_COULEUR_JAUNE : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_ATTENTE_TIRETTE__REGION0_ATTENTE_TIRETTE_CHOIX_COULEUR_CHOIX_COULEUR_JAUNE] == main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_COULEUR_CHOIX_COULEUR_JAUNE
			);
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_STRATEGIE_CHOIX_NUM_STRATEGIE : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_ATTENTE_TIRETTE__REGION0_ATTENTE_TIRETTE_CHOIX_STRATEGIE_CHOIX_NUM_STRATEGIE] == main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_STRATEGIE_CHOIX_NUM_STRATEGIE
			);
		case main_region_MATCH_EN_COURS : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS] >= main_region_MATCH_EN_COURS
				&& stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS] <= main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_MAINTIEN_KMAR_AR);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE] >= main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE
				&& stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE] <= main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_BUG_YAKINDU_CHOICE);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_R1_EVITEMMENT_OBSTACLE_CONTENEUR] >= main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR
				&& stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_R1_EVITEMMENT_OBSTACLE_CONTENEUR] <= main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_BUG_YAKINDU_CHOICE);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_R1_EVITEMMENT_OBSTACLE_CONTENEUR_R1_EVITEMENT_INIT] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_SORTIE_EVITEMENT : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_R1_EVITEMMENT_OBSTACLE_CONTENEUR_R1_SORTIE_EVITEMENT] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_SORTIE_EVITEMENT
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_ATTENTE : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_R1_EVITEMMENT_OBSTACLE_CONTENEUR_R1_EVITEMENT_ATTENTE] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_ATTENTE
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_R1_EVITEMMENT_OBSTACLE_CONTENEUR_R1_STRATEGIE_EVITEMENT] >= main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT
				&& stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_R1_EVITEMMENT_OBSTACLE_CONTENEUR_R1_STRATEGIE_EVITEMENT] <= main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_RETENTATIVE);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ELOIGNEMENT : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_R1_EVITEMMENT_OBSTACLE_CONTENEUR_R1_STRATEGIE_EVITEMENT_R1_EVITEMENT_ELOIGNEMENT] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ELOIGNEMENT
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ROTATION : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_R1_EVITEMMENT_OBSTACLE_CONTENEUR_R1_STRATEGIE_EVITEMENT_R1_EVITEMENT_ROTATION] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ROTATION
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_R1_EVITEMMENT_OBSTACLE_CONTENEUR_R1_STRATEGIE_EVITEMENT_R1_EVITEMENT_EVACUE] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_FIN_STRATEGIE_EVITEMENT : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_R1_EVITEMMENT_OBSTACLE_CONTENEUR_R1_STRATEGIE_EVITEMENT_R1_FIN_STRATEGIE_EVITEMENT] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_FIN_STRATEGIE_EVITEMENT
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_DEBUT_STRATEGIE_EVITEMENT : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_R1_EVITEMMENT_OBSTACLE_CONTENEUR_R1_STRATEGIE_EVITEMENT_R1_DEBUT_STRATEGIE_EVITEMENT] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_DEBUT_STRATEGIE_EVITEMENT
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVD : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_R1_EVITEMMENT_OBSTACLE_CONTENEUR_R1_STRATEGIE_EVITEMENT_R1_EVITEMENT_AVD] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVD
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVG : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_R1_EVITEMMENT_OBSTACLE_CONTENEUR_R1_STRATEGIE_EVITEMENT_R1_EVITEMENT_AVG] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVG
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_SYNCHRO : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_R1_EVITEMMENT_OBSTACLE_CONTENEUR_R1_STRATEGIE_EVITEMENT_R1_EVITEMENT_SYNCHRO] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_SYNCHRO
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVD_AVG : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_R1_EVITEMMENT_OBSTACLE_CONTENEUR_R1_STRATEGIE_EVITEMENT_R1_EVITEMENT_AVD_AVG] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVD_AVG
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARD : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_R1_EVITEMMENT_OBSTACLE_CONTENEUR_R1_STRATEGIE_EVITEMENT_R1_EVITEMENT_ARD] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARD
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARG : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_R1_EVITEMMENT_OBSTACLE_CONTENEUR_R1_STRATEGIE_EVITEMENT_R1_EVITEMENT_ARG] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARG
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARD_ARG : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_R1_EVITEMMENT_OBSTACLE_CONTENEUR_R1_STRATEGIE_EVITEMENT_R1_EVITEMENT_ARD_ARG] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARD_ARG
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_DEFAULT : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_R1_EVITEMMENT_OBSTACLE_CONTENEUR_R1_STRATEGIE_EVITEMENT_R1_EVITEMENT_DEFAULT] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_DEFAULT
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_REDRESSE : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_R1_EVITEMMENT_OBSTACLE_CONTENEUR_R1_STRATEGIE_EVITEMENT_R1_EVITEMENT_REDRESSE] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_REDRESSE
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE_2 : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_R1_EVITEMMENT_OBSTACLE_CONTENEUR_R1_STRATEGIE_EVITEMENT_R1_EVITEMENT_EVACUE_2] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE_2
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_RETENTATIVE : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_R1_EVITEMMENT_OBSTACLE_CONTENEUR_R1_STRATEGIE_EVITEMENT_R1_EVITEMENT_RETENTATIVE] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_RETENTATIVE
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_BUG_YAKINDU_CHOICE : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_R1_EVITEMMENT_OBSTACLE_CONTENEUR_R1_EVITEMENT_BUG_YAKINDU_CHOICE] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_BUG_YAKINDU_CHOICE
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE] >= main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE
				&& stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE] <= main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_MAINTIEN_KMAR_AR);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_DEPASSE_ZONE_CHAOS : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_DEPASSE_ZONE_CHAOS] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_DEPASSE_ZONE_CHAOS
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_FACE_ZONE_CHAOS : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_FACE_ZONE_CHAOS] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_FACE_ZONE_CHAOS
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_STOCKAGE_DANS_ZONE_DEPART : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_STOCKAGE_DANS_ZONE_DEPART] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_STOCKAGE_DANS_ZONE_DEPART
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_FIN_SEQUENCE : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_FIN_SEQUENCE] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_FIN_SEQUENCE
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE__final_ : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE__FINAL_] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE__final_
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_PARE_CHOC : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_PARE_CHOC] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_PARE_CHOC
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_MAINTIEN_KMAR_AR : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_MAINTIEN_KMAR_AR] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_MAINTIEN_KMAR_AR
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM] >= main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM
				&& stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM] <= main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_DECLENCHEMENT_ACCELERATEUR_VIOLET);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FACE_BLEUIUM : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FACE_BLEUIUM] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FACE_BLEUIUM
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPA_POUSSETTE_JAUNE : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPA_POUSSETTE_JAUNE] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPA_POUSSETTE_JAUNE
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DEPLACEMENT_VERS_GOLDENIUM : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DEPLACEMENT_VERS_GOLDENIUM] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DEPLACEMENT_VERS_GOLDENIUM
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_POUR_GOLDENIUM : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_POUR_GOLDENIUM] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_POUR_GOLDENIUM
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_VENTOUSAGE_GOLDENIUM : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_VENTOUSAGE_GOLDENIUM] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_VENTOUSAGE_GOLDENIUM
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_DROITE : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_DROITE] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_DROITE
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPA_POUSSETTE_VIOLET : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPA_POUSSETTE_VIOLET] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPA_POUSSETTE_VIOLET
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_GOLDENIUM_DANS_ROBOT_GAUCHE : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_GOLDENIUM_DANS_ROBOT_GAUCHE] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_GOLDENIUM_DANS_ROBOT_GAUCHE
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLACEMENT_DEVANT_BALANCE : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLACEMENT_DEVANT_BALANCE] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLACEMENT_DEVANT_BALANCE
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLUS_PROCHE_BALANCE : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLUS_PROCHE_BALANCE] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLUS_PROCHE_BALANCE
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_GOLDENIUM_EN_L_AIR : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_GOLDENIUM_EN_L_AIR] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_GOLDENIUM_EN_L_AIR
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DROPAGE_GOLDENIUM : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DROPAGE_GOLDENIUM] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DROPAGE_GOLDENIUM
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM__final_ : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM__FINAL_] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM__final_
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DROPAGE_GOLDENIUM : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_COPY_1_DROPAGE_GOLDENIUM] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DROPAGE_GOLDENIUM
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RECULE_AVEC_PRECAUTION : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RECULE_AVEC_PRECAUTION] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RECULE_AVEC_PRECAUTION
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ARRET_MOTEURS : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ARRET_MOTEURS] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ARRET_MOTEURS
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_MISE_GOLDENIUM_BAS : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_MISE_GOLDENIUM_BAS] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_MISE_GOLDENIUM_BAS
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RALENTISSEMENT_KMAR_01 : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RALENTISSEMENT_KMAR_01] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RALENTISSEMENT_KMAR_01
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RALENTISSEMENT_KMAR_02 : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RALENTISSEMENT_KMAR_02] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RALENTISSEMENT_KMAR_02
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_POSE_GOLDENIUM : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_POSE_GOLDENIUM] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_POSE_GOLDENIUM
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_01 : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_01] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_01
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_02 : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_02] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_02
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_SECURE : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_SECURE] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_SECURE
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_03 : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_03] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_03
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_GOLDENIUM_DANS_ROBOT_GAUCHE : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_COPY_1_GOLDENIUM_DANS_ROBOT_GAUCHE] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_GOLDENIUM_DANS_ROBOT_GAUCHE
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DESCEND_KMAR : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DESCEND_KMAR] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DESCEND_KMAR
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_MONTE : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_MONTE] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_MONTE
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_BIEN_DROIT : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_BIEN_DROIT] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_BIEN_DROIT
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ROTATION_VERS_GOLDENIUM : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ROTATION_VERS_GOLDENIUM] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ROTATION_VERS_GOLDENIUM
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLACEMENT_FACE_GOLDENIUM : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLACEMENT_FACE_GOLDENIUM] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLACEMENT_FACE_GOLDENIUM
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_ACCOSTAGE_BALANCE : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_COPY_1_ACCOSTAGE_BALANCE] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_ACCOSTAGE_BALANCE
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECLENCHEMENT_ACCELERATEUR_JAUNE : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECLENCHEMENT_ACCELERATEUR_JAUNE] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECLENCHEMENT_ACCELERATEUR_JAUNE
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_FACE_BLEUIUM : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_COPY_1_FACE_BLEUIUM] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_FACE_BLEUIUM
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECLENCHEMENT_ACCELERATEUR_VIOLET : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECLENCHEMENT_ACCELERATEUR_VIOLET] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECLENCHEMENT_ACCELERATEUR_VIOLET
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ROTATION_VERS_GOLDENIUM_VIOLET : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ROTATION_VERS_GOLDENIUM_VIOLET] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ROTATION_VERS_GOLDENIUM_VIOLET
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN_POUSSETTE_JAUNE : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN_POUSSETTE_JAUNE] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN_POUSSETTE_JAUNE
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RAPPROCHEMENT_DEVANT_BALANCE : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RAPPROCHEMENT_DEVANT_BALANCE] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RAPPROCHEMENT_DEVANT_BALANCE
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_FACE_BLEUIUM : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_COPY_2_FACE_BLEUIUM] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_FACE_BLEUIUM
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_LEGEREMENT_A_GAUCHE : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_LEGEREMENT_A_GAUCHE] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_LEGEREMENT_A_GAUCHE
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_LEGEREMENT_A_DROITE : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_LEGEREMENT_A_DROITE] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_LEGEREMENT_A_DROITE
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN_POUSSETTE_VIOLET : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN_POUSSETTE_VIOLET] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN_POUSSETTE_VIOLET
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_FACE_BLEUIUM : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_COPY_3_FACE_BLEUIUM] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_FACE_BLEUIUM
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ATTENTE : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ATTENTE] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ATTENTE
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DECLENCHEMENT_ACCELERATEUR_JAUNE : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_COPY_1_DECLENCHEMENT_ACCELERATEUR_JAUNE] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DECLENCHEMENT_ACCELERATEUR_JAUNE
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DECLENCHEMENT_ACCELERATEUR_VIOLET : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_COPY_1_DECLENCHEMENT_ACCELERATEUR_VIOLET] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DECLENCHEMENT_ACCELERATEUR_VIOLET
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_DECLENCHEMENT_ACCELERATEUR_JAUNE : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_COPY_2_DECLENCHEMENT_ACCELERATEUR_JAUNE] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_DECLENCHEMENT_ACCELERATEUR_JAUNE
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_DECLENCHEMENT_ACCELERATEUR_JAUNE : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_COPY_3_DECLENCHEMENT_ACCELERATEUR_JAUNE] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_DECLENCHEMENT_ACCELERATEUR_JAUNE
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_DECLENCHEMENT_ACCELERATEUR_VIOLET : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_COPY_2_DECLENCHEMENT_ACCELERATEUR_VIOLET] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_DECLENCHEMENT_ACCELERATEUR_VIOLET
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_DECLENCHEMENT_ACCELERATEUR_VIOLET : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_COPY_3_DECLENCHEMENT_ACCELERATEUR_VIOLET] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_DECLENCHEMENT_ACCELERATEUR_VIOLET
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR] >= main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR
				&& stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR] <= main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_06);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_01 : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_01] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_01
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_02 : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_02] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_02
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__final_ : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__FINAL_] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__final_
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_03 : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_03] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_03
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_AUCUNE_SEQUENCE : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_AUCUNE_SEQUENCE] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_AUCUNE_SEQUENCE
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_04 : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_04] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_04
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_05 : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_05] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_05
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_06 : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_06] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_06
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY] >= main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY
				&& stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY] <= main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_STRATEGIE_PAR_DEFAUT);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_HOMOLO1 : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_HOMOLO1] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_HOMOLO1
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_HOMOLO2 : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_HOMOLO2] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_HOMOLO2
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE__final_ : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE__FINAL_] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE__final_
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_STRATEGIE1 : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_STRATEGIE1] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_STRATEGIE1
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_STRATEGIE_PAR_DEFAUT : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_STRATEGIE_PAR_DEFAUT] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_STRATEGIE_PAR_DEFAUT
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR] >= main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR
				&& stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR] <= main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MAINTIEN_KMAR_AR);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PLACEMENT_DEVANT_DISTRIBUTEUR : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PLACEMENT_DEVANT_DISTRIBUTEUR] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PLACEMENT_DEVANT_DISTRIBUTEUR
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_DEVENTOUSAGE_ATOMES : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_DEVENTOUSAGE_ATOMES] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_DEVENTOUSAGE_ATOMES
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_FIN_SEQUENCE : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_FIN_SEQUENCE] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_FIN_SEQUENCE
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR__final_ : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR__FINAL_] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR__final_
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_PLATEAUX_BAS : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_PLATEAUX_BAS] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_PLATEAUX_BAS
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_BRAS_HAUT : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_BRAS_HAUT] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_BRAS_HAUT
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_VENTOUSES_HAUT_01 : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_VENTOUSES_HAUT_01] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_VENTOUSES_HAUT_01
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_VENTOUSES_HAUT_02 : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_VENTOUSES_HAUT_02] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_VENTOUSES_HAUT_02
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MISE_EN_ROUTE_POMPES : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MISE_EN_ROUTE_POMPES] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MISE_EN_ROUTE_POMPES
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_ABAISSEMENT_BRAS : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_ABAISSEMENT_BRAS] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_ABAISSEMENT_BRAS
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VENTOUSAGE : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VENTOUSAGE] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VENTOUSAGE
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_RETIRER_ATOMES : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_RETIRER_ATOMES] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_RETIRER_ATOMES
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VITESSE_VENTOUSE_01 : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VITESSE_VENTOUSE_01] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VITESSE_VENTOUSE_01
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VITESSE_VENTOUSE_02 : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VITESSE_VENTOUSE_02] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VITESSE_VENTOUSE_02
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PIVOTEMENT_ATOME_01 : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PIVOTEMENT_ATOME_01] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PIVOTEMENT_ATOME_01
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PIVOTEMENT_ATOME_02 : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PIVOTEMENT_ATOME_02] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PIVOTEMENT_ATOME_02
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_MILIEU : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_MILIEU] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_MILIEU
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_BRAS_HAUT_01 : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_BRAS_HAUT_01] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_BRAS_HAUT_01
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_BRAS_HAUT_02 : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_BRAS_HAUT_02] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_BRAS_HAUT_02
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_SECU_ELETROVANNES : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_SECU_ELETROVANNES] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_SECU_ELETROVANNES
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_BAS : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_BAS] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_BAS
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_DEGAGEMENT_BRAS : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_DEGAGEMENT_BRAS] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_DEGAGEMENT_BRAS
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_HAUT : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_HAUT] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_HAUT
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_STOCKAGE_HORIZONTAL_ATOMES : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_STOCKAGE_HORIZONTAL_ATOMES] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_STOCKAGE_HORIZONTAL_ATOMES
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_RANGEMENT_BRAS : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_RANGEMENT_BRAS] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_RANGEMENT_BRAS
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MAINTIEN_KMAR_AR : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MAINTIEN_KMAR_AR] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MAINTIEN_KMAR_AR
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS] >= main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS
				&& stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS] <= main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_PLATEAUX_BAS);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEPLACEMENT_RAMASSAGE_ATOME : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEPLACEMENT_RAMASSAGE_ATOME] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEPLACEMENT_RAMASSAGE_ATOME
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_FIN_SEQUENCE : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_FIN_SEQUENCE] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_FIN_SEQUENCE
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS__final_ : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS__FINAL_] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS__final_
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_GLISSSADE : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_GLISSSADE] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_GLISSSADE
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_ACTIVATION_POMPE : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_ACTIVATION_POMPE] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_ACTIVATION_POMPE
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEVENTOUSAGE_ATOMES : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEVENTOUSAGE_ATOMES] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEVENTOUSAGE_ATOMES
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_VITESSE_VENTOUSE_01 : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_VITESSE_VENTOUSE_01] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_VITESSE_VENTOUSE_01
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_VITESSE_VENTOUSE_02 : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_VITESSE_VENTOUSE_02] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_VITESSE_VENTOUSE_02
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_PIVOTEMENT_ATOME_01 : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_PIVOTEMENT_ATOME_01] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_PIVOTEMENT_ATOME_01
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_PIVOTEMENT_ATOME_02 : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_PIVOTEMENT_ATOME_02] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_PIVOTEMENT_ATOME_02
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_BRAS_HAUT_01 : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_BRAS_HAUT_01] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_BRAS_HAUT_01
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_BRAS_HAUT_02 : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_BRAS_HAUT_02] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_BRAS_HAUT_02
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_SECU_ELETROVANNES : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_SECU_ELETROVANNES] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_SECU_ELETROVANNES
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_PLATEAUX_BAS : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_PLATEAUX_BAS] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_PLATEAUX_BAS
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART] >= main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART
				&& stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART] <= main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_2_PRISE_ATOME);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEPASSE_ZONE_CHAOS_RAMASSE_DEPART : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEPASSE_ZONE_CHAOS_RAMASSE_DEPART] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEPASSE_ZONE_CHAOS_RAMASSE_DEPART
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_FIN_SEQUENCE : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_FIN_SEQUENCE] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_FIN_SEQUENCE
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART__final_ : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART__FINAL_] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART__final_
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEPLACEMENT_RAMASSAGE_ATOME : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEPLACEMENT_RAMASSAGE_ATOME] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEPLACEMENT_RAMASSAGE_ATOME
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PRISE_ATOME : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PRISE_ATOME] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PRISE_ATOME
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DESCENTE_PARECHOC : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DESCENTE_PARECHOC] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DESCENTE_PARECHOC
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_ACTIVATION_POMPE : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_ACTIVATION_POMPE] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_ACTIVATION_POMPE
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEVENTOUSAGE_ATOMES : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEVENTOUSAGE_ATOMES] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEVENTOUSAGE_ATOMES
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_VITESSE_VENTOUSE_01 : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_VITESSE_VENTOUSE_01] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_VITESSE_VENTOUSE_01
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_VITESSE_VENTOUSE_02 : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_VITESSE_VENTOUSE_02] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_VITESSE_VENTOUSE_02
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PIVOTEMENT_ATOME_01 : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PIVOTEMENT_ATOME_01] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PIVOTEMENT_ATOME_01
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PIVOTEMENT_ATOME_02 : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PIVOTEMENT_ATOME_02] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PIVOTEMENT_ATOME_02
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_PLATEAUX_MILIEU : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_PLATEAUX_MILIEU] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_PLATEAUX_MILIEU
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_BRAS_HAUT_01 : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_BRAS_HAUT_01] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_BRAS_HAUT_01
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_BRAS_HAUT_02 : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_BRAS_HAUT_02] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_BRAS_HAUT_02
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_SECU_ELETROVANNES : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_SECU_ELETROVANNES] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_SECU_ELETROVANNES
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_PLATEAUX_BAS : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_PLATEAUX_BAS] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_PLATEAUX_BAS
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_1_POSITIONS_PLATEAUX_MILIEU : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_COPY_1_POSITIONS_PLATEAUX_MILIEU] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_1_POSITIONS_PLATEAUX_MILIEU
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_GLISSSADE : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_GLISSSADE] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_GLISSSADE
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_1_PRISE_ATOME : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_COPY_1_PRISE_ATOME] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_1_PRISE_ATOME
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_2_PRISE_ATOME : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_COPY_2_PRISE_ATOME] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_2_PRISE_ATOME
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO] >= main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO
				&& stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO] <= main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_MAINTIEN_KMAR_AR);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_SE_METTRE_EN_LIEU_SUR : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_SE_METTRE_EN_LIEU_SUR] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_SE_METTRE_EN_LIEU_SUR
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO__final_ : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO__FINAL_] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO__final_
			);
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_MAINTIEN_KMAR_AR : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_MAINTIEN_KMAR_AR] == main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_MAINTIEN_KMAR_AR
			);
		case main_region_FIN_MATCH : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_FIN_MATCH] == main_region_FIN_MATCH
			);
		default: return false;
	}
}

IA::DefaultSCI* IA::getDefaultSCI()
{
	return &iface;
}
/* Functions for event EV_Tirette in interface DefaultSCI */
void IA::DefaultSCI::raise_eV_Tirette()
{
	EV_Tirette_raised = true;
}
void IA::raise_eV_Tirette()
{
	iface.raise_eV_Tirette();
}
/* Functions for event EV_Obstacle in interface DefaultSCI */
void IA::DefaultSCI::raise_eV_Obstacle()
{
	EV_Obstacle_raised = true;
}
void IA::raise_eV_Obstacle()
{
	iface.raise_eV_Obstacle();
}
/* Functions for event EV_ConvergenceMvt in interface DefaultSCI */
void IA::DefaultSCI::raise_eV_ConvergenceMvt()
{
	EV_ConvergenceMvt_raised = true;
}
void IA::raise_eV_ConvergenceMvt()
{
	iface.raise_eV_ConvergenceMvt();
}
/* Functions for event EV_ConvergenceMvt_Rapide in interface DefaultSCI */
void IA::DefaultSCI::raise_eV_ConvergenceMvt_Rapide()
{
	EV_ConvergenceMvt_Rapide_raised = true;
}
void IA::raise_eV_ConvergenceMvt_Rapide()
{
	iface.raise_eV_ConvergenceMvt_Rapide();
}
/* Functions for event EV_ConvergenceChariot in interface DefaultSCI */
void IA::DefaultSCI::raise_eV_ConvergenceChariot()
{
	EV_ConvergenceChariot_raised = true;
}
void IA::raise_eV_ConvergenceChariot()
{
	iface.raise_eV_ConvergenceChariot();
}
double IA::DefaultSCI::get_iN_x_pos() const
{
	return IN_x_pos;
}

double IA::get_iN_x_pos() const
{
	return iface.IN_x_pos;
}

void IA::DefaultSCI::set_iN_x_pos(double value)
{
	IN_x_pos = value;
}

void IA::set_iN_x_pos(double value)
{
	iface.IN_x_pos = value;
}

double IA::DefaultSCI::get_iN_y_pos() const
{
	return IN_y_pos;
}

double IA::get_iN_y_pos() const
{
	return iface.IN_y_pos;
}

void IA::DefaultSCI::set_iN_y_pos(double value)
{
	IN_y_pos = value;
}

void IA::set_iN_y_pos(double value)
{
	iface.IN_y_pos = value;
}

double IA::DefaultSCI::get_iN_teta_pos() const
{
	return IN_teta_pos;
}

double IA::get_iN_teta_pos() const
{
	return iface.IN_teta_pos;
}

void IA::DefaultSCI::set_iN_teta_pos(double value)
{
	IN_teta_pos = value;
}

void IA::set_iN_teta_pos(double value)
{
	iface.IN_teta_pos = value;
}

double IA::DefaultSCI::get_iN_vitesse() const
{
	return IN_vitesse;
}

double IA::get_iN_vitesse() const
{
	return iface.IN_vitesse;
}

void IA::DefaultSCI::set_iN_vitesse(double value)
{
	IN_vitesse = value;
}

void IA::set_iN_vitesse(double value)
{
	iface.IN_vitesse = value;
}

double IA::DefaultSCI::get_iN_sens_deplacement() const
{
	return IN_sens_deplacement;
}

double IA::get_iN_sens_deplacement() const
{
	return iface.IN_sens_deplacement;
}

void IA::DefaultSCI::set_iN_sens_deplacement(double value)
{
	IN_sens_deplacement = value;
}

void IA::set_iN_sens_deplacement(double value)
{
	iface.IN_sens_deplacement = value;
}

int32_t IA::DefaultSCI::get_iN_Couleur() const
{
	return IN_Couleur;
}

int32_t IA::get_iN_Couleur() const
{
	return iface.IN_Couleur;
}

void IA::DefaultSCI::set_iN_Couleur(int32_t value)
{
	IN_Couleur = value;
}

void IA::set_iN_Couleur(int32_t value)
{
	iface.IN_Couleur = value;
}

int32_t IA::DefaultSCI::get_iN_choixStrategie() const
{
	return IN_choixStrategie;
}

int32_t IA::get_iN_choixStrategie() const
{
	return iface.IN_choixStrategie;
}

void IA::DefaultSCI::set_iN_choixStrategie(int32_t value)
{
	IN_choixStrategie = value;
}

void IA::set_iN_choixStrategie(int32_t value)
{
	iface.IN_choixStrategie = value;
}

int32_t IA::DefaultSCI::get_iN_Obstacle() const
{
	return IN_Obstacle;
}

int32_t IA::get_iN_Obstacle() const
{
	return iface.IN_Obstacle;
}

void IA::DefaultSCI::set_iN_Obstacle(int32_t value)
{
	IN_Obstacle = value;
}

void IA::set_iN_Obstacle(int32_t value)
{
	iface.IN_Obstacle = value;
}

sc_boolean IA::DefaultSCI::get_iN_Depression() const
{
	return IN_Depression;
}

sc_boolean IA::get_iN_Depression() const
{
	return iface.IN_Depression;
}

void IA::DefaultSCI::set_iN_Depression(sc_boolean value)
{
	IN_Depression = value;
}

void IA::set_iN_Depression(sc_boolean value)
{
	iface.IN_Depression = value;
}

sc_boolean IA::DefaultSCI::get_forceObstacle() const
{
	return forceObstacle;
}

sc_boolean IA::get_forceObstacle() const
{
	return iface.forceObstacle;
}

void IA::DefaultSCI::set_forceObstacle(sc_boolean value)
{
	forceObstacle = value;
}

void IA::set_forceObstacle(sc_boolean value)
{
	iface.forceObstacle = value;
}

sc_boolean IA::DefaultSCI::get_uS_AV() const
{
	return US_AV;
}

sc_boolean IA::get_uS_AV() const
{
	return iface.US_AV;
}

void IA::DefaultSCI::set_uS_AV(sc_boolean value)
{
	US_AV = value;
}

void IA::set_uS_AV(sc_boolean value)
{
	iface.US_AV = value;
}

sc_boolean IA::DefaultSCI::get_uS_AR() const
{
	return US_AR;
}

sc_boolean IA::get_uS_AR() const
{
	return iface.US_AR;
}

void IA::DefaultSCI::set_uS_AR(sc_boolean value)
{
	US_AR = value;
}

void IA::set_uS_AR(sc_boolean value)
{
	iface.US_AR = value;
}

int32_t IA::DefaultSCI::get_couleur() const
{
	return Couleur;
}

int32_t IA::get_couleur() const
{
	return iface.Couleur;
}

void IA::DefaultSCI::set_couleur(int32_t value)
{
	Couleur = value;
}

void IA::set_couleur(int32_t value)
{
	iface.Couleur = value;
}

int32_t IA::DefaultSCI::get_choixStrategie() const
{
	return choixStrategie;
}

int32_t IA::get_choixStrategie() const
{
	return iface.choixStrategie;
}

void IA::DefaultSCI::set_choixStrategie(int32_t value)
{
	choixStrategie = value;
}

void IA::set_choixStrategie(int32_t value)
{
	iface.choixStrategie = value;
}

double IA::DefaultSCI::get_countTimeMvt() const
{
	return countTimeMvt;
}

double IA::get_countTimeMvt() const
{
	return iface.countTimeMvt;
}

void IA::DefaultSCI::set_countTimeMvt(double value)
{
	countTimeMvt = value;
}

void IA::set_countTimeMvt(double value)
{
	iface.countTimeMvt = value;
}

double IA::DefaultSCI::get_tempsMatch() const
{
	return tempsMatch;
}

double IA::get_tempsMatch() const
{
	return iface.tempsMatch;
}

void IA::DefaultSCI::set_tempsMatch(double value)
{
	tempsMatch = value;
}

void IA::set_tempsMatch(double value)
{
	iface.tempsMatch = value;
}

int32_t IA::DefaultSCI::get_countTempo() const
{
	return countTempo;
}

int32_t IA::get_countTempo() const
{
	return iface.countTempo;
}

void IA::DefaultSCI::set_countTempo(int32_t value)
{
	countTempo = value;
}

void IA::set_countTempo(int32_t value)
{
	iface.countTempo = value;
}

int32_t IA::DefaultSCI::get_countTempo2() const
{
	return countTempo2;
}

int32_t IA::get_countTempo2() const
{
	return iface.countTempo2;
}

void IA::DefaultSCI::set_countTempo2(int32_t value)
{
	countTempo2 = value;
}

void IA::set_countTempo2(int32_t value)
{
	iface.countTempo2 = value;
}

double IA::DefaultSCI::get_countTime() const
{
	return countTime;
}

double IA::get_countTime() const
{
	return iface.countTime;
}

void IA::DefaultSCI::set_countTime(double value)
{
	countTime = value;
}

void IA::set_countTime(double value)
{
	iface.countTime = value;
}

double IA::DefaultSCI::get_x_pos_mem() const
{
	return x_pos_mem;
}

double IA::get_x_pos_mem() const
{
	return iface.x_pos_mem;
}

void IA::DefaultSCI::set_x_pos_mem(double value)
{
	x_pos_mem = value;
}

void IA::set_x_pos_mem(double value)
{
	iface.x_pos_mem = value;
}

double IA::DefaultSCI::get_y_pos_mem() const
{
	return y_pos_mem;
}

double IA::get_y_pos_mem() const
{
	return iface.y_pos_mem;
}

void IA::DefaultSCI::set_y_pos_mem(double value)
{
	y_pos_mem = value;
}

void IA::set_y_pos_mem(double value)
{
	iface.y_pos_mem = value;
}

double IA::DefaultSCI::get_teta_pos_mem() const
{
	return teta_pos_mem;
}

double IA::get_teta_pos_mem() const
{
	return iface.teta_pos_mem;
}

void IA::DefaultSCI::set_teta_pos_mem(double value)
{
	teta_pos_mem = value;
}

void IA::set_teta_pos_mem(double value)
{
	iface.teta_pos_mem = value;
}

int32_t IA::DefaultSCI::get_nb_Modules() const
{
	return nb_Modules;
}

int32_t IA::get_nb_Modules() const
{
	return iface.nb_Modules;
}

void IA::DefaultSCI::set_nb_Modules(int32_t value)
{
	nb_Modules = value;
}

void IA::set_nb_Modules(int32_t value)
{
	iface.nb_Modules = value;
}

int32_t IA::DefaultSCI::get_score_grosbot() const
{
	return score_grosbot;
}

int32_t IA::get_score_grosbot() const
{
	return iface.score_grosbot;
}

void IA::DefaultSCI::set_score_grosbot(int32_t value)
{
	score_grosbot = value;
}

void IA::set_score_grosbot(int32_t value)
{
	iface.score_grosbot = value;
}

int32_t IA::DefaultSCI::get_score_minibot() const
{
	return score_minibot;
}

int32_t IA::get_score_minibot() const
{
	return iface.score_minibot;
}

void IA::DefaultSCI::set_score_minibot(int32_t value)
{
	score_minibot = value;
}

void IA::set_score_minibot(int32_t value)
{
	iface.score_minibot = value;
}

int32_t IA::DefaultSCI::get_score_experience() const
{
	return score_experience;
}

int32_t IA::get_score_experience() const
{
	return iface.score_experience;
}

void IA::DefaultSCI::set_score_experience(int32_t value)
{
	score_experience = value;
}

void IA::set_score_experience(int32_t value)
{
	iface.score_experience = value;
}

int32_t IA::DefaultSCI::get_score_total() const
{
	return score_total;
}

int32_t IA::get_score_total() const
{
	return iface.score_total;
}

void IA::DefaultSCI::set_score_total(int32_t value)
{
	score_total = value;
}

void IA::set_score_total(int32_t value)
{
	iface.score_total = value;
}

sc_boolean IA::DefaultSCI::get_evitementEnCours() const
{
	return evitementEnCours;
}

sc_boolean IA::get_evitementEnCours() const
{
	return iface.evitementEnCours;
}

void IA::DefaultSCI::set_evitementEnCours(sc_boolean value)
{
	evitementEnCours = value;
}

void IA::set_evitementEnCours(sc_boolean value)
{
	iface.evitementEnCours = value;
}

sc_boolean IA::DefaultSCI::get_inhibeObstacle() const
{
	return inhibeObstacle;
}

sc_boolean IA::get_inhibeObstacle() const
{
	return iface.inhibeObstacle;
}

void IA::DefaultSCI::set_inhibeObstacle(sc_boolean value)
{
	inhibeObstacle = value;
}

void IA::set_inhibeObstacle(sc_boolean value)
{
	iface.inhibeObstacle = value;
}

int32_t IA::DefaultSCI::get_evit_memo_cde_min() const
{
	return evit_memo_cde_min;
}

int32_t IA::get_evit_memo_cde_min() const
{
	return iface.evit_memo_cde_min;
}

void IA::DefaultSCI::set_evit_memo_cde_min(int32_t value)
{
	evit_memo_cde_min = value;
}

void IA::set_evit_memo_cde_min(int32_t value)
{
	iface.evit_memo_cde_min = value;
}

int32_t IA::DefaultSCI::get_evit_memo_cde_max() const
{
	return evit_memo_cde_max;
}

int32_t IA::get_evit_memo_cde_max() const
{
	return iface.evit_memo_cde_max;
}

void IA::DefaultSCI::set_evit_memo_cde_max(int32_t value)
{
	evit_memo_cde_max = value;
}

void IA::set_evit_memo_cde_max(int32_t value)
{
	iface.evit_memo_cde_max = value;
}

double IA::DefaultSCI::get_evit_memo_idx_sportiv() const
{
	return evit_memo_idx_sportiv;
}

double IA::get_evit_memo_idx_sportiv() const
{
	return iface.evit_memo_idx_sportiv;
}

void IA::DefaultSCI::set_evit_memo_idx_sportiv(double value)
{
	evit_memo_idx_sportiv = value;
}

void IA::set_evit_memo_idx_sportiv(double value)
{
	iface.evit_memo_idx_sportiv = value;
}

double IA::DefaultSCI::get_evit_memo_vitesse_avance() const
{
	return evit_memo_vitesse_avance;
}

double IA::get_evit_memo_vitesse_avance() const
{
	return iface.evit_memo_vitesse_avance;
}

void IA::DefaultSCI::set_evit_memo_vitesse_avance(double value)
{
	evit_memo_vitesse_avance = value;
}

void IA::set_evit_memo_vitesse_avance(double value)
{
	iface.evit_memo_vitesse_avance = value;
}

double IA::DefaultSCI::get_evit_memo_vitesse_angle() const
{
	return evit_memo_vitesse_angle;
}

double IA::get_evit_memo_vitesse_angle() const
{
	return iface.evit_memo_vitesse_angle;
}

void IA::DefaultSCI::set_evit_memo_vitesse_angle(double value)
{
	evit_memo_vitesse_angle = value;
}

void IA::set_evit_memo_vitesse_angle(double value)
{
	iface.evit_memo_vitesse_angle = value;
}

sc_boolean IA::DefaultSCI::get_evit_memo_force_obstacle() const
{
	return evit_memo_force_obstacle;
}

sc_boolean IA::get_evit_memo_force_obstacle() const
{
	return iface.evit_memo_force_obstacle;
}

void IA::DefaultSCI::set_evit_memo_force_obstacle(sc_boolean value)
{
	evit_memo_force_obstacle = value;
}

void IA::set_evit_memo_force_obstacle(sc_boolean value)
{
	iface.evit_memo_force_obstacle = value;
}

double IA::DefaultSCI::get_evit_sens_avant_detection() const
{
	return evit_sens_avant_detection;
}

double IA::get_evit_sens_avant_detection() const
{
	return iface.evit_sens_avant_detection;
}

void IA::DefaultSCI::set_evit_sens_avant_detection(double value)
{
	evit_sens_avant_detection = value;
}

void IA::set_evit_sens_avant_detection(double value)
{
	iface.evit_sens_avant_detection = value;
}

int32_t IA::DefaultSCI::get_evit_nombre_tentatives() const
{
	return evit_nombre_tentatives;
}

int32_t IA::get_evit_nombre_tentatives() const
{
	return iface.evit_nombre_tentatives;
}

void IA::DefaultSCI::set_evit_nombre_tentatives(int32_t value)
{
	evit_nombre_tentatives = value;
}

void IA::set_evit_nombre_tentatives(int32_t value)
{
	iface.evit_nombre_tentatives = value;
}

int32_t IA::DefaultSCI::get_evit_nombre_max_tentatives() const
{
	return evit_nombre_max_tentatives;
}

int32_t IA::get_evit_nombre_max_tentatives() const
{
	return iface.evit_nombre_max_tentatives;
}

void IA::DefaultSCI::set_evit_nombre_max_tentatives(int32_t value)
{
	evit_nombre_max_tentatives = value;
}

void IA::set_evit_nombre_max_tentatives(int32_t value)
{
	iface.evit_nombre_max_tentatives = value;
}

int32_t IA::DefaultSCI::get_evit_detection_obstacle_bitfield() const
{
	return evit_detection_obstacle_bitfield;
}

int32_t IA::get_evit_detection_obstacle_bitfield() const
{
	return iface.evit_detection_obstacle_bitfield;
}

void IA::DefaultSCI::set_evit_detection_obstacle_bitfield(int32_t value)
{
	evit_detection_obstacle_bitfield = value;
}

void IA::set_evit_detection_obstacle_bitfield(int32_t value)
{
	iface.evit_detection_obstacle_bitfield = value;
}

sc_boolean IA::DefaultSCI::get_evit_strategie_evitement_en_cours() const
{
	return evit_strategie_evitement_en_cours;
}

sc_boolean IA::get_evit_strategie_evitement_en_cours() const
{
	return iface.evit_strategie_evitement_en_cours;
}

void IA::DefaultSCI::set_evit_strategie_evitement_en_cours(sc_boolean value)
{
	evit_strategie_evitement_en_cours = value;
}

void IA::set_evit_strategie_evitement_en_cours(sc_boolean value)
{
	iface.evit_strategie_evitement_en_cours = value;
}

int32_t IA::DefaultSCI::get_evit_sgn_dist_eloigne() const
{
	return evit_sgn_dist_eloigne;
}

int32_t IA::get_evit_sgn_dist_eloigne() const
{
	return iface.evit_sgn_dist_eloigne;
}

void IA::DefaultSCI::set_evit_sgn_dist_eloigne(int32_t value)
{
	evit_sgn_dist_eloigne = value;
}

void IA::set_evit_sgn_dist_eloigne(int32_t value)
{
	iface.evit_sgn_dist_eloigne = value;
}

int32_t IA::DefaultSCI::get_evit_sgn_angle_pivote() const
{
	return evit_sgn_angle_pivote;
}

int32_t IA::get_evit_sgn_angle_pivote() const
{
	return iface.evit_sgn_angle_pivote;
}

void IA::DefaultSCI::set_evit_sgn_angle_pivote(int32_t value)
{
	evit_sgn_angle_pivote = value;
}

void IA::set_evit_sgn_angle_pivote(int32_t value)
{
	iface.evit_sgn_angle_pivote = value;
}

int32_t IA::DefaultSCI::get_evit_sgn_dist_evacue() const
{
	return evit_sgn_dist_evacue;
}

int32_t IA::get_evit_sgn_dist_evacue() const
{
	return iface.evit_sgn_dist_evacue;
}

void IA::DefaultSCI::set_evit_sgn_dist_evacue(int32_t value)
{
	evit_sgn_dist_evacue = value;
}

void IA::set_evit_sgn_dist_evacue(int32_t value)
{
	iface.evit_sgn_dist_evacue = value;
}

int32_t IA::DefaultSCI::get_evit_toggle_signe() const
{
	return evit_toggle_signe;
}

int32_t IA::get_evit_toggle_signe() const
{
	return iface.evit_toggle_signe;
}

void IA::DefaultSCI::set_evit_toggle_signe(int32_t value)
{
	evit_toggle_signe = value;
}

void IA::set_evit_toggle_signe(int32_t value)
{
	iface.evit_toggle_signe = value;
}

int32_t IA::DefaultSCI::get_evit_debug_etape() const
{
	return evit_debug_etape;
}

int32_t IA::get_evit_debug_etape() const
{
	return iface.evit_debug_etape;
}

void IA::DefaultSCI::set_evit_debug_etape(int32_t value)
{
	evit_debug_etape = value;
}

void IA::set_evit_debug_etape(int32_t value)
{
	iface.evit_debug_etape = value;
}

int32_t IA::DefaultSCI::get_evit_choix_strategie() const
{
	return evit_choix_strategie;
}

int32_t IA::get_evit_choix_strategie() const
{
	return iface.evit_choix_strategie;
}

void IA::DefaultSCI::set_evit_choix_strategie(int32_t value)
{
	evit_choix_strategie = value;
}

void IA::set_evit_choix_strategie(int32_t value)
{
	iface.evit_choix_strategie = value;
}

const int32_t IA::DefaultSCI::get_tOB_G_HAUT() const
{
	return TOB_G_HAUT;
}

const int32_t IA::get_tOB_G_HAUT() const
{
	return IA::DefaultSCI::TOB_G_HAUT;
}

const int32_t IA::DefaultSCI::get_tOB_G_MILIEU() const
{
	return TOB_G_MILIEU;
}

const int32_t IA::get_tOB_G_MILIEU() const
{
	return IA::DefaultSCI::TOB_G_MILIEU;
}

const int32_t IA::DefaultSCI::get_tOB_G_BAS() const
{
	return TOB_G_BAS;
}

const int32_t IA::get_tOB_G_BAS() const
{
	return IA::DefaultSCI::TOB_G_BAS;
}

const int32_t IA::DefaultSCI::get_tOB_D_HAUT() const
{
	return TOB_D_HAUT;
}

const int32_t IA::get_tOB_D_HAUT() const
{
	return IA::DefaultSCI::TOB_D_HAUT;
}

const int32_t IA::DefaultSCI::get_tOB_D_MILIEU() const
{
	return TOB_D_MILIEU;
}

const int32_t IA::get_tOB_D_MILIEU() const
{
	return IA::DefaultSCI::TOB_D_MILIEU;
}

const int32_t IA::DefaultSCI::get_tOB_D_BAS() const
{
	return TOB_D_BAS;
}

const int32_t IA::get_tOB_D_BAS() const
{
	return IA::DefaultSCI::TOB_D_BAS;
}

const int32_t IA::DefaultSCI::get_tOUSE_G_HAUT() const
{
	return TOUSE_G_HAUT;
}

const int32_t IA::get_tOUSE_G_HAUT() const
{
	return IA::DefaultSCI::TOUSE_G_HAUT;
}

const int32_t IA::DefaultSCI::get_tOUSE_G_MILIEU() const
{
	return TOUSE_G_MILIEU;
}

const int32_t IA::get_tOUSE_G_MILIEU() const
{
	return IA::DefaultSCI::TOUSE_G_MILIEU;
}

const int32_t IA::DefaultSCI::get_tOUSE_G_MI_BAS() const
{
	return TOUSE_G_MI_BAS;
}

const int32_t IA::get_tOUSE_G_MI_BAS() const
{
	return IA::DefaultSCI::TOUSE_G_MI_BAS;
}

const int32_t IA::DefaultSCI::get_tOUSE_G_BAS() const
{
	return TOUSE_G_BAS;
}

const int32_t IA::get_tOUSE_G_BAS() const
{
	return IA::DefaultSCI::TOUSE_G_BAS;
}

const int32_t IA::DefaultSCI::get_tOUSE_D_HAUT() const
{
	return TOUSE_D_HAUT;
}

const int32_t IA::get_tOUSE_D_HAUT() const
{
	return IA::DefaultSCI::TOUSE_D_HAUT;
}

const int32_t IA::DefaultSCI::get_tOUSE_D_MILIEU() const
{
	return TOUSE_D_MILIEU;
}

const int32_t IA::get_tOUSE_D_MILIEU() const
{
	return IA::DefaultSCI::TOUSE_D_MILIEU;
}

const int32_t IA::DefaultSCI::get_tOUSE_D_MI_BAS() const
{
	return TOUSE_D_MI_BAS;
}

const int32_t IA::get_tOUSE_D_MI_BAS() const
{
	return IA::DefaultSCI::TOUSE_D_MI_BAS;
}

const int32_t IA::DefaultSCI::get_tOUSE_D_BAS() const
{
	return TOUSE_D_BAS;
}

const int32_t IA::get_tOUSE_D_BAS() const
{
	return IA::DefaultSCI::TOUSE_D_BAS;
}

const int32_t IA::DefaultSCI::get_kMAR_G_HAUT() const
{
	return KMAR_G_HAUT;
}

const int32_t IA::get_kMAR_G_HAUT() const
{
	return IA::DefaultSCI::KMAR_G_HAUT;
}

const int32_t IA::DefaultSCI::get_kMAR_G_MILIEU() const
{
	return KMAR_G_MILIEU;
}

const int32_t IA::get_kMAR_G_MILIEU() const
{
	return IA::DefaultSCI::KMAR_G_MILIEU;
}

const int32_t IA::DefaultSCI::get_kMAR_G_BAS() const
{
	return KMAR_G_BAS;
}

const int32_t IA::get_kMAR_G_BAS() const
{
	return IA::DefaultSCI::KMAR_G_BAS;
}

const int32_t IA::DefaultSCI::get_kMAR_D_HAUT() const
{
	return KMAR_D_HAUT;
}

const int32_t IA::get_kMAR_D_HAUT() const
{
	return IA::DefaultSCI::KMAR_D_HAUT;
}

const int32_t IA::DefaultSCI::get_kMAR_D_MILIEU() const
{
	return KMAR_D_MILIEU;
}

const int32_t IA::get_kMAR_D_MILIEU() const
{
	return IA::DefaultSCI::KMAR_D_MILIEU;
}

const int32_t IA::DefaultSCI::get_kMAR_D_BAS() const
{
	return KMAR_D_BAS;
}

const int32_t IA::get_kMAR_D_BAS() const
{
	return IA::DefaultSCI::KMAR_D_BAS;
}

const int32_t IA::DefaultSCI::get_kMAR_DROITE() const
{
	return KMAR_DROITE;
}

const int32_t IA::get_kMAR_DROITE() const
{
	return IA::DefaultSCI::KMAR_DROITE;
}

const int32_t IA::DefaultSCI::get_kMAR_MILIEU() const
{
	return KMAR_MILIEU;
}

const int32_t IA::get_kMAR_MILIEU() const
{
	return IA::DefaultSCI::KMAR_MILIEU;
}

const int32_t IA::DefaultSCI::get_kMAR_GAUCHE() const
{
	return KMAR_GAUCHE;
}

const int32_t IA::get_kMAR_GAUCHE() const
{
	return IA::DefaultSCI::KMAR_GAUCHE;
}

const int32_t IA::DefaultSCI::get_kMAR_ERECTION() const
{
	return KMAR_ERECTION;
}

const int32_t IA::get_kMAR_ERECTION() const
{
	return IA::DefaultSCI::KMAR_ERECTION;
}

const int32_t IA::DefaultSCI::get_kMAR_MI_MOLLE() const
{
	return KMAR_MI_MOLLE;
}

const int32_t IA::get_kMAR_MI_MOLLE() const
{
	return IA::DefaultSCI::KMAR_MI_MOLLE;
}

const int32_t IA::DefaultSCI::get_kMAR_MOLLE() const
{
	return KMAR_MOLLE;
}

const int32_t IA::get_kMAR_MOLLE() const
{
	return IA::DefaultSCI::KMAR_MOLLE;
}

const int32_t IA::DefaultSCI::get_pARE_CHOC_BAS() const
{
	return PARE_CHOC_BAS;
}

const int32_t IA::get_pARE_CHOC_BAS() const
{
	return IA::DefaultSCI::PARE_CHOC_BAS;
}

const int32_t IA::DefaultSCI::get_pARE_CHOC_HAUT() const
{
	return PARE_CHOC_HAUT;
}

const int32_t IA::get_pARE_CHOC_HAUT() const
{
	return IA::DefaultSCI::PARE_CHOC_HAUT;
}

const int32_t IA::DefaultSCI::get_cHUCK_FERME() const
{
	return CHUCK_FERME;
}

const int32_t IA::get_cHUCK_FERME() const
{
	return IA::DefaultSCI::CHUCK_FERME;
}

const int32_t IA::DefaultSCI::get_cHUCK_OUVERT() const
{
	return CHUCK_OUVERT;
}

const int32_t IA::get_cHUCK_OUVERT() const
{
	return IA::DefaultSCI::CHUCK_OUVERT;
}

const int32_t IA::DefaultSCI::get_cODEUR_NON_DEFINI() const
{
	return CODEUR_NON_DEFINI;
}

const int32_t IA::get_cODEUR_NON_DEFINI() const
{
	return IA::DefaultSCI::CODEUR_NON_DEFINI;
}

const int32_t IA::DefaultSCI::get_cODEUR_CHARIOT() const
{
	return CODEUR_CHARIOT;
}

const int32_t IA::get_cODEUR_CHARIOT() const
{
	return IA::DefaultSCI::CODEUR_CHARIOT;
}

const int32_t IA::DefaultSCI::get_cODEUR_ROUE_DROITE() const
{
	return CODEUR_ROUE_DROITE;
}

const int32_t IA::get_cODEUR_ROUE_DROITE() const
{
	return IA::DefaultSCI::CODEUR_ROUE_DROITE;
}

const int32_t IA::DefaultSCI::get_cODEUR_ROUE_GAUCHE() const
{
	return CODEUR_ROUE_GAUCHE;
}

const int32_t IA::get_cODEUR_ROUE_GAUCHE() const
{
	return IA::DefaultSCI::CODEUR_ROUE_GAUCHE;
}

const int32_t IA::DefaultSCI::get_vIOLET() const
{
	return VIOLET;
}

const int32_t IA::get_vIOLET() const
{
	return IA::DefaultSCI::VIOLET;
}

const int32_t IA::DefaultSCI::get_jAUNE() const
{
	return JAUNE;
}

const int32_t IA::get_jAUNE() const
{
	return IA::DefaultSCI::JAUNE;
}

const float IA::DefaultSCI::get_pI() const
{
	return PI;
}

const float IA::get_pI() const
{
	return IA::DefaultSCI::PI;
}

int32_t IA::InternalSCI::get_invMouv() const
{
	return invMouv;
}

void IA::InternalSCI::set_invMouv(int32_t value)
{
	invMouv = value;
}

double IA::InternalSCI::get_te() const
{
	return Te;
}

void IA::InternalSCI::set_te(double value)
{
	Te = value;
}

sc_boolean IA::InternalSCI::get_sequence0() const
{
	return sequence0;
}

void IA::InternalSCI::set_sequence0(sc_boolean value)
{
	sequence0 = value;
}

sc_boolean IA::InternalSCI::get_sequence1() const
{
	return sequence1;
}

void IA::InternalSCI::set_sequence1(sc_boolean value)
{
	sequence1 = value;
}

sc_boolean IA::InternalSCI::get_sequence2() const
{
	return sequence2;
}

void IA::InternalSCI::set_sequence2(sc_boolean value)
{
	sequence2 = value;
}

sc_boolean IA::InternalSCI::get_sequence3() const
{
	return sequence3;
}

void IA::InternalSCI::set_sequence3(sc_boolean value)
{
	sequence3 = value;
}

sc_boolean IA::InternalSCI::get_sequence4() const
{
	return sequence4;
}

void IA::InternalSCI::set_sequence4(sc_boolean value)
{
	sequence4 = value;
}

sc_boolean IA::InternalSCI::get_sequence5() const
{
	return sequence5;
}

void IA::InternalSCI::set_sequence5(sc_boolean value)
{
	sequence5 = value;
}

sc_boolean IA::InternalSCI::get_sequence6() const
{
	return sequence6;
}

void IA::InternalSCI::set_sequence6(sc_boolean value)
{
	sequence6 = value;
}

sc_boolean IA::InternalSCI::get_sequence7() const
{
	return sequence7;
}

void IA::InternalSCI::set_sequence7(sc_boolean value)
{
	sequence7 = value;
}

int32_t IA::InternalSCI::get_nb_tentatives() const
{
	return nb_tentatives;
}

void IA::InternalSCI::set_nb_tentatives(int32_t value)
{
	nb_tentatives = value;
}

int32_t IA::InternalSCI::get_idx_strategy() const
{
	return idx_strategy;
}

void IA::InternalSCI::set_idx_strategy(int32_t value)
{
	idx_strategy = value;
}

IA::SCI_Asser* IA::getSCI_Asser()
{
	return &ifaceAsser;
}
IA::SCI_Servo* IA::getSCI_Servo()
{
	return &ifaceServo;
}
IA::SCI_Ax* IA::getSCI_Ax()
{
	return &ifaceAx;
}
int32_t IA::SCI_Ax::get_bRAS_OUVERT() const
{
	return BRAS_OUVERT;
}

void IA::SCI_Ax::set_bRAS_OUVERT(int32_t value)
{
	BRAS_OUVERT = value;
}

IA::SCI_Moteur* IA::getSCI_Moteur()
{
	return &ifaceMoteur;
}
IA::SCI_Chariot* IA::getSCI_Chariot()
{
	return &ifaceChariot;
}
sc_boolean IA::SCI_Chariot::get_isReady() const
{
	return isReady;
}

void IA::SCI_Chariot::set_isReady(sc_boolean value)
{
	isReady = value;
}

sc_boolean IA::SCI_Chariot::get_isConv() const
{
	return isConv;
}

void IA::SCI_Chariot::set_isConv(sc_boolean value)
{
	isConv = value;
}

IA::SCI_Capteur* IA::getSCI_Capteur()
{
	return &ifaceCapteur;
}
IA::SCI_Ihm* IA::getSCI_Ihm()
{
	return &ifaceIhm;
}

// implementations of all internal functions

/* Exit action for state 'INIT'. */
void IA::exact_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_INIT()
{
	/* Exit action for state 'INIT'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[0]));
}

/* Exit action for state 'TOBOGGANS_HAUTS'. */
void IA::exact_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_HAUTS()
{
	/* Exit action for state 'TOBOGGANS_HAUTS'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[1]));
}

/* Exit action for state 'APPRENTISSAGE_ASCENSEUR'. */
void IA::exact_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_APPRENTISSAGE_ASCENSEUR()
{
	/* Exit action for state 'APPRENTISSAGE_ASCENSEUR'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[2]));
}

/* Exit action for state 'TOBOGGANS_BAS'. */
void IA::exact_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_BAS()
{
	/* Exit action for state 'TOBOGGANS_BAS'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[3]));
}

/* Exit action for state 'KMAR_RANGE_01'. */
void IA::exact_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_RANGE_01()
{
	/* Exit action for state 'KMAR_RANGE_01'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[4]));
}

/* Exit action for state 'KMAR_RANGE_02'. */
void IA::exact_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_RANGE_02()
{
	/* Exit action for state 'KMAR_RANGE_02'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[5]));
}

/* Exit action for state 'KMAR_SORTI_01'. */
void IA::exact_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_SORTI_01()
{
	/* Exit action for state 'KMAR_SORTI_01'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[6]));
}

/* Exit action for state 'KMAR_SORTI_02'. */
void IA::exact_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_SORTI_02()
{
	/* Exit action for state 'KMAR_SORTI_02'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[7]));
}

/* Exit action for state 'Copy_1_TOBOGGANS_BAS'. */
void IA::exact_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_Copy_1_TOBOGGANS_BAS()
{
	/* Exit action for state 'Copy_1_TOBOGGANS_BAS'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[8]));
}

/* Exit action for state 'MATCH_EN_COURS'. */
void IA::exact_main_region_MATCH_EN_COURS()
{
	/* Exit action for state 'MATCH_EN_COURS'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[9]));
}

/* Exit action for state 'DETECTION_OBSTACLE'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE()
{
	/* Exit action for state 'DETECTION_OBSTACLE'. */
	Application.m_leds.setPattern(PATTERN_CLIGNO_12_34, 1000);
	iface.evit_debug_etape = 0;
}

/* Exit action for state 'EVITEMENT_INIT'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT()
{
	/* Exit action for state 'EVITEMENT_INIT'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[10]));
	Application.m_asservissement.setCdeMinCdeMax(-10, 10);
}

/* Exit action for state 'SORTIE_EVITEMENT'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_SORTIE_EVITEMENT()
{
	/* Exit action for state 'SORTIE_EVITEMENT'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[11]));
}

/* Exit action for state 'EVITEMENT_ATTENTE'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_ATTENTE()
{
	/* Exit action for state 'EVITEMENT_ATTENTE'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[12]));
}

/* Exit action for state 'STRATEGIE_EVITEMENT'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT()
{
	/* Exit action for state 'STRATEGIE_EVITEMENT'. */
	iface.evit_nombre_tentatives += 1;
}

/* Exit action for state 'EVITEMENT_ELOIGNEMENT'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ELOIGNEMENT()
{
	/* Exit action for state 'EVITEMENT_ELOIGNEMENT'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[13]));
}

/* Exit action for state 'EVITEMENT_ROTATION'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ROTATION()
{
	/* Exit action for state 'EVITEMENT_ROTATION'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[14]));
}

/* Exit action for state 'EVITEMENT_EVACUE'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE()
{
	/* Exit action for state 'EVITEMENT_EVACUE'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[15]));
}

/* Exit action for state 'EVITEMENT_REDRESSE'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_REDRESSE()
{
	/* Exit action for state 'EVITEMENT_REDRESSE'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[16]));
}

/* Exit action for state 'EVITEMENT_EVACUE_2'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE_2()
{
	/* Exit action for state 'EVITEMENT_EVACUE_2'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[17]));
}

/* Exit action for state 'DEPASSE_ZONE_CHAOS'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_DEPASSE_ZONE_CHAOS()
{
	/* Exit action for state 'DEPASSE_ZONE_CHAOS'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[18]));
}

/* Exit action for state 'FACE_ZONE_CHAOS'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_FACE_ZONE_CHAOS()
{
	/* Exit action for state 'FACE_ZONE_CHAOS'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[19]));
}

/* Exit action for state 'STOCKAGE_DANS_ZONE_DEPART'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_STOCKAGE_DANS_ZONE_DEPART()
{
	/* Exit action for state 'STOCKAGE_DANS_ZONE_DEPART'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[20]));
}

/* Exit action for state 'FIN_SEQUENCE'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_FIN_SEQUENCE()
{
	/* Exit action for state 'FIN_SEQUENCE'. */
	ifaceInternalSCI.sequence1 = false;
}

/* Exit action for state 'PARE_CHOC'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_PARE_CHOC()
{
	/* Exit action for state 'PARE_CHOC'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[21]));
}

/* Exit action for state 'MAINTIEN_KMAR_AR'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_MAINTIEN_KMAR_AR()
{
	/* Exit action for state 'MAINTIEN_KMAR_AR'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[22]));
}

/* Exit action for state 'FACE_BLEUIUM'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FACE_BLEUIUM()
{
	/* Exit action for state 'FACE_BLEUIUM'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[23]));
}

/* Exit action for state 'PREPA_POUSSETTE_JAUNE'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPA_POUSSETTE_JAUNE()
{
	/* Exit action for state 'PREPA_POUSSETTE_JAUNE'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[24]));
}

/* Exit action for state 'DEPLACEMENT_VERS_GOLDENIUM'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DEPLACEMENT_VERS_GOLDENIUM()
{
	/* Exit action for state 'DEPLACEMENT_VERS_GOLDENIUM'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[25]));
}

/* Exit action for state 'PREPARATION_KMAR_POUR_GOLDENIUM'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_POUR_GOLDENIUM()
{
	/* Exit action for state 'PREPARATION_KMAR_POUR_GOLDENIUM'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[26]));
}

/* Exit action for state 'VENTOUSAGE_GOLDENIUM'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_VENTOUSAGE_GOLDENIUM()
{
	/* Exit action for state 'VENTOUSAGE_GOLDENIUM'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[27]));
}

/* Exit action for state 'PREPARATION_KMAR_GAUCHE'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE()
{
	/* Exit action for state 'PREPARATION_KMAR_GAUCHE'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[28]));
}

/* Exit action for state 'PREPARATION_KMAR_DROITE'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_DROITE()
{
	/* Exit action for state 'PREPARATION_KMAR_DROITE'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[29]));
}

/* Exit action for state 'PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE()
{
	/* Exit action for state 'PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[30]));
}

/* Exit action for state 'PREPA_POUSSETTE_VIOLET'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPA_POUSSETTE_VIOLET()
{
	/* Exit action for state 'PREPA_POUSSETTE_VIOLET'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[31]));
}

/* Exit action for state 'GOLDENIUM_DANS_ROBOT_GAUCHE'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_GOLDENIUM_DANS_ROBOT_GAUCHE()
{
	/* Exit action for state 'GOLDENIUM_DANS_ROBOT_GAUCHE'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[32]));
}

/* Exit action for state 'PLACEMENT_DEVANT_BALANCE'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLACEMENT_DEVANT_BALANCE()
{
	/* Exit action for state 'PLACEMENT_DEVANT_BALANCE'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[33]));
	iface.forceObstacle = false;
}

/* Exit action for state 'PLUS_PROCHE_BALANCE'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLUS_PROCHE_BALANCE()
{
	/* Exit action for state 'PLUS_PROCHE_BALANCE'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[34]));
}

/* Exit action for state 'GOLDENIUM_EN_L_AIR'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_GOLDENIUM_EN_L_AIR()
{
	/* Exit action for state 'GOLDENIUM_EN_L_AIR'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[35]));
}

/* Exit action for state 'DROPAGE_GOLDENIUM'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DROPAGE_GOLDENIUM()
{
	/* Exit action for state 'DROPAGE_GOLDENIUM'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[36]));
}

/* Exit action for state 'FIN'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN()
{
	/* Exit action for state 'FIN'. */
	ifaceInternalSCI.sequence2 = false;
}

/* Exit action for state 'Copy_1_DROPAGE_GOLDENIUM'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DROPAGE_GOLDENIUM()
{
	/* Exit action for state 'Copy_1_DROPAGE_GOLDENIUM'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[37]));
}

/* Exit action for state 'RECULE_AVEC_PRECAUTION'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RECULE_AVEC_PRECAUTION()
{
	/* Exit action for state 'RECULE_AVEC_PRECAUTION'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[38]));
	iface.US_AV = true;
}

/* Exit action for state 'ARRET_MOTEURS'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ARRET_MOTEURS()
{
	/* Exit action for state 'ARRET_MOTEURS'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[39]));
}

/* Exit action for state 'MISE_GOLDENIUM_BAS'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_MISE_GOLDENIUM_BAS()
{
	/* Exit action for state 'MISE_GOLDENIUM_BAS'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[40]));
}

/* Exit action for state 'RALENTISSEMENT_KMAR_01'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RALENTISSEMENT_KMAR_01()
{
	/* Exit action for state 'RALENTISSEMENT_KMAR_01'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[41]));
}

/* Exit action for state 'RALENTISSEMENT_KMAR_02'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RALENTISSEMENT_KMAR_02()
{
	/* Exit action for state 'RALENTISSEMENT_KMAR_02'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[42]));
}

/* Exit action for state 'POSE_GOLDENIUM'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_POSE_GOLDENIUM()
{
	/* Exit action for state 'POSE_GOLDENIUM'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[43]));
}

/* Exit action for state 'DECOLLAGE_GOLDENIUM_01'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_01()
{
	/* Exit action for state 'DECOLLAGE_GOLDENIUM_01'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[44]));
}

/* Exit action for state 'DECOLLAGE_GOLDENIUM_02'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_02()
{
	/* Exit action for state 'DECOLLAGE_GOLDENIUM_02'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[45]));
}

/* Exit action for state 'KMAR_SECURE'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_SECURE()
{
	/* Exit action for state 'KMAR_SECURE'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[46]));
}

/* Exit action for state 'DECOLLAGE_GOLDENIUM_03'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_03()
{
	/* Exit action for state 'DECOLLAGE_GOLDENIUM_03'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[47]));
}

/* Exit action for state 'Copy_1_GOLDENIUM_DANS_ROBOT_GAUCHE'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_GOLDENIUM_DANS_ROBOT_GAUCHE()
{
	/* Exit action for state 'Copy_1_GOLDENIUM_DANS_ROBOT_GAUCHE'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[48]));
}

/* Exit action for state 'DESCEND_KMAR'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DESCEND_KMAR()
{
	/* Exit action for state 'DESCEND_KMAR'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[49]));
}

/* Exit action for state 'KMAR_MONTE'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_MONTE()
{
	/* Exit action for state 'KMAR_MONTE'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[50]));
}

/* Exit action for state 'KMAR_BIEN_DROIT'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_BIEN_DROIT()
{
	/* Exit action for state 'KMAR_BIEN_DROIT'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[51]));
}

/* Exit action for state 'ROTATION_VERS_GOLDENIUM'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ROTATION_VERS_GOLDENIUM()
{
	/* Exit action for state 'ROTATION_VERS_GOLDENIUM'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[52]));
	iface.forceObstacle = true;
}

/* Exit action for state 'PLACEMENT_FACE_GOLDENIUM'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLACEMENT_FACE_GOLDENIUM()
{
	/* Exit action for state 'PLACEMENT_FACE_GOLDENIUM'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[53]));
}

/* Exit action for state 'Copy_1_ACCOSTAGE_BALANCE'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_ACCOSTAGE_BALANCE()
{
	/* Exit action for state 'Copy_1_ACCOSTAGE_BALANCE'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[54]));
	Application.m_asservissement.CommandeManuelle(0, 0);
}

/* Exit action for state 'DECLENCHEMENT_ACCELERATEUR_JAUNE'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECLENCHEMENT_ACCELERATEUR_JAUNE()
{
	/* Exit action for state 'DECLENCHEMENT_ACCELERATEUR_JAUNE'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[55]));
}

/* Exit action for state 'Copy_1_FACE_BLEUIUM'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_FACE_BLEUIUM()
{
	/* Exit action for state 'Copy_1_FACE_BLEUIUM'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[56]));
}

/* Exit action for state 'DECLENCHEMENT_ACCELERATEUR_VIOLET'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECLENCHEMENT_ACCELERATEUR_VIOLET()
{
	/* Exit action for state 'DECLENCHEMENT_ACCELERATEUR_VIOLET'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[57]));
}

/* Exit action for state 'ROTATION_VERS_GOLDENIUM_VIOLET'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ROTATION_VERS_GOLDENIUM_VIOLET()
{
	/* Exit action for state 'ROTATION_VERS_GOLDENIUM_VIOLET'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[58]));
}

/* Exit action for state 'FIN_POUSSETTE_JAUNE'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN_POUSSETTE_JAUNE()
{
	/* Exit action for state 'FIN_POUSSETTE_JAUNE'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[59]));
}

/* Exit action for state 'RAPPROCHEMENT_DEVANT_BALANCE'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RAPPROCHEMENT_DEVANT_BALANCE()
{
	/* Exit action for state 'RAPPROCHEMENT_DEVANT_BALANCE'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[60]));
	iface.inhibeObstacle = false;
}

/* Exit action for state 'Copy_2_FACE_BLEUIUM'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_FACE_BLEUIUM()
{
	/* Exit action for state 'Copy_2_FACE_BLEUIUM'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[61]));
	iface.inhibeObstacle = false;
}

/* Exit action for state 'KMAR_LEGEREMENT_A_GAUCHE'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_LEGEREMENT_A_GAUCHE()
{
	/* Exit action for state 'KMAR_LEGEREMENT_A_GAUCHE'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[62]));
}

/* Exit action for state 'KMAR_LEGEREMENT_A_DROITE'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_LEGEREMENT_A_DROITE()
{
	/* Exit action for state 'KMAR_LEGEREMENT_A_DROITE'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[63]));
}

/* Exit action for state 'FIN_POUSSETTE_VIOLET'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN_POUSSETTE_VIOLET()
{
	/* Exit action for state 'FIN_POUSSETTE_VIOLET'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[64]));
}

/* Exit action for state 'Copy_3_FACE_BLEUIUM'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_FACE_BLEUIUM()
{
	/* Exit action for state 'Copy_3_FACE_BLEUIUM'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[65]));
	iface.inhibeObstacle = false;
}

/* Exit action for state 'ATTENTE'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ATTENTE()
{
	/* Exit action for state 'ATTENTE'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[66]));
}

/* Exit action for state 'Copy_1_DECLENCHEMENT_ACCELERATEUR_JAUNE'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DECLENCHEMENT_ACCELERATEUR_JAUNE()
{
	/* Exit action for state 'Copy_1_DECLENCHEMENT_ACCELERATEUR_JAUNE'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[67]));
}

/* Exit action for state 'Copy_1_DECLENCHEMENT_ACCELERATEUR_VIOLET'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DECLENCHEMENT_ACCELERATEUR_VIOLET()
{
	/* Exit action for state 'Copy_1_DECLENCHEMENT_ACCELERATEUR_VIOLET'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[68]));
}

/* Exit action for state 'Copy_2_DECLENCHEMENT_ACCELERATEUR_JAUNE'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_DECLENCHEMENT_ACCELERATEUR_JAUNE()
{
	/* Exit action for state 'Copy_2_DECLENCHEMENT_ACCELERATEUR_JAUNE'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[69]));
}

/* Exit action for state 'Copy_3_DECLENCHEMENT_ACCELERATEUR_JAUNE'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_DECLENCHEMENT_ACCELERATEUR_JAUNE()
{
	/* Exit action for state 'Copy_3_DECLENCHEMENT_ACCELERATEUR_JAUNE'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[70]));
}

/* Exit action for state 'Copy_2_DECLENCHEMENT_ACCELERATEUR_VIOLET'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_DECLENCHEMENT_ACCELERATEUR_VIOLET()
{
	/* Exit action for state 'Copy_2_DECLENCHEMENT_ACCELERATEUR_VIOLET'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[71]));
}

/* Exit action for state 'Copy_3_DECLENCHEMENT_ACCELERATEUR_VIOLET'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_DECLENCHEMENT_ACCELERATEUR_VIOLET()
{
	/* Exit action for state 'Copy_3_DECLENCHEMENT_ACCELERATEUR_VIOLET'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[72]));
}

/* Exit action for state 'HOMOLO1'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_HOMOLO1()
{
	/* Exit action for state 'HOMOLO1'. */
	ifaceInternalSCI.sequence0 = false;
}

/* Exit action for state 'HOMOLO2'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_HOMOLO2()
{
	/* Exit action for state 'HOMOLO2'. */
	ifaceInternalSCI.sequence0 = false;
}

/* Exit action for state 'STRATEGIE1'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_STRATEGIE1()
{
	/* Exit action for state 'STRATEGIE1'. */
	ifaceInternalSCI.sequence0 = false;
}

/* Exit action for state 'STRATEGIE_PAR_DEFAUT'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_STRATEGIE_PAR_DEFAUT()
{
	/* Exit action for state 'STRATEGIE_PAR_DEFAUT'. */
	ifaceInternalSCI.sequence0 = false;
}

/* Exit action for state 'PLACEMENT_DEVANT_DISTRIBUTEUR'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PLACEMENT_DEVANT_DISTRIBUTEUR()
{
	/* Exit action for state 'PLACEMENT_DEVANT_DISTRIBUTEUR'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[73]));
}

/* Exit action for state 'DEVENTOUSAGE_ATOMES'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_DEVENTOUSAGE_ATOMES()
{
	/* Exit action for state 'DEVENTOUSAGE_ATOMES'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[74]));
}

/* Exit action for state 'FIN_SEQUENCE'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_FIN_SEQUENCE()
{
	/* Exit action for state 'FIN_SEQUENCE'. */
	ifaceInternalSCI.sequence3 = false;
}

/* Exit action for state 'INIT_POSITIONS_PLATEAUX_BAS'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_PLATEAUX_BAS()
{
	/* Exit action for state 'INIT_POSITIONS_PLATEAUX_BAS'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[75]));
}

/* Exit action for state 'INIT_POSITIONS_BRAS_HAUT'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_BRAS_HAUT()
{
	/* Exit action for state 'INIT_POSITIONS_BRAS_HAUT'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[76]));
}

/* Exit action for state 'INIT_POSITIONS_VENTOUSES_HAUT_01'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_VENTOUSES_HAUT_01()
{
	/* Exit action for state 'INIT_POSITIONS_VENTOUSES_HAUT_01'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[77]));
}

/* Exit action for state 'INIT_POSITIONS_VENTOUSES_HAUT_02'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_VENTOUSES_HAUT_02()
{
	/* Exit action for state 'INIT_POSITIONS_VENTOUSES_HAUT_02'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[78]));
}

/* Exit action for state 'MISE_EN_ROUTE_POMPES'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MISE_EN_ROUTE_POMPES()
{
	/* Exit action for state 'MISE_EN_ROUTE_POMPES'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[79]));
}

/* Exit action for state 'ABAISSEMENT_BRAS'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_ABAISSEMENT_BRAS()
{
	/* Exit action for state 'ABAISSEMENT_BRAS'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[80]));
}

/* Exit action for state 'VENTOUSAGE'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VENTOUSAGE()
{
	/* Exit action for state 'VENTOUSAGE'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[81]));
	Application.m_asservissement.CommandeManuelle(0, 0);
}

/* Exit action for state 'RETIRER_ATOMES'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_RETIRER_ATOMES()
{
	/* Exit action for state 'RETIRER_ATOMES'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[82]));
}

/* Exit action for state 'VITESSE_VENTOUSE_01'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VITESSE_VENTOUSE_01()
{
	/* Exit action for state 'VITESSE_VENTOUSE_01'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[83]));
}

/* Exit action for state 'VITESSE_VENTOUSE_02'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VITESSE_VENTOUSE_02()
{
	/* Exit action for state 'VITESSE_VENTOUSE_02'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[84]));
}

/* Exit action for state 'PIVOTEMENT_ATOME_01'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PIVOTEMENT_ATOME_01()
{
	/* Exit action for state 'PIVOTEMENT_ATOME_01'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[85]));
}

/* Exit action for state 'PIVOTEMENT_ATOME_02'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PIVOTEMENT_ATOME_02()
{
	/* Exit action for state 'PIVOTEMENT_ATOME_02'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[86]));
}

/* Exit action for state 'POSITIONS_PLATEAUX_MILIEU'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_MILIEU()
{
	/* Exit action for state 'POSITIONS_PLATEAUX_MILIEU'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[87]));
}

/* Exit action for state 'POSITIONS_BRAS_HAUT_01'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_BRAS_HAUT_01()
{
	/* Exit action for state 'POSITIONS_BRAS_HAUT_01'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[88]));
}

/* Exit action for state 'POSITIONS_BRAS_HAUT_02'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_BRAS_HAUT_02()
{
	/* Exit action for state 'POSITIONS_BRAS_HAUT_02'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[89]));
}

/* Exit action for state 'SECU_ELETROVANNES'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_SECU_ELETROVANNES()
{
	/* Exit action for state 'SECU_ELETROVANNES'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[90]));
}

/* Exit action for state 'POSITIONS_PLATEAUX_BAS'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_BAS()
{
	/* Exit action for state 'POSITIONS_PLATEAUX_BAS'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[91]));
}

/* Exit action for state 'DEGAGEMENT_BRAS'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_DEGAGEMENT_BRAS()
{
	/* Exit action for state 'DEGAGEMENT_BRAS'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[92]));
}

/* Exit action for state 'POSITIONS_PLATEAUX_HAUT'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_HAUT()
{
	/* Exit action for state 'POSITIONS_PLATEAUX_HAUT'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[93]));
}

/* Exit action for state 'STOCKAGE_HORIZONTAL_ATOMES'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_STOCKAGE_HORIZONTAL_ATOMES()
{
	/* Exit action for state 'STOCKAGE_HORIZONTAL_ATOMES'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[94]));
}

/* Exit action for state 'RANGEMENT_BRAS'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_RANGEMENT_BRAS()
{
	/* Exit action for state 'RANGEMENT_BRAS'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[95]));
}

/* Exit action for state 'MAINTIEN_KMAR_AR'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MAINTIEN_KMAR_AR()
{
	/* Exit action for state 'MAINTIEN_KMAR_AR'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[96]));
}

/* Exit action for state 'DEPLACEMENT_RAMASSAGE_ATOME'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEPLACEMENT_RAMASSAGE_ATOME()
{
	/* Exit action for state 'DEPLACEMENT_RAMASSAGE_ATOME'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[97]));
}

/* Exit action for state 'FIN_SEQUENCE'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_FIN_SEQUENCE()
{
	/* Exit action for state 'FIN_SEQUENCE'. */
	ifaceInternalSCI.sequence5 = false;
}

/* Exit action for state 'GLISSSADE'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_GLISSSADE()
{
	/* Exit action for state 'GLISSSADE'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[98]));
}

/* Exit action for state 'ACTIVATION_POMPE'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_ACTIVATION_POMPE()
{
	/* Exit action for state 'ACTIVATION_POMPE'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[99]));
}

/* Exit action for state 'DEVENTOUSAGE_ATOMES'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEVENTOUSAGE_ATOMES()
{
	/* Exit action for state 'DEVENTOUSAGE_ATOMES'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[100]));
}

/* Exit action for state 'VITESSE_VENTOUSE_01'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_VITESSE_VENTOUSE_01()
{
	/* Exit action for state 'VITESSE_VENTOUSE_01'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[101]));
}

/* Exit action for state 'VITESSE_VENTOUSE_02'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_VITESSE_VENTOUSE_02()
{
	/* Exit action for state 'VITESSE_VENTOUSE_02'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[102]));
}

/* Exit action for state 'PIVOTEMENT_ATOME_01'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_PIVOTEMENT_ATOME_01()
{
	/* Exit action for state 'PIVOTEMENT_ATOME_01'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[103]));
}

/* Exit action for state 'PIVOTEMENT_ATOME_02'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_PIVOTEMENT_ATOME_02()
{
	/* Exit action for state 'PIVOTEMENT_ATOME_02'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[104]));
}

/* Exit action for state 'POSITIONS_BRAS_HAUT_01'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_BRAS_HAUT_01()
{
	/* Exit action for state 'POSITIONS_BRAS_HAUT_01'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[105]));
}

/* Exit action for state 'POSITIONS_BRAS_HAUT_02'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_BRAS_HAUT_02()
{
	/* Exit action for state 'POSITIONS_BRAS_HAUT_02'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[106]));
}

/* Exit action for state 'SECU_ELETROVANNES'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_SECU_ELETROVANNES()
{
	/* Exit action for state 'SECU_ELETROVANNES'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[107]));
}

/* Exit action for state 'POSITIONS_PLATEAUX_BAS'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_PLATEAUX_BAS()
{
	/* Exit action for state 'POSITIONS_PLATEAUX_BAS'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[108]));
}

/* Exit action for state 'DEPASSE_ZONE_CHAOS_RAMASSE_DEPART'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEPASSE_ZONE_CHAOS_RAMASSE_DEPART()
{
	/* Exit action for state 'DEPASSE_ZONE_CHAOS_RAMASSE_DEPART'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[109]));
}

/* Exit action for state 'FIN_SEQUENCE'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_FIN_SEQUENCE()
{
	/* Exit action for state 'FIN_SEQUENCE'. */
	ifaceInternalSCI.sequence4 = false;
}

/* Exit action for state 'DEPLACEMENT_RAMASSAGE_ATOME'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEPLACEMENT_RAMASSAGE_ATOME()
{
	/* Exit action for state 'DEPLACEMENT_RAMASSAGE_ATOME'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[110]));
}

/* Exit action for state 'PRISE_ATOME'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PRISE_ATOME()
{
	/* Exit action for state 'PRISE_ATOME'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[111]));
}

/* Exit action for state 'DESCENTE PARECHOC'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DESCENTE_PARECHOC()
{
	/* Exit action for state 'DESCENTE PARECHOC'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[112]));
}

/* Exit action for state 'ACTIVATION_POMPE'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_ACTIVATION_POMPE()
{
	/* Exit action for state 'ACTIVATION_POMPE'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[113]));
}

/* Exit action for state 'DEVENTOUSAGE_ATOMES'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEVENTOUSAGE_ATOMES()
{
	/* Exit action for state 'DEVENTOUSAGE_ATOMES'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[114]));
}

/* Exit action for state 'VITESSE_VENTOUSE_01'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_VITESSE_VENTOUSE_01()
{
	/* Exit action for state 'VITESSE_VENTOUSE_01'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[115]));
}

/* Exit action for state 'VITESSE_VENTOUSE_02'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_VITESSE_VENTOUSE_02()
{
	/* Exit action for state 'VITESSE_VENTOUSE_02'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[116]));
}

/* Exit action for state 'PIVOTEMENT_ATOME_01'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PIVOTEMENT_ATOME_01()
{
	/* Exit action for state 'PIVOTEMENT_ATOME_01'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[117]));
}

/* Exit action for state 'PIVOTEMENT_ATOME_02'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PIVOTEMENT_ATOME_02()
{
	/* Exit action for state 'PIVOTEMENT_ATOME_02'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[118]));
}

/* Exit action for state 'POSITIONS_PLATEAUX_MILIEU'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_PLATEAUX_MILIEU()
{
	/* Exit action for state 'POSITIONS_PLATEAUX_MILIEU'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[119]));
}

/* Exit action for state 'POSITIONS_BRAS_HAUT_01'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_BRAS_HAUT_01()
{
	/* Exit action for state 'POSITIONS_BRAS_HAUT_01'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[120]));
}

/* Exit action for state 'POSITIONS_BRAS_HAUT_02'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_BRAS_HAUT_02()
{
	/* Exit action for state 'POSITIONS_BRAS_HAUT_02'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[121]));
}

/* Exit action for state 'SECU_ELETROVANNES'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_SECU_ELETROVANNES()
{
	/* Exit action for state 'SECU_ELETROVANNES'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[122]));
}

/* Exit action for state 'POSITIONS_PLATEAUX_BAS'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_PLATEAUX_BAS()
{
	/* Exit action for state 'POSITIONS_PLATEAUX_BAS'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[123]));
}

/* Exit action for state 'Copy_1_POSITIONS_PLATEAUX_MILIEU'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_1_POSITIONS_PLATEAUX_MILIEU()
{
	/* Exit action for state 'Copy_1_POSITIONS_PLATEAUX_MILIEU'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[124]));
}

/* Exit action for state 'GLISSSADE'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_GLISSSADE()
{
	/* Exit action for state 'GLISSSADE'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[125]));
}

/* Exit action for state 'Copy_1_PRISE_ATOME'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_1_PRISE_ATOME()
{
	/* Exit action for state 'Copy_1_PRISE_ATOME'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[126]));
}

/* Exit action for state 'Copy_2_PRISE_ATOME'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_2_PRISE_ATOME()
{
	/* Exit action for state 'Copy_2_PRISE_ATOME'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[127]));
}

/* Exit action for state 'SE_METTRE_EN_LIEU_SUR'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_SE_METTRE_EN_LIEU_SUR()
{
	/* Exit action for state 'SE_METTRE_EN_LIEU_SUR'. */
	ifaceInternalSCI.sequence6 = false;
}

/* Exit action for state 'MAINTIEN_KMAR_AR'. */
void IA::exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_MAINTIEN_KMAR_AR()
{
	/* Exit action for state 'MAINTIEN_KMAR_AR'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[128]));
}

/* shallow enterSequence with history in child TACHE_NETTOYAGE */
void IA::shenseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE()
{
	/* shallow enterSequence with history in child TACHE_NETTOYAGE */
	/* Handle shallow history entry of TACHE_NETTOYAGE */
	switch(historyVector[ 0 ])
	{
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_DEPASSE_ZONE_CHAOS :
		{
			/* 'default' enter sequence for state DEPASSE_ZONE_CHAOS */
			/* Entry action for state 'DEPASSE_ZONE_CHAOS'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[18]), 3 * 1000, false);
			SCI_Asser_OCB::XYTeta(114, 0, IA::DefaultSCI::PI);
			iface.evit_choix_strategie = ((int32_t) EVITEMENT_NORMAL);
			iface.evit_nombre_max_tentatives = 1;
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_DEPASSE_ZONE_CHAOS;
			stateConfVectorPosition = 0;
			historyVector[0] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_FACE_ZONE_CHAOS :
		{
			/* 'default' enter sequence for state FACE_ZONE_CHAOS */
			/* Entry action for state 'FACE_ZONE_CHAOS'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[19]), 5 * 1000, false);
			SCI_Asser_OCB::XYTeta(114, -57 * ifaceInternalSCI.invMouv, 0);
			iface.evit_nombre_max_tentatives = 2;
			Application.m_servos_sd20.CommandePosition(SERVO_PARE_CHOC, IA::DefaultSCI::PARE_CHOC_BAS);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_FACE_ZONE_CHAOS;
			stateConfVectorPosition = 0;
			historyVector[0] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_STOCKAGE_DANS_ZONE_DEPART :
		{
			/* 'default' enter sequence for state STOCKAGE_DANS_ZONE_DEPART */
			/* Entry action for state 'STOCKAGE_DANS_ZONE_DEPART'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[20]), 6 * 1000, false);
			SCI_Asser_OCB::XYTeta(30, -57 * ifaceInternalSCI.invMouv, 0);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_STOCKAGE_DANS_ZONE_DEPART;
			stateConfVectorPosition = 0;
			historyVector[0] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_FIN_SEQUENCE :
		{
			/* 'default' enter sequence for state FIN_SEQUENCE */
			/* Entry action for state 'FIN_SEQUENCE'. */
			iface.score_grosbot += 9;
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_FIN_SEQUENCE;
			stateConfVectorPosition = 0;
			historyVector[0] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_PARE_CHOC :
		{
			/* 'default' enter sequence for state PARE_CHOC */
			/* Entry action for state 'PARE_CHOC'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[21]), 500, false);
			Application.m_servos_sd20.CommandePosition(SERVO_PARE_CHOC, IA::DefaultSCI::PARE_CHOC_BAS);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_PARE_CHOC;
			stateConfVectorPosition = 0;
			historyVector[0] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_MAINTIEN_KMAR_AR :
		{
			/* 'default' enter sequence for state MAINTIEN_KMAR_AR */
			/* Entry action for state 'MAINTIEN_KMAR_AR'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[22]), 40, false);
			Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARG, IA::DefaultSCI::KMAR_G_HAUT);
			Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARD, IA::DefaultSCI::KMAR_D_HAUT);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_MAINTIEN_KMAR_AR;
			stateConfVectorPosition = 0;
			historyVector[0] = stateConfVector[0];
			break;
		}
		default: break;
	}
}

/* shallow enterSequence with history in child TACHE_GOLDENIUM */
void IA::shenseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM()
{
	/* shallow enterSequence with history in child TACHE_GOLDENIUM */
	/* Handle shallow history entry of TACHE_GOLDENIUM */
	switch(historyVector[ 1 ])
	{
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FACE_BLEUIUM :
		{
			/* 'default' enter sequence for state FACE_BLEUIUM */
			/* Entry action for state 'FACE_BLEUIUM'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[23]), 10 * 1000, false);
			Application.m_asservissement.Ind_perfo = 0.1;
			Application.m_asservissement.cde_max = 20;
			Application.m_asservissement.cde_min = -20;
			SCI_Asser_OCB::XYTeta(142, -10 * ifaceInternalSCI.invMouv, IA::DefaultSCI::PI);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FACE_BLEUIUM;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPA_POUSSETTE_JAUNE :
		{
			/* 'default' enter sequence for state PREPA_POUSSETTE_JAUNE */
			/* Entry action for state 'PREPA_POUSSETTE_JAUNE'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[24]), 500, false);
			Application.m_servos_ax.setPosition(SERVO_CHUCK_NORRIS, IA::DefaultSCI::CHUCK_OUVERT);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPA_POUSSETTE_JAUNE;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DEPLACEMENT_VERS_GOLDENIUM :
		{
			/* 'default' enter sequence for state DEPLACEMENT_VERS_GOLDENIUM */
			/* Entry action for state 'DEPLACEMENT_VERS_GOLDENIUM'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[25]), 6 * 1000, false);
			iface.forceObstacle = true;
			SCI_Asser_OCB::XY(209, 12 * ifaceInternalSCI.invMouv);
			iface.evit_choix_strategie = ((int32_t) EVITEMENT_NEUTRE);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DEPLACEMENT_VERS_GOLDENIUM;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_POUR_GOLDENIUM :
		{
			/* 'default' enter sequence for state PREPARATION_KMAR_POUR_GOLDENIUM */
			/* Entry action for state 'PREPARATION_KMAR_POUR_GOLDENIUM'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[26]), 200, false);
			Application.m_servos_ax.setPosition(SERVO_VENTOUSE_AV_VERT, 512);
			Application.m_power_switch.setOutput(POMPE_AV, true);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_POUR_GOLDENIUM;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_VENTOUSAGE_GOLDENIUM :
		{
			/* 'default' enter sequence for state VENTOUSAGE_GOLDENIUM */
			/* Entry action for state 'VENTOUSAGE_GOLDENIUM'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[27]), 2 * 1000, false);
			Application.m_asservissement.CommandeManuelle(15, 15);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_VENTOUSAGE_GOLDENIUM;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE :
		{
			/* 'default' enter sequence for state PREPARATION_KMAR_GAUCHE */
			/* Entry action for state 'PREPARATION_KMAR_GAUCHE'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[28]), 200, false);
			Application.m_asservissement_chariot.setConsigne(500);
			Application.m_servos_ax.setPosition(SERVO_VENTOUSE_AV_VERT, 200);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_DROITE :
		{
			/* 'default' enter sequence for state PREPARATION_KMAR_DROITE */
			/* Entry action for state 'PREPARATION_KMAR_DROITE'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[29]), 200, false);
			Application.m_asservissement_chariot.setConsigne(500);
			Application.m_servos_ax.setPosition(SERVO_VENTOUSE_AV_VERT, 850);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_DROITE;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE :
		{
			/* 'default' enter sequence for state PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE */
			/* Entry action for state 'PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[30]), 50, false);
			Application.m_servos_ax.setPosition(SERVO_VENTOUSE_AV_HORIZ, 512);
			Application.m_servos_sd20.CommandePosition(SERVO_PARE_CHOC, IA::DefaultSCI::PARE_CHOC_HAUT);
			iface.evit_choix_strategie = ((int32_t) EVITEMENT_NORMAL);
			iface.evit_nombre_max_tentatives = 2;
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPA_POUSSETTE_VIOLET :
		{
			/* 'default' enter sequence for state PREPA_POUSSETTE_VIOLET */
			/* Entry action for state 'PREPA_POUSSETTE_VIOLET'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[31]), 500, false);
			Application.m_servos_ax.setPosition(SERVO_CHUCK_NORRIS, IA::DefaultSCI::CHUCK_OUVERT);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPA_POUSSETTE_VIOLET;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_GOLDENIUM_DANS_ROBOT_GAUCHE :
		{
			/* 'default' enter sequence for state GOLDENIUM_DANS_ROBOT_GAUCHE */
			/* Entry action for state 'GOLDENIUM_DANS_ROBOT_GAUCHE'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[32]), 1 * 1000, false);
			Application.m_servos_ax.setPosition(SERVO_VENTOUSE_AV_VERT, 150);
			Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_G, 65);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_GOLDENIUM_DANS_ROBOT_GAUCHE;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLACEMENT_DEVANT_BALANCE :
		{
			/* 'default' enter sequence for state PLACEMENT_DEVANT_BALANCE */
			/* Entry action for state 'PLACEMENT_DEVANT_BALANCE'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[33]), 4 * 1000, false);
			Application.m_asservissement.CommandeMouvementXY_TETA(111, -55 * ifaceInternalSCI.invMouv, (-IA::DefaultSCI::PI / 2.0) * ifaceInternalSCI.invMouv);
			iface.inhibeObstacle = false;
			Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_G, IA::DefaultSCI::TOB_G_HAUT);
			Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_D, IA::DefaultSCI::TOB_D_HAUT);
			iface.evit_choix_strategie = ((int32_t) EVITEMENT_NORMAL);
			iface.evit_nombre_max_tentatives = 1;
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLACEMENT_DEVANT_BALANCE;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLUS_PROCHE_BALANCE :
		{
			/* 'default' enter sequence for state PLUS_PROCHE_BALANCE */
			/* Entry action for state 'PLUS_PROCHE_BALANCE'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[34]), 3 * 1000, false);
			Application.m_asservissement.Ind_perfo = 0.3;
			Application.m_asservissement.CommandeMouvementXY_TETA(111, -89 * ifaceInternalSCI.invMouv, (-IA::DefaultSCI::PI / 2.0) * ifaceInternalSCI.invMouv);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLUS_PROCHE_BALANCE;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_GOLDENIUM_EN_L_AIR :
		{
			/* 'default' enter sequence for state GOLDENIUM_EN_L_AIR */
			/* Entry action for state 'GOLDENIUM_EN_L_AIR'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[35]), 1 * 1000, false);
			Application.m_servos_ax.setPosition(SERVO_VENTOUSE_AV_HORIZ, 750);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_GOLDENIUM_EN_L_AIR;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DROPAGE_GOLDENIUM :
		{
			/* 'default' enter sequence for state DROPAGE_GOLDENIUM */
			/* Entry action for state 'DROPAGE_GOLDENIUM'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[36]), 5 * 1000, false);
			Application.m_power_switch.setOutput(EV_AV, true);
			Application.m_power_switch.setOutput(POMPE_AV, false);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DROPAGE_GOLDENIUM;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN :
		{
			/* 'default' enter sequence for state FIN */
			/* Entry action for state 'FIN'. */
			iface.score_grosbot += 24;
			Application.m_power_switch.setOutput(EV_AV, false);
			Application.m_power_switch.setOutput(EV_ARD, false);
			Application.m_power_switch.setOutput(EV_ARG, false);
			Application.m_power_switch.setOutput(POMPE_ARD, false);
			Application.m_power_switch.setOutput(POMPE_ARG, false);
			Application.m_power_switch.setOutput(POMPE_AV, false);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DROPAGE_GOLDENIUM :
		{
			/* 'default' enter sequence for state Copy_1_DROPAGE_GOLDENIUM */
			/* Entry action for state 'Copy_1_DROPAGE_GOLDENIUM'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[37]), 1 * 1000, false);
			Application.m_power_switch.setOutput(EV_AV, false);
			Application.m_servos_ax.setPosition(SERVO_VENTOUSE_AV_HORIZ, 512);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DROPAGE_GOLDENIUM;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RECULE_AVEC_PRECAUTION :
		{
			/* 'default' enter sequence for state RECULE_AVEC_PRECAUTION */
			/* Entry action for state 'RECULE_AVEC_PRECAUTION'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[38]), 2 * 1000, false);
			Application.m_asservissement.CommandeManuelle(-10, -10);
			iface.forceObstacle = true;
			iface.US_AV = false;
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RECULE_AVEC_PRECAUTION;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ARRET_MOTEURS :
		{
			/* 'default' enter sequence for state ARRET_MOTEURS */
			/* Entry action for state 'ARRET_MOTEURS'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[39]), 1 * 1000, false);
			iface.score_grosbot += 20;
			Application.m_asservissement.CommandeManuelle(0, 0);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ARRET_MOTEURS;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_MISE_GOLDENIUM_BAS :
		{
			/* 'default' enter sequence for state MISE_GOLDENIUM_BAS */
			/* Entry action for state 'MISE_GOLDENIUM_BAS'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[40]), 2 * 1000, false);
			Application.m_servos_ax.setPosition(SERVO_VENTOUSE_AV_HORIZ, 200);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_MISE_GOLDENIUM_BAS;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RALENTISSEMENT_KMAR_01 :
		{
			/* 'default' enter sequence for state RALENTISSEMENT_KMAR_01 */
			/* Entry action for state 'RALENTISSEMENT_KMAR_01'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[41]), 200, false);
			Application.m_servos_ax.setSpeed(SERVO_VENTOUSE_AV_VERT, 200);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RALENTISSEMENT_KMAR_01;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RALENTISSEMENT_KMAR_02 :
		{
			/* 'default' enter sequence for state RALENTISSEMENT_KMAR_02 */
			/* Entry action for state 'RALENTISSEMENT_KMAR_02'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[42]), 1 * 1000, false);
			Application.m_servos_ax.setSpeed(SERVO_VENTOUSE_AV_HORIZ, 200);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RALENTISSEMENT_KMAR_02;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_POSE_GOLDENIUM :
		{
			/* 'default' enter sequence for state POSE_GOLDENIUM */
			/* Entry action for state 'POSE_GOLDENIUM'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[43]), 2 * 1000, false);
			Application.m_asservissement_chariot.setConsigne(200);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_POSE_GOLDENIUM;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_01 :
		{
			/* 'default' enter sequence for state DECOLLAGE_GOLDENIUM_01 */
			/* Entry action for state 'DECOLLAGE_GOLDENIUM_01'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[44]), 200, false);
			Application.m_power_switch.setOutput(POMPE_AV, false);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_01;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_02 :
		{
			/* 'default' enter sequence for state DECOLLAGE_GOLDENIUM_02 */
			/* Entry action for state 'DECOLLAGE_GOLDENIUM_02'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[45]), 500, false);
			Application.m_power_switch.setOutput(EV_AV, true);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_02;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_SECURE :
		{
			/* 'default' enter sequence for state KMAR_SECURE */
			/* Entry action for state 'KMAR_SECURE'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[46]), 2 * 1000, false);
			Application.m_asservissement_chariot.setConsigne(400);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_SECURE;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_03 :
		{
			/* 'default' enter sequence for state DECOLLAGE_GOLDENIUM_03 */
			/* Entry action for state 'DECOLLAGE_GOLDENIUM_03'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[47]), 200, false);
			Application.m_power_switch.setOutput(EV_AV, false);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_03;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_GOLDENIUM_DANS_ROBOT_GAUCHE :
		{
			/* 'default' enter sequence for state Copy_1_GOLDENIUM_DANS_ROBOT_GAUCHE */
			/* Entry action for state 'Copy_1_GOLDENIUM_DANS_ROBOT_GAUCHE'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[48]), 100, false);
			Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_G, 65);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_GOLDENIUM_DANS_ROBOT_GAUCHE;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DESCEND_KMAR :
		{
			/* 'default' enter sequence for state DESCEND_KMAR */
			/* Entry action for state 'DESCEND_KMAR'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[49]), 1500, false);
			Application.m_power_switch.setOutput(POMPE_AV, true);
			Application.m_asservissement_chariot.setConsigne(100);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DESCEND_KMAR;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_MONTE :
		{
			/* 'default' enter sequence for state KMAR_MONTE */
			/* Entry action for state 'KMAR_MONTE'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[50]), 1 * 1000, false);
			Application.m_asservissement_chariot.setConsigne(500);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_MONTE;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_BIEN_DROIT :
		{
			/* 'default' enter sequence for state KMAR_BIEN_DROIT */
			/* Entry action for state 'KMAR_BIEN_DROIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[51]), 1500, false);
			Application.m_servos_ax.setPosition(SERVO_VENTOUSE_AV_VERT, 512);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_BIEN_DROIT;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ROTATION_VERS_GOLDENIUM :
		{
			/* 'default' enter sequence for state ROTATION_VERS_GOLDENIUM */
			/* Entry action for state 'ROTATION_VERS_GOLDENIUM'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[52]), 2 * 1000, false);
			iface.score_grosbot += 20;
			SCI_Asser_OCB::DistanceAngle(0, 0);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ROTATION_VERS_GOLDENIUM;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLACEMENT_FACE_GOLDENIUM :
		{
			/* 'default' enter sequence for state PLACEMENT_FACE_GOLDENIUM */
			/* Entry action for state 'PLACEMENT_FACE_GOLDENIUM'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[53]), 2 * 1000, false);
			SCI_Asser_OCB::XYTeta(209, 12 * ifaceInternalSCI.invMouv, (IA::DefaultSCI::PI / 2.0) * ifaceInternalSCI.invMouv);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLACEMENT_FACE_GOLDENIUM;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_ACCOSTAGE_BALANCE :
		{
			/* 'default' enter sequence for state Copy_1_ACCOSTAGE_BALANCE */
			/* Entry action for state 'Copy_1_ACCOSTAGE_BALANCE'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[54]), 2 * 1000, false);
			Application.m_asservissement.CommandeManuelle(15, 15);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_ACCOSTAGE_BALANCE;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECLENCHEMENT_ACCELERATEUR_JAUNE :
		{
			/* 'default' enter sequence for state DECLENCHEMENT_ACCELERATEUR_JAUNE */
			/* Entry action for state 'DECLENCHEMENT_ACCELERATEUR_JAUNE'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[55]), 2 * 1000, false);
			SCI_Asser_OCB::DistanceAngle(-19, IA::DefaultSCI::PI);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECLENCHEMENT_ACCELERATEUR_JAUNE;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_FACE_BLEUIUM :
		{
			/* 'default' enter sequence for state Copy_1_FACE_BLEUIUM */
			/* Entry action for state 'Copy_1_FACE_BLEUIUM'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[56]), 10 * 1000, false);
			Application.m_asservissement.Ind_perfo = 0.1;
			Application.m_asservissement.cde_max = 20;
			Application.m_asservissement.cde_min = -20;
			SCI_Asser_OCB::XYTeta(142, -10 * ifaceInternalSCI.invMouv, 0);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_FACE_BLEUIUM;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECLENCHEMENT_ACCELERATEUR_VIOLET :
		{
			/* 'default' enter sequence for state DECLENCHEMENT_ACCELERATEUR_VIOLET */
			/* Entry action for state 'DECLENCHEMENT_ACCELERATEUR_VIOLET'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[57]), 2 * 1000, false);
			SCI_Asser_OCB::DistanceAngle(19, 0);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECLENCHEMENT_ACCELERATEUR_VIOLET;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ROTATION_VERS_GOLDENIUM_VIOLET :
		{
			/* 'default' enter sequence for state ROTATION_VERS_GOLDENIUM_VIOLET */
			/* Entry action for state 'ROTATION_VERS_GOLDENIUM_VIOLET'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[58]), 2 * 1000, false);
			iface.score_grosbot += 20;
			iface.forceObstacle = true;
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ROTATION_VERS_GOLDENIUM_VIOLET;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN_POUSSETTE_JAUNE :
		{
			/* 'default' enter sequence for state FIN_POUSSETTE_JAUNE */
			/* Entry action for state 'FIN_POUSSETTE_JAUNE'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[59]), 500, false);
			Application.m_servos_ax.setPosition(SERVO_CHUCK_NORRIS, IA::DefaultSCI::CHUCK_FERME);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN_POUSSETTE_JAUNE;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RAPPROCHEMENT_DEVANT_BALANCE :
		{
			/* 'default' enter sequence for state RAPPROCHEMENT_DEVANT_BALANCE */
			/* Entry action for state 'RAPPROCHEMENT_DEVANT_BALANCE'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[60]), 3 * 1000, false);
			Application.m_asservissement.CommandeMouvementXY_TETA(111, -70 * ifaceInternalSCI.invMouv, (-IA::DefaultSCI::PI / 2.0) * ifaceInternalSCI.invMouv);
			iface.inhibeObstacle = true;
			iface.evit_choix_strategie = ((int32_t) EVITEMENT_NEUTRE);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RAPPROCHEMENT_DEVANT_BALANCE;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_FACE_BLEUIUM :
		{
			/* 'default' enter sequence for state Copy_2_FACE_BLEUIUM */
			/* Entry action for state 'Copy_2_FACE_BLEUIUM'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[61]), 5 * 1000, false);
			iface.inhibeObstacle = true;
			SCI_Asser_OCB::XYTeta(142, 21 * ifaceInternalSCI.invMouv, IA::DefaultSCI::PI);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_FACE_BLEUIUM;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_LEGEREMENT_A_GAUCHE :
		{
			/* 'default' enter sequence for state KMAR_LEGEREMENT_A_GAUCHE */
			/* Entry action for state 'KMAR_LEGEREMENT_A_GAUCHE'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[62]), 500, false);
			Application.m_servos_ax.setPosition(SERVO_VENTOUSE_AV_VERT, 400);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_LEGEREMENT_A_GAUCHE;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_LEGEREMENT_A_DROITE :
		{
			/* 'default' enter sequence for state KMAR_LEGEREMENT_A_DROITE */
			/* Entry action for state 'KMAR_LEGEREMENT_A_DROITE'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[63]), 500, false);
			Application.m_servos_ax.setPosition(SERVO_VENTOUSE_AV_VERT, 624);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_LEGEREMENT_A_DROITE;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN_POUSSETTE_VIOLET :
		{
			/* 'default' enter sequence for state FIN_POUSSETTE_VIOLET */
			/* Entry action for state 'FIN_POUSSETTE_VIOLET'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[64]), 500, false);
			Application.m_servos_ax.setPosition(SERVO_CHUCK_NORRIS, IA::DefaultSCI::CHUCK_FERME);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN_POUSSETTE_VIOLET;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_FACE_BLEUIUM :
		{
			/* 'default' enter sequence for state Copy_3_FACE_BLEUIUM */
			/* Entry action for state 'Copy_3_FACE_BLEUIUM'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[65]), 5 * 1000, false);
			iface.inhibeObstacle = true;
			SCI_Asser_OCB::XYTeta(142, 21 * ifaceInternalSCI.invMouv, 0);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_FACE_BLEUIUM;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ATTENTE :
		{
			/* 'default' enter sequence for state ATTENTE */
			/* Entry action for state 'ATTENTE'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[66]), 500, false);
			iface.inhibeObstacle = true;
			iface.forceObstacle = false;
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ATTENTE;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DECLENCHEMENT_ACCELERATEUR_JAUNE :
		{
			/* 'default' enter sequence for state Copy_1_DECLENCHEMENT_ACCELERATEUR_JAUNE */
			/* Entry action for state 'Copy_1_DECLENCHEMENT_ACCELERATEUR_JAUNE'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[67]), 2 * 1000, false);
			SCI_Asser_OCB::DistanceAngle(15, IA::DefaultSCI::PI);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DECLENCHEMENT_ACCELERATEUR_JAUNE;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DECLENCHEMENT_ACCELERATEUR_VIOLET :
		{
			/* 'default' enter sequence for state Copy_1_DECLENCHEMENT_ACCELERATEUR_VIOLET */
			/* Entry action for state 'Copy_1_DECLENCHEMENT_ACCELERATEUR_VIOLET'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[68]), 2 * 1000, false);
			SCI_Asser_OCB::DistanceAngle(-14, 0);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DECLENCHEMENT_ACCELERATEUR_VIOLET;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_DECLENCHEMENT_ACCELERATEUR_JAUNE :
		{
			/* 'default' enter sequence for state Copy_2_DECLENCHEMENT_ACCELERATEUR_JAUNE */
			/* Entry action for state 'Copy_2_DECLENCHEMENT_ACCELERATEUR_JAUNE'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[69]), 2 * 1000, false);
			SCI_Asser_OCB::DistanceAngle(15, IA::DefaultSCI::PI);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_DECLENCHEMENT_ACCELERATEUR_JAUNE;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_DECLENCHEMENT_ACCELERATEUR_JAUNE :
		{
			/* 'default' enter sequence for state Copy_3_DECLENCHEMENT_ACCELERATEUR_JAUNE */
			/* Entry action for state 'Copy_3_DECLENCHEMENT_ACCELERATEUR_JAUNE'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[70]), 2 * 1000, false);
			SCI_Asser_OCB::DistanceAngle(-19, IA::DefaultSCI::PI);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_DECLENCHEMENT_ACCELERATEUR_JAUNE;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_DECLENCHEMENT_ACCELERATEUR_VIOLET :
		{
			/* 'default' enter sequence for state Copy_2_DECLENCHEMENT_ACCELERATEUR_VIOLET */
			/* Entry action for state 'Copy_2_DECLENCHEMENT_ACCELERATEUR_VIOLET'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[71]), 2 * 1000, false);
			SCI_Asser_OCB::DistanceAngle(19, 0);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_DECLENCHEMENT_ACCELERATEUR_VIOLET;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_DECLENCHEMENT_ACCELERATEUR_VIOLET :
		{
			/* 'default' enter sequence for state Copy_3_DECLENCHEMENT_ACCELERATEUR_VIOLET */
			/* Entry action for state 'Copy_3_DECLENCHEMENT_ACCELERATEUR_VIOLET'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[72]), 2 * 1000, false);
			SCI_Asser_OCB::DistanceAngle(-14, 0);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_DECLENCHEMENT_ACCELERATEUR_VIOLET;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
			break;
		}
		default: break;
	}
}

/* shallow enterSequence with history in child TACHE_DISTRIBUTEUR */
void IA::shenseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR()
{
	/* shallow enterSequence with history in child TACHE_DISTRIBUTEUR */
	/* Handle shallow history entry of TACHE_DISTRIBUTEUR */
	switch(historyVector[ 2 ])
	{
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PLACEMENT_DEVANT_DISTRIBUTEUR :
		{
			/* 'default' enter sequence for state PLACEMENT_DEVANT_DISTRIBUTEUR */
			/* Entry action for state 'PLACEMENT_DEVANT_DISTRIBUTEUR'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[73]), 4 * 1000, false);
			SCI_Asser_OCB::XYTeta(92, -77 * ifaceInternalSCI.invMouv, IA::DefaultSCI::PI / 2 * ifaceInternalSCI.invMouv);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PLACEMENT_DEVANT_DISTRIBUTEUR;
			stateConfVectorPosition = 0;
			historyVector[2] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_DEVENTOUSAGE_ATOMES :
		{
			/* 'default' enter sequence for state DEVENTOUSAGE_ATOMES */
			/* Entry action for state 'DEVENTOUSAGE_ATOMES'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[74]), 1 * 1000, false);
			Application.m_power_switch.setOutput(POMPE_ARD, false);
			Application.m_power_switch.setOutput(EV_ARD, true);
			Application.m_power_switch.setOutput(POMPE_ARG, false);
			Application.m_power_switch.setOutput(EV_ARG, true);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_DEVENTOUSAGE_ATOMES;
			stateConfVectorPosition = 0;
			historyVector[2] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_FIN_SEQUENCE :
		{
			/* 'default' enter sequence for state FIN_SEQUENCE */
			/* Entry action for state 'FIN_SEQUENCE'. */
			iface.score_grosbot += 0;
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_FIN_SEQUENCE;
			stateConfVectorPosition = 0;
			historyVector[2] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_PLATEAUX_BAS :
		{
			/* 'default' enter sequence for state INIT_POSITIONS_PLATEAUX_BAS */
			/* Entry action for state 'INIT_POSITIONS_PLATEAUX_BAS'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[75]), 40, false);
			Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_G, IA::DefaultSCI::TOB_G_BAS);
			Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_D, IA::DefaultSCI::TOB_D_BAS);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_PLATEAUX_BAS;
			stateConfVectorPosition = 0;
			historyVector[2] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_BRAS_HAUT :
		{
			/* 'default' enter sequence for state INIT_POSITIONS_BRAS_HAUT */
			/* Entry action for state 'INIT_POSITIONS_BRAS_HAUT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[76]), 40, false);
			Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARG, IA::DefaultSCI::KMAR_G_HAUT);
			Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARD, IA::DefaultSCI::KMAR_D_HAUT);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_BRAS_HAUT;
			stateConfVectorPosition = 0;
			historyVector[2] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_VENTOUSES_HAUT_01 :
		{
			/* 'default' enter sequence for state INIT_POSITIONS_VENTOUSES_HAUT_01 */
			/* Entry action for state 'INIT_POSITIONS_VENTOUSES_HAUT_01'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[77]), 40, false);
			Application.m_servos_ax.setPosition(SERVO_VENTOUSE_ARG_VERT, IA::DefaultSCI::TOUSE_G_HAUT);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_VENTOUSES_HAUT_01;
			stateConfVectorPosition = 0;
			historyVector[2] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_VENTOUSES_HAUT_02 :
		{
			/* 'default' enter sequence for state INIT_POSITIONS_VENTOUSES_HAUT_02 */
			/* Entry action for state 'INIT_POSITIONS_VENTOUSES_HAUT_02'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[78]), 100, false);
			Application.m_servos_ax.setPosition(SERVO_VENTOUSE_ARD_VERT, IA::DefaultSCI::TOUSE_D_HAUT);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_VENTOUSES_HAUT_02;
			stateConfVectorPosition = 0;
			historyVector[2] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MISE_EN_ROUTE_POMPES :
		{
			/* 'default' enter sequence for state MISE_EN_ROUTE_POMPES */
			/* Entry action for state 'MISE_EN_ROUTE_POMPES'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[79]), 1 * 1000, false);
			Application.m_power_switch.setOutput(POMPE_ARD, true);
			Application.m_power_switch.setOutput(POMPE_ARG, true);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MISE_EN_ROUTE_POMPES;
			stateConfVectorPosition = 0;
			historyVector[2] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_ABAISSEMENT_BRAS :
		{
			/* 'default' enter sequence for state ABAISSEMENT_BRAS */
			/* Entry action for state 'ABAISSEMENT_BRAS'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[80]), 500, false);
			Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARG, IA::DefaultSCI::KMAR_G_MILIEU);
			Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARD, IA::DefaultSCI::KMAR_D_MILIEU);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_ABAISSEMENT_BRAS;
			stateConfVectorPosition = 0;
			historyVector[2] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VENTOUSAGE :
		{
			/* 'default' enter sequence for state VENTOUSAGE */
			/* Entry action for state 'VENTOUSAGE'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[81]), 1500, false);
			Application.m_asservissement.CommandeManuelle(-15, -15);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VENTOUSAGE;
			stateConfVectorPosition = 0;
			historyVector[2] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_RETIRER_ATOMES :
		{
			/* 'default' enter sequence for state RETIRER_ATOMES */
			/* Entry action for state 'RETIRER_ATOMES'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[82]), 2 * 1000, false);
			Application.m_asservissement.CommandeMouvementDistanceAngle(6, ifaceInternalSCI.invMouv * IA::DefaultSCI::PI / 2);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_RETIRER_ATOMES;
			stateConfVectorPosition = 0;
			historyVector[2] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VITESSE_VENTOUSE_01 :
		{
			/* 'default' enter sequence for state VITESSE_VENTOUSE_01 */
			/* Entry action for state 'VITESSE_VENTOUSE_01'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[83]), 40, false);
			Application.m_servos_ax.setSpeed(SERVO_VENTOUSE_ARG_VERT, 200);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VITESSE_VENTOUSE_01;
			stateConfVectorPosition = 0;
			historyVector[2] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VITESSE_VENTOUSE_02 :
		{
			/* 'default' enter sequence for state VITESSE_VENTOUSE_02 */
			/* Entry action for state 'VITESSE_VENTOUSE_02'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[84]), 40, false);
			Application.m_servos_ax.setSpeed(SERVO_VENTOUSE_ARD_VERT, 200);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VITESSE_VENTOUSE_02;
			stateConfVectorPosition = 0;
			historyVector[2] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PIVOTEMENT_ATOME_01 :
		{
			/* 'default' enter sequence for state PIVOTEMENT_ATOME_01 */
			/* Entry action for state 'PIVOTEMENT_ATOME_01'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[85]), 2 * 1000, false);
			Application.m_servos_ax.setPosition(SERVO_VENTOUSE_ARG_VERT, IA::DefaultSCI::TOUSE_G_BAS);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PIVOTEMENT_ATOME_01;
			stateConfVectorPosition = 0;
			historyVector[2] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PIVOTEMENT_ATOME_02 :
		{
			/* 'default' enter sequence for state PIVOTEMENT_ATOME_02 */
			/* Entry action for state 'PIVOTEMENT_ATOME_02'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[86]), 2 * 1000, false);
			Application.m_servos_ax.setPosition(SERVO_VENTOUSE_ARD_VERT, IA::DefaultSCI::TOUSE_D_BAS);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PIVOTEMENT_ATOME_02;
			stateConfVectorPosition = 0;
			historyVector[2] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_MILIEU :
		{
			/* 'default' enter sequence for state POSITIONS_PLATEAUX_MILIEU */
			/* Entry action for state 'POSITIONS_PLATEAUX_MILIEU'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[87]), 500, false);
			Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_G, IA::DefaultSCI::TOB_G_MILIEU);
			Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_D, IA::DefaultSCI::TOB_D_MILIEU);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_MILIEU;
			stateConfVectorPosition = 0;
			historyVector[2] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_BRAS_HAUT_01 :
		{
			/* 'default' enter sequence for state POSITIONS_BRAS_HAUT_01 */
			/* Entry action for state 'POSITIONS_BRAS_HAUT_01'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[88]), 1500, false);
			Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARG, IA::DefaultSCI::KMAR_G_HAUT);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_BRAS_HAUT_01;
			stateConfVectorPosition = 0;
			historyVector[2] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_BRAS_HAUT_02 :
		{
			/* 'default' enter sequence for state POSITIONS_BRAS_HAUT_02 */
			/* Entry action for state 'POSITIONS_BRAS_HAUT_02'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[89]), 1500, false);
			Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARD, IA::DefaultSCI::KMAR_D_HAUT);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_BRAS_HAUT_02;
			stateConfVectorPosition = 0;
			historyVector[2] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_SECU_ELETROVANNES :
		{
			/* 'default' enter sequence for state SECU_ELETROVANNES */
			/* Entry action for state 'SECU_ELETROVANNES'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[90]), 40, false);
			Application.m_power_switch.setOutput(EV_ARD, false);
			Application.m_power_switch.setOutput(EV_ARG, false);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_SECU_ELETROVANNES;
			stateConfVectorPosition = 0;
			historyVector[2] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_BAS :
		{
			/* 'default' enter sequence for state POSITIONS_PLATEAUX_BAS */
			/* Entry action for state 'POSITIONS_PLATEAUX_BAS'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[91]), 500, false);
			Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_G, IA::DefaultSCI::TOB_G_BAS);
			Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_D, IA::DefaultSCI::TOB_D_BAS);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_BAS;
			stateConfVectorPosition = 0;
			historyVector[2] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_DEGAGEMENT_BRAS :
		{
			/* 'default' enter sequence for state DEGAGEMENT_BRAS */
			/* Entry action for state 'DEGAGEMENT_BRAS'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[92]), 500, false);
			Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARG, IA::DefaultSCI::KMAR_G_MILIEU);
			Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARD, IA::DefaultSCI::KMAR_D_MILIEU);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_DEGAGEMENT_BRAS;
			stateConfVectorPosition = 0;
			historyVector[2] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_HAUT :
		{
			/* 'default' enter sequence for state POSITIONS_PLATEAUX_HAUT */
			/* Entry action for state 'POSITIONS_PLATEAUX_HAUT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[93]), 1 * 1000, false);
			Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_G, IA::DefaultSCI::TOB_G_HAUT);
			Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_D, IA::DefaultSCI::TOB_D_HAUT);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_HAUT;
			stateConfVectorPosition = 0;
			historyVector[2] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_STOCKAGE_HORIZONTAL_ATOMES :
		{
			/* 'default' enter sequence for state STOCKAGE_HORIZONTAL_ATOMES */
			/* Entry action for state 'STOCKAGE_HORIZONTAL_ATOMES'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[94]), 500, false);
			Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_G, IA::DefaultSCI::TOB_G_BAS);
			Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_D, IA::DefaultSCI::TOB_D_BAS);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_STOCKAGE_HORIZONTAL_ATOMES;
			stateConfVectorPosition = 0;
			historyVector[2] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_RANGEMENT_BRAS :
		{
			/* 'default' enter sequence for state RANGEMENT_BRAS */
			/* Entry action for state 'RANGEMENT_BRAS'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[95]), 500, false);
			Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARG, IA::DefaultSCI::KMAR_G_HAUT);
			Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARD, IA::DefaultSCI::KMAR_D_HAUT);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_RANGEMENT_BRAS;
			stateConfVectorPosition = 0;
			historyVector[2] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MAINTIEN_KMAR_AR :
		{
			/* 'default' enter sequence for state MAINTIEN_KMAR_AR */
			/* Entry action for state 'MAINTIEN_KMAR_AR'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[96]), 40, false);
			Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARG, IA::DefaultSCI::KMAR_G_HAUT);
			Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARD, IA::DefaultSCI::KMAR_D_HAUT);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MAINTIEN_KMAR_AR;
			stateConfVectorPosition = 0;
			historyVector[2] = stateConfVector[0];
			break;
		}
		default: break;
	}
}

/* shallow enterSequence with history in child TACHE_RAMASSAGE_ZONE_CHAOS */
void IA::shenseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS()
{
	/* shallow enterSequence with history in child TACHE_RAMASSAGE_ZONE_CHAOS */
	/* Handle shallow history entry of TACHE_RAMASSAGE_ZONE_CHAOS */
	switch(historyVector[ 3 ])
	{
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEPLACEMENT_RAMASSAGE_ATOME :
		{
			/* 'default' enter sequence for state DEPLACEMENT_RAMASSAGE_ATOME */
			/* Entry action for state 'DEPLACEMENT_RAMASSAGE_ATOME'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[97]), 2 * 1000, false);
			SCI_Asser_OCB::XYTeta(39.5, -57 * ifaceInternalSCI.invMouv, 0);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEPLACEMENT_RAMASSAGE_ATOME;
			stateConfVectorPosition = 0;
			historyVector[3] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_FIN_SEQUENCE :
		{
			/* 'default' enter sequence for state FIN_SEQUENCE */
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_FIN_SEQUENCE;
			stateConfVectorPosition = 0;
			historyVector[3] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_GLISSSADE :
		{
			/* 'default' enter sequence for state GLISSSADE */
			/* Entry action for state 'GLISSSADE'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[98]), 2 * 1000, false);
			Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARG, 140);
			Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_G, 95);
			Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARD, 170);
			Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_D, 170);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_GLISSSADE;
			stateConfVectorPosition = 0;
			historyVector[3] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_ACTIVATION_POMPE :
		{
			/* 'default' enter sequence for state ACTIVATION_POMPE */
			/* Entry action for state 'ACTIVATION_POMPE'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[99]), 200, false);
			Application.m_power_switch.setOutput(POMPE_ARD, true);
			Application.m_power_switch.setOutput(POMPE_ARG, true);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_ACTIVATION_POMPE;
			stateConfVectorPosition = 0;
			historyVector[3] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEVENTOUSAGE_ATOMES :
		{
			/* 'default' enter sequence for state DEVENTOUSAGE_ATOMES */
			/* Entry action for state 'DEVENTOUSAGE_ATOMES'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[100]), 1 * 1000, false);
			Application.m_power_switch.setOutput(POMPE_ARD, false);
			Application.m_power_switch.setOutput(EV_ARD, true);
			Application.m_power_switch.setOutput(POMPE_ARG, false);
			Application.m_power_switch.setOutput(EV_ARG, true);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEVENTOUSAGE_ATOMES;
			stateConfVectorPosition = 0;
			historyVector[3] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_VITESSE_VENTOUSE_01 :
		{
			/* 'default' enter sequence for state VITESSE_VENTOUSE_01 */
			/* Entry action for state 'VITESSE_VENTOUSE_01'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[101]), 40, false);
			Application.m_servos_ax.setSpeed(SERVO_VENTOUSE_ARG_VERT, 200);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_VITESSE_VENTOUSE_01;
			stateConfVectorPosition = 0;
			historyVector[3] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_VITESSE_VENTOUSE_02 :
		{
			/* 'default' enter sequence for state VITESSE_VENTOUSE_02 */
			/* Entry action for state 'VITESSE_VENTOUSE_02'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[102]), 40, false);
			Application.m_servos_ax.setSpeed(SERVO_VENTOUSE_ARD_VERT, 200);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_VITESSE_VENTOUSE_02;
			stateConfVectorPosition = 0;
			historyVector[3] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_PIVOTEMENT_ATOME_01 :
		{
			/* 'default' enter sequence for state PIVOTEMENT_ATOME_01 */
			/* Entry action for state 'PIVOTEMENT_ATOME_01'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[103]), 2 * 1000, false);
			Application.m_servos_ax.setPosition(SERVO_VENTOUSE_ARG_VERT, IA::DefaultSCI::TOUSE_G_BAS);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_PIVOTEMENT_ATOME_01;
			stateConfVectorPosition = 0;
			historyVector[3] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_PIVOTEMENT_ATOME_02 :
		{
			/* 'default' enter sequence for state PIVOTEMENT_ATOME_02 */
			/* Entry action for state 'PIVOTEMENT_ATOME_02'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[104]), 500, false);
			Application.m_servos_ax.setPosition(SERVO_VENTOUSE_ARD_VERT, IA::DefaultSCI::TOUSE_D_BAS);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_PIVOTEMENT_ATOME_02;
			stateConfVectorPosition = 0;
			historyVector[3] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_BRAS_HAUT_01 :
		{
			/* 'default' enter sequence for state POSITIONS_BRAS_HAUT_01 */
			/* Entry action for state 'POSITIONS_BRAS_HAUT_01'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[105]), 1500, false);
			Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARG, IA::DefaultSCI::KMAR_G_HAUT);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_BRAS_HAUT_01;
			stateConfVectorPosition = 0;
			historyVector[3] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_BRAS_HAUT_02 :
		{
			/* 'default' enter sequence for state POSITIONS_BRAS_HAUT_02 */
			/* Entry action for state 'POSITIONS_BRAS_HAUT_02'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[106]), 1500, false);
			Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARD, IA::DefaultSCI::KMAR_D_HAUT);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_BRAS_HAUT_02;
			stateConfVectorPosition = 0;
			historyVector[3] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_SECU_ELETROVANNES :
		{
			/* 'default' enter sequence for state SECU_ELETROVANNES */
			/* Entry action for state 'SECU_ELETROVANNES'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[107]), 40, false);
			Application.m_power_switch.setOutput(EV_ARD, false);
			Application.m_power_switch.setOutput(EV_ARG, false);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_SECU_ELETROVANNES;
			stateConfVectorPosition = 0;
			historyVector[3] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_PLATEAUX_BAS :
		{
			/* 'default' enter sequence for state POSITIONS_PLATEAUX_BAS */
			/* Entry action for state 'POSITIONS_PLATEAUX_BAS'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[108]), 200, false);
			Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_G, IA::DefaultSCI::TOB_G_BAS);
			Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_D, IA::DefaultSCI::TOB_D_BAS);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_PLATEAUX_BAS;
			stateConfVectorPosition = 0;
			historyVector[3] = stateConfVector[0];
			break;
		}
		default: break;
	}
}

/* shallow enterSequence with history in child TACHE_RAMASSAGE_ATOME_DEPART */
void IA::shenseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART()
{
	/* shallow enterSequence with history in child TACHE_RAMASSAGE_ATOME_DEPART */
	/* Handle shallow history entry of TACHE_RAMASSAGE_ATOME_DEPART */
	switch(historyVector[ 4 ])
	{
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEPASSE_ZONE_CHAOS_RAMASSE_DEPART :
		{
			/* 'default' enter sequence for state DEPASSE_ZONE_CHAOS_RAMASSE_DEPART */
			/* Entry action for state 'DEPASSE_ZONE_CHAOS_RAMASSE_DEPART'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[109]), 4 * 1000, false);
			SCI_Asser_OCB::XYTeta(123.5, 0, IA::DefaultSCI::PI);
			iface.evit_choix_strategie = ((int32_t) EVITEMENT_NORMAL);
			iface.evit_nombre_max_tentatives = 1;
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEPASSE_ZONE_CHAOS_RAMASSE_DEPART;
			stateConfVectorPosition = 0;
			historyVector[4] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_FIN_SEQUENCE :
		{
			/* 'default' enter sequence for state FIN_SEQUENCE */
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_FIN_SEQUENCE;
			stateConfVectorPosition = 0;
			historyVector[4] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEPLACEMENT_RAMASSAGE_ATOME :
		{
			/* 'default' enter sequence for state DEPLACEMENT_RAMASSAGE_ATOME */
			/* Entry action for state 'DEPLACEMENT_RAMASSAGE_ATOME'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[110]), 2 * 1000, false);
			SCI_Asser_OCB::XYTeta(114, 0, IA::DefaultSCI::PI);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEPLACEMENT_RAMASSAGE_ATOME;
			stateConfVectorPosition = 0;
			historyVector[4] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PRISE_ATOME :
		{
			/* 'default' enter sequence for state PRISE_ATOME */
			/* Entry action for state 'PRISE_ATOME'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[111]), 40, false);
			Application.m_servos_ax.setPosition(SERVO_VENTOUSE_ARG_VERT, IA::DefaultSCI::TOUSE_G_MILIEU);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PRISE_ATOME;
			stateConfVectorPosition = 0;
			historyVector[4] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DESCENTE_PARECHOC :
		{
			/* 'default' enter sequence for state DESCENTE PARECHOC */
			/* Entry action for state 'DESCENTE PARECHOC'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[112]), 1 * 1000, false);
			Application.m_servos_sd20.CommandePosition(SERVO_PARE_CHOC, IA::DefaultSCI::PARE_CHOC_BAS);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DESCENTE_PARECHOC;
			stateConfVectorPosition = 0;
			historyVector[4] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_ACTIVATION_POMPE :
		{
			/* 'default' enter sequence for state ACTIVATION_POMPE */
			/* Entry action for state 'ACTIVATION_POMPE'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[113]), 1 * 1000, false);
			Application.m_power_switch.setOutput(POMPE_ARD, true);
			Application.m_power_switch.setOutput(POMPE_ARG, true);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_ACTIVATION_POMPE;
			stateConfVectorPosition = 0;
			historyVector[4] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEVENTOUSAGE_ATOMES :
		{
			/* 'default' enter sequence for state DEVENTOUSAGE_ATOMES */
			/* Entry action for state 'DEVENTOUSAGE_ATOMES'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[114]), 500, false);
			Application.m_power_switch.setOutput(POMPE_ARD, false);
			Application.m_power_switch.setOutput(EV_ARD, true);
			Application.m_power_switch.setOutput(POMPE_ARG, false);
			Application.m_power_switch.setOutput(EV_ARG, true);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEVENTOUSAGE_ATOMES;
			stateConfVectorPosition = 0;
			historyVector[4] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_VITESSE_VENTOUSE_01 :
		{
			/* 'default' enter sequence for state VITESSE_VENTOUSE_01 */
			/* Entry action for state 'VITESSE_VENTOUSE_01'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[115]), 40, false);
			Application.m_servos_ax.setSpeed(SERVO_VENTOUSE_ARG_VERT, 200);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_VITESSE_VENTOUSE_01;
			stateConfVectorPosition = 0;
			historyVector[4] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_VITESSE_VENTOUSE_02 :
		{
			/* 'default' enter sequence for state VITESSE_VENTOUSE_02 */
			/* Entry action for state 'VITESSE_VENTOUSE_02'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[116]), 40, false);
			Application.m_servos_ax.setSpeed(SERVO_VENTOUSE_ARD_VERT, 200);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_VITESSE_VENTOUSE_02;
			stateConfVectorPosition = 0;
			historyVector[4] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PIVOTEMENT_ATOME_01 :
		{
			/* 'default' enter sequence for state PIVOTEMENT_ATOME_01 */
			/* Entry action for state 'PIVOTEMENT_ATOME_01'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[117]), 2 * 1000, false);
			Application.m_servos_ax.setPosition(SERVO_VENTOUSE_ARG_VERT, IA::DefaultSCI::TOUSE_G_BAS);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PIVOTEMENT_ATOME_01;
			stateConfVectorPosition = 0;
			historyVector[4] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PIVOTEMENT_ATOME_02 :
		{
			/* 'default' enter sequence for state PIVOTEMENT_ATOME_02 */
			/* Entry action for state 'PIVOTEMENT_ATOME_02'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[118]), 1 * 1000, false);
			Application.m_servos_ax.setPosition(SERVO_VENTOUSE_ARD_VERT, IA::DefaultSCI::TOUSE_D_BAS);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PIVOTEMENT_ATOME_02;
			stateConfVectorPosition = 0;
			historyVector[4] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_PLATEAUX_MILIEU :
		{
			/* 'default' enter sequence for state POSITIONS_PLATEAUX_MILIEU */
			/* Entry action for state 'POSITIONS_PLATEAUX_MILIEU'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[119]), 500, false);
			Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_G, IA::DefaultSCI::TOB_G_BAS);
			Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_D, IA::DefaultSCI::TOB_D_BAS);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_PLATEAUX_MILIEU;
			stateConfVectorPosition = 0;
			historyVector[4] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_BRAS_HAUT_01 :
		{
			/* 'default' enter sequence for state POSITIONS_BRAS_HAUT_01 */
			/* Entry action for state 'POSITIONS_BRAS_HAUT_01'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[120]), 1500, false);
			Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARG, IA::DefaultSCI::KMAR_G_HAUT);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_BRAS_HAUT_01;
			stateConfVectorPosition = 0;
			historyVector[4] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_BRAS_HAUT_02 :
		{
			/* 'default' enter sequence for state POSITIONS_BRAS_HAUT_02 */
			/* Entry action for state 'POSITIONS_BRAS_HAUT_02'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[121]), 1500, false);
			Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARD, IA::DefaultSCI::KMAR_D_HAUT);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_BRAS_HAUT_02;
			stateConfVectorPosition = 0;
			historyVector[4] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_SECU_ELETROVANNES :
		{
			/* 'default' enter sequence for state SECU_ELETROVANNES */
			/* Entry action for state 'SECU_ELETROVANNES'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[122]), 500, false);
			Application.m_power_switch.setOutput(EV_ARD, false);
			Application.m_power_switch.setOutput(EV_ARG, false);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_SECU_ELETROVANNES;
			stateConfVectorPosition = 0;
			historyVector[4] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_PLATEAUX_BAS :
		{
			/* 'default' enter sequence for state POSITIONS_PLATEAUX_BAS */
			/* Entry action for state 'POSITIONS_PLATEAUX_BAS'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[123]), 200, false);
			Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_G, IA::DefaultSCI::TOB_G_BAS);
			Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_D, IA::DefaultSCI::TOB_D_BAS);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_PLATEAUX_BAS;
			stateConfVectorPosition = 0;
			historyVector[4] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_1_POSITIONS_PLATEAUX_MILIEU :
		{
			/* 'default' enter sequence for state Copy_1_POSITIONS_PLATEAUX_MILIEU */
			/* Entry action for state 'Copy_1_POSITIONS_PLATEAUX_MILIEU'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[124]), 500, false);
			Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_G, IA::DefaultSCI::TOB_G_BAS);
			Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_D, IA::DefaultSCI::TOB_D_BAS);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_1_POSITIONS_PLATEAUX_MILIEU;
			stateConfVectorPosition = 0;
			historyVector[4] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_GLISSSADE :
		{
			/* 'default' enter sequence for state GLISSSADE */
			/* Entry action for state 'GLISSSADE'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[125]), 500, false);
			Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARG, IA::DefaultSCI::KMAR_G_HAUT);
			Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARD, IA::DefaultSCI::KMAR_D_HAUT);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_GLISSSADE;
			stateConfVectorPosition = 0;
			historyVector[4] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_1_PRISE_ATOME :
		{
			/* 'default' enter sequence for state Copy_1_PRISE_ATOME */
			/* Entry action for state 'Copy_1_PRISE_ATOME'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[126]), 1 * 1000, false);
			Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARD, IA::DefaultSCI::KMAR_D_BAS);
			Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARG, IA::DefaultSCI::KMAR_G_BAS);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_1_PRISE_ATOME;
			stateConfVectorPosition = 0;
			historyVector[4] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_2_PRISE_ATOME :
		{
			/* 'default' enter sequence for state Copy_2_PRISE_ATOME */
			/* Entry action for state 'Copy_2_PRISE_ATOME'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[127]), 500, false);
			Application.m_servos_ax.setPosition(SERVO_VENTOUSE_ARD_VERT, IA::DefaultSCI::TOUSE_D_MILIEU);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_2_PRISE_ATOME;
			stateConfVectorPosition = 0;
			historyVector[4] = stateConfVector[0];
			break;
		}
		default: break;
	}
}

/* shallow enterSequence with history in child STRATEGIE_FIN_HOMOLO */
void IA::shenseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO()
{
	/* shallow enterSequence with history in child STRATEGIE_FIN_HOMOLO */
	/* Handle shallow history entry of STRATEGIE_FIN_HOMOLO */
	switch(historyVector[ 5 ])
	{
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_SE_METTRE_EN_LIEU_SUR :
		{
			/* 'default' enter sequence for state SE_METTRE_EN_LIEU_SUR */
			/* Entry action for state 'SE_METTRE_EN_LIEU_SUR'. */
			iface.score_grosbot += 0;
			iface.inhibeObstacle = true;
			Application.m_asservissement.CommandeMouvementXY_TETA(100, 0, IA::DefaultSCI::PI);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_SE_METTRE_EN_LIEU_SUR;
			stateConfVectorPosition = 0;
			historyVector[5] = stateConfVector[0];
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_MAINTIEN_KMAR_AR :
		{
			/* 'default' enter sequence for state MAINTIEN_KMAR_AR */
			/* Entry action for state 'MAINTIEN_KMAR_AR'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[128]), 40, false);
			Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARG, IA::DefaultSCI::KMAR_G_HAUT);
			Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARD, IA::DefaultSCI::KMAR_D_HAUT);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_MAINTIEN_KMAR_AR;
			stateConfVectorPosition = 0;
			historyVector[5] = stateConfVector[0];
			break;
		}
		default: break;
	}
}

/* Default exit sequence for state ATTENTE_TIRETTE */
void IA::exseq_main_region_ATTENTE_TIRETTE()
{
	/* Default exit sequence for state ATTENTE_TIRETTE */
	exseq_main_region_ATTENTE_TIRETTE__region0();
}

/* Default exit sequence for state INIT */
void IA::exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_INIT()
{
	/* Default exit sequence for state INIT */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_INIT();
}

/* Default exit sequence for state TOBOGGANS_HAUTS */
void IA::exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_HAUTS()
{
	/* Default exit sequence for state TOBOGGANS_HAUTS */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_HAUTS();
}

/* Default exit sequence for state APPRENTISSAGE_ASCENSEUR */
void IA::exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_APPRENTISSAGE_ASCENSEUR()
{
	/* Default exit sequence for state APPRENTISSAGE_ASCENSEUR */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_APPRENTISSAGE_ASCENSEUR();
}

/* Default exit sequence for state TOBOGGANS_BAS */
void IA::exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_BAS()
{
	/* Default exit sequence for state TOBOGGANS_BAS */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_BAS();
}

/* Default exit sequence for state KMAR_RANGE_01 */
void IA::exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_RANGE_01()
{
	/* Default exit sequence for state KMAR_RANGE_01 */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_RANGE_01();
}

/* Default exit sequence for state KMAR_RANGE_02 */
void IA::exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_RANGE_02()
{
	/* Default exit sequence for state KMAR_RANGE_02 */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_RANGE_02();
}

/* Default exit sequence for state KMAR_SORTI_01 */
void IA::exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_SORTI_01()
{
	/* Default exit sequence for state KMAR_SORTI_01 */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_SORTI_01();
}

/* Default exit sequence for state KMAR_SORTI_02 */
void IA::exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_SORTI_02()
{
	/* Default exit sequence for state KMAR_SORTI_02 */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_SORTI_02();
}

/* Default exit sequence for state TOBOGGANS_HAUT */
void IA::exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_HAUT()
{
	/* Default exit sequence for state TOBOGGANS_HAUT */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state Copy_1_TOBOGGANS_BAS */
void IA::exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_Copy_1_TOBOGGANS_BAS()
{
	/* Default exit sequence for state Copy_1_TOBOGGANS_BAS */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_Copy_1_TOBOGGANS_BAS();
}

/* Default exit sequence for state CHOIX_COULEUR_VIOLET */
void IA::exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_COULEUR_CHOIX_COULEUR_VIOLET()
{
	/* Default exit sequence for state CHOIX_COULEUR_VIOLET */
	stateConfVector[1] = IA_last_state;
	stateConfVectorPosition = 1;
}

/* Default exit sequence for state CHOIX_COULEUR_JAUNE */
void IA::exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_COULEUR_CHOIX_COULEUR_JAUNE()
{
	/* Default exit sequence for state CHOIX_COULEUR_JAUNE */
	stateConfVector[1] = IA_last_state;
	stateConfVectorPosition = 1;
}

/* Default exit sequence for state CHOIX_NUM_STRATEGIE */
void IA::exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_STRATEGIE_CHOIX_NUM_STRATEGIE()
{
	/* Default exit sequence for state CHOIX_NUM_STRATEGIE */
	stateConfVector[2] = IA_last_state;
	stateConfVectorPosition = 2;
}

/* Default exit sequence for state MATCH_EN_COURS */
void IA::exseq_main_region_MATCH_EN_COURS()
{
	/* Default exit sequence for state MATCH_EN_COURS */
	exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH();
	exact_main_region_MATCH_EN_COURS();
}

/* Default exit sequence for state DETECTION_OBSTACLE */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE()
{
	/* Default exit sequence for state DETECTION_OBSTACLE */
	exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1();
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
}

/* Default exit sequence for state EVITEMENT_INIT */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT()
{
	/* Default exit sequence for state EVITEMENT_INIT */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT();
}

/* Default exit sequence for state SORTIE_EVITEMENT */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_SORTIE_EVITEMENT()
{
	/* Default exit sequence for state SORTIE_EVITEMENT */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_SORTIE_EVITEMENT();
}

/* Default exit sequence for state EVITEMENT_ATTENTE */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_ATTENTE()
{
	/* Default exit sequence for state EVITEMENT_ATTENTE */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_ATTENTE();
}

/* Default exit sequence for state STRATEGIE_EVITEMENT */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT()
{
	/* Default exit sequence for state STRATEGIE_EVITEMENT */
	exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1();
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
}

/* Default exit sequence for state EVITEMENT_ELOIGNEMENT */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ELOIGNEMENT()
{
	/* Default exit sequence for state EVITEMENT_ELOIGNEMENT */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ELOIGNEMENT();
}

/* Default exit sequence for state EVITEMENT_ROTATION */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ROTATION()
{
	/* Default exit sequence for state EVITEMENT_ROTATION */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ROTATION();
}

/* Default exit sequence for state EVITEMENT_EVACUE */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE()
{
	/* Default exit sequence for state EVITEMENT_EVACUE */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE();
}

/* Default exit sequence for state FIN_STRATEGIE_EVITEMENT */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_FIN_STRATEGIE_EVITEMENT()
{
	/* Default exit sequence for state FIN_STRATEGIE_EVITEMENT */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state DEBUT_STRATEGIE_EVITEMENT */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_DEBUT_STRATEGIE_EVITEMENT()
{
	/* Default exit sequence for state DEBUT_STRATEGIE_EVITEMENT */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state EVITEMENT_AVD */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVD()
{
	/* Default exit sequence for state EVITEMENT_AVD */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state EVITEMENT_AVG */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVG()
{
	/* Default exit sequence for state EVITEMENT_AVG */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state EVITEMENT_SYNCHRO */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_SYNCHRO()
{
	/* Default exit sequence for state EVITEMENT_SYNCHRO */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state EVITEMENT_AVD_AVG */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVD_AVG()
{
	/* Default exit sequence for state EVITEMENT_AVD_AVG */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state EVITEMENT_ARD */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARD()
{
	/* Default exit sequence for state EVITEMENT_ARD */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state EVITEMENT_ARG */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARG()
{
	/* Default exit sequence for state EVITEMENT_ARG */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state EVITEMENT_ARD_ARG */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARD_ARG()
{
	/* Default exit sequence for state EVITEMENT_ARD_ARG */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state EVITEMENT_DEFAULT */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_DEFAULT()
{
	/* Default exit sequence for state EVITEMENT_DEFAULT */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state EVITEMENT_REDRESSE */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_REDRESSE()
{
	/* Default exit sequence for state EVITEMENT_REDRESSE */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_REDRESSE();
}

/* Default exit sequence for state EVITEMENT_EVACUE_2 */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE_2()
{
	/* Default exit sequence for state EVITEMENT_EVACUE_2 */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE_2();
}

/* Default exit sequence for state EVITEMENT_RETENTATIVE */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_RETENTATIVE()
{
	/* Default exit sequence for state EVITEMENT_RETENTATIVE */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state EVITEMENT_BUG_YAKINDU_CHOICE */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_BUG_YAKINDU_CHOICE()
{
	/* Default exit sequence for state EVITEMENT_BUG_YAKINDU_CHOICE */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state SEQUENCE_01_NETTOYAGE */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE()
{
	/* Default exit sequence for state SEQUENCE_01_NETTOYAGE */
	exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE();
}

/* Default exit sequence for state DEPASSE_ZONE_CHAOS */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_DEPASSE_ZONE_CHAOS()
{
	/* Default exit sequence for state DEPASSE_ZONE_CHAOS */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_DEPASSE_ZONE_CHAOS();
}

/* Default exit sequence for state FACE_ZONE_CHAOS */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_FACE_ZONE_CHAOS()
{
	/* Default exit sequence for state FACE_ZONE_CHAOS */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_FACE_ZONE_CHAOS();
}

/* Default exit sequence for state STOCKAGE_DANS_ZONE_DEPART */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_STOCKAGE_DANS_ZONE_DEPART()
{
	/* Default exit sequence for state STOCKAGE_DANS_ZONE_DEPART */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_STOCKAGE_DANS_ZONE_DEPART();
}

/* Default exit sequence for state FIN_SEQUENCE */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_FIN_SEQUENCE()
{
	/* Default exit sequence for state FIN_SEQUENCE */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_FIN_SEQUENCE();
}

/* Default exit sequence for final state. */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE__final_()
{
	/* Default exit sequence for final state. */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state PARE_CHOC */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_PARE_CHOC()
{
	/* Default exit sequence for state PARE_CHOC */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_PARE_CHOC();
}

/* Default exit sequence for state MAINTIEN_KMAR_AR */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_MAINTIEN_KMAR_AR()
{
	/* Default exit sequence for state MAINTIEN_KMAR_AR */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_MAINTIEN_KMAR_AR();
}

/* Default exit sequence for state SEQUENCE_02_GOLDENIUM */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM()
{
	/* Default exit sequence for state SEQUENCE_02_GOLDENIUM */
	exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM();
}

/* Default exit sequence for state FACE_BLEUIUM */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FACE_BLEUIUM()
{
	/* Default exit sequence for state FACE_BLEUIUM */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FACE_BLEUIUM();
}

/* Default exit sequence for state PREPA_POUSSETTE_JAUNE */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPA_POUSSETTE_JAUNE()
{
	/* Default exit sequence for state PREPA_POUSSETTE_JAUNE */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPA_POUSSETTE_JAUNE();
}

/* Default exit sequence for state DEPLACEMENT_VERS_GOLDENIUM */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DEPLACEMENT_VERS_GOLDENIUM()
{
	/* Default exit sequence for state DEPLACEMENT_VERS_GOLDENIUM */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DEPLACEMENT_VERS_GOLDENIUM();
}

/* Default exit sequence for state PREPARATION_KMAR_POUR_GOLDENIUM */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_POUR_GOLDENIUM()
{
	/* Default exit sequence for state PREPARATION_KMAR_POUR_GOLDENIUM */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_POUR_GOLDENIUM();
}

/* Default exit sequence for state VENTOUSAGE_GOLDENIUM */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_VENTOUSAGE_GOLDENIUM()
{
	/* Default exit sequence for state VENTOUSAGE_GOLDENIUM */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_VENTOUSAGE_GOLDENIUM();
}

/* Default exit sequence for state PREPARATION_KMAR_GAUCHE */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE()
{
	/* Default exit sequence for state PREPARATION_KMAR_GAUCHE */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE();
}

/* Default exit sequence for state PREPARATION_KMAR_DROITE */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_DROITE()
{
	/* Default exit sequence for state PREPARATION_KMAR_DROITE */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_DROITE();
}

/* Default exit sequence for state PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE()
{
	/* Default exit sequence for state PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE();
}

/* Default exit sequence for state PREPA_POUSSETTE_VIOLET */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPA_POUSSETTE_VIOLET()
{
	/* Default exit sequence for state PREPA_POUSSETTE_VIOLET */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPA_POUSSETTE_VIOLET();
}

/* Default exit sequence for state GOLDENIUM_DANS_ROBOT_GAUCHE */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_GOLDENIUM_DANS_ROBOT_GAUCHE()
{
	/* Default exit sequence for state GOLDENIUM_DANS_ROBOT_GAUCHE */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_GOLDENIUM_DANS_ROBOT_GAUCHE();
}

/* Default exit sequence for state PLACEMENT_DEVANT_BALANCE */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLACEMENT_DEVANT_BALANCE()
{
	/* Default exit sequence for state PLACEMENT_DEVANT_BALANCE */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLACEMENT_DEVANT_BALANCE();
}

/* Default exit sequence for state PLUS_PROCHE_BALANCE */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLUS_PROCHE_BALANCE()
{
	/* Default exit sequence for state PLUS_PROCHE_BALANCE */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLUS_PROCHE_BALANCE();
}

/* Default exit sequence for state GOLDENIUM_EN_L_AIR */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_GOLDENIUM_EN_L_AIR()
{
	/* Default exit sequence for state GOLDENIUM_EN_L_AIR */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_GOLDENIUM_EN_L_AIR();
}

/* Default exit sequence for state DROPAGE_GOLDENIUM */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DROPAGE_GOLDENIUM()
{
	/* Default exit sequence for state DROPAGE_GOLDENIUM */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DROPAGE_GOLDENIUM();
}

/* Default exit sequence for state FIN */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN()
{
	/* Default exit sequence for state FIN */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN();
}

/* Default exit sequence for final state. */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM__final_()
{
	/* Default exit sequence for final state. */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state Copy_1_DROPAGE_GOLDENIUM */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DROPAGE_GOLDENIUM()
{
	/* Default exit sequence for state Copy_1_DROPAGE_GOLDENIUM */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DROPAGE_GOLDENIUM();
}

/* Default exit sequence for state RECULE_AVEC_PRECAUTION */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RECULE_AVEC_PRECAUTION()
{
	/* Default exit sequence for state RECULE_AVEC_PRECAUTION */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RECULE_AVEC_PRECAUTION();
}

/* Default exit sequence for state ARRET_MOTEURS */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ARRET_MOTEURS()
{
	/* Default exit sequence for state ARRET_MOTEURS */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ARRET_MOTEURS();
}

/* Default exit sequence for state MISE_GOLDENIUM_BAS */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_MISE_GOLDENIUM_BAS()
{
	/* Default exit sequence for state MISE_GOLDENIUM_BAS */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_MISE_GOLDENIUM_BAS();
}

/* Default exit sequence for state RALENTISSEMENT_KMAR_01 */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RALENTISSEMENT_KMAR_01()
{
	/* Default exit sequence for state RALENTISSEMENT_KMAR_01 */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RALENTISSEMENT_KMAR_01();
}

/* Default exit sequence for state RALENTISSEMENT_KMAR_02 */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RALENTISSEMENT_KMAR_02()
{
	/* Default exit sequence for state RALENTISSEMENT_KMAR_02 */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RALENTISSEMENT_KMAR_02();
}

/* Default exit sequence for state POSE_GOLDENIUM */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_POSE_GOLDENIUM()
{
	/* Default exit sequence for state POSE_GOLDENIUM */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_POSE_GOLDENIUM();
}

/* Default exit sequence for state DECOLLAGE_GOLDENIUM_01 */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_01()
{
	/* Default exit sequence for state DECOLLAGE_GOLDENIUM_01 */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_01();
}

/* Default exit sequence for state DECOLLAGE_GOLDENIUM_02 */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_02()
{
	/* Default exit sequence for state DECOLLAGE_GOLDENIUM_02 */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_02();
}

/* Default exit sequence for state KMAR_SECURE */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_SECURE()
{
	/* Default exit sequence for state KMAR_SECURE */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_SECURE();
}

/* Default exit sequence for state DECOLLAGE_GOLDENIUM_03 */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_03()
{
	/* Default exit sequence for state DECOLLAGE_GOLDENIUM_03 */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_03();
}

/* Default exit sequence for state Copy_1_GOLDENIUM_DANS_ROBOT_GAUCHE */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_GOLDENIUM_DANS_ROBOT_GAUCHE()
{
	/* Default exit sequence for state Copy_1_GOLDENIUM_DANS_ROBOT_GAUCHE */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_GOLDENIUM_DANS_ROBOT_GAUCHE();
}

/* Default exit sequence for state DESCEND_KMAR */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DESCEND_KMAR()
{
	/* Default exit sequence for state DESCEND_KMAR */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DESCEND_KMAR();
}

/* Default exit sequence for state KMAR_MONTE */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_MONTE()
{
	/* Default exit sequence for state KMAR_MONTE */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_MONTE();
}

/* Default exit sequence for state KMAR_BIEN_DROIT */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_BIEN_DROIT()
{
	/* Default exit sequence for state KMAR_BIEN_DROIT */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_BIEN_DROIT();
}

/* Default exit sequence for state ROTATION_VERS_GOLDENIUM */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ROTATION_VERS_GOLDENIUM()
{
	/* Default exit sequence for state ROTATION_VERS_GOLDENIUM */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ROTATION_VERS_GOLDENIUM();
}

/* Default exit sequence for state PLACEMENT_FACE_GOLDENIUM */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLACEMENT_FACE_GOLDENIUM()
{
	/* Default exit sequence for state PLACEMENT_FACE_GOLDENIUM */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLACEMENT_FACE_GOLDENIUM();
}

/* Default exit sequence for state Copy_1_ACCOSTAGE_BALANCE */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_ACCOSTAGE_BALANCE()
{
	/* Default exit sequence for state Copy_1_ACCOSTAGE_BALANCE */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_ACCOSTAGE_BALANCE();
}

/* Default exit sequence for state DECLENCHEMENT_ACCELERATEUR_JAUNE */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECLENCHEMENT_ACCELERATEUR_JAUNE()
{
	/* Default exit sequence for state DECLENCHEMENT_ACCELERATEUR_JAUNE */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECLENCHEMENT_ACCELERATEUR_JAUNE();
}

/* Default exit sequence for state Copy_1_FACE_BLEUIUM */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_FACE_BLEUIUM()
{
	/* Default exit sequence for state Copy_1_FACE_BLEUIUM */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_FACE_BLEUIUM();
}

/* Default exit sequence for state DECLENCHEMENT_ACCELERATEUR_VIOLET */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECLENCHEMENT_ACCELERATEUR_VIOLET()
{
	/* Default exit sequence for state DECLENCHEMENT_ACCELERATEUR_VIOLET */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECLENCHEMENT_ACCELERATEUR_VIOLET();
}

/* Default exit sequence for state ROTATION_VERS_GOLDENIUM_VIOLET */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ROTATION_VERS_GOLDENIUM_VIOLET()
{
	/* Default exit sequence for state ROTATION_VERS_GOLDENIUM_VIOLET */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ROTATION_VERS_GOLDENIUM_VIOLET();
}

/* Default exit sequence for state FIN_POUSSETTE_JAUNE */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN_POUSSETTE_JAUNE()
{
	/* Default exit sequence for state FIN_POUSSETTE_JAUNE */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN_POUSSETTE_JAUNE();
}

/* Default exit sequence for state RAPPROCHEMENT_DEVANT_BALANCE */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RAPPROCHEMENT_DEVANT_BALANCE()
{
	/* Default exit sequence for state RAPPROCHEMENT_DEVANT_BALANCE */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RAPPROCHEMENT_DEVANT_BALANCE();
}

/* Default exit sequence for state Copy_2_FACE_BLEUIUM */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_FACE_BLEUIUM()
{
	/* Default exit sequence for state Copy_2_FACE_BLEUIUM */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_FACE_BLEUIUM();
}

/* Default exit sequence for state KMAR_LEGEREMENT_A_GAUCHE */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_LEGEREMENT_A_GAUCHE()
{
	/* Default exit sequence for state KMAR_LEGEREMENT_A_GAUCHE */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_LEGEREMENT_A_GAUCHE();
}

/* Default exit sequence for state KMAR_LEGEREMENT_A_DROITE */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_LEGEREMENT_A_DROITE()
{
	/* Default exit sequence for state KMAR_LEGEREMENT_A_DROITE */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_LEGEREMENT_A_DROITE();
}

/* Default exit sequence for state FIN_POUSSETTE_VIOLET */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN_POUSSETTE_VIOLET()
{
	/* Default exit sequence for state FIN_POUSSETTE_VIOLET */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN_POUSSETTE_VIOLET();
}

/* Default exit sequence for state Copy_3_FACE_BLEUIUM */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_FACE_BLEUIUM()
{
	/* Default exit sequence for state Copy_3_FACE_BLEUIUM */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_FACE_BLEUIUM();
}

/* Default exit sequence for state ATTENTE */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ATTENTE()
{
	/* Default exit sequence for state ATTENTE */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ATTENTE();
}

/* Default exit sequence for state Copy_1_DECLENCHEMENT_ACCELERATEUR_JAUNE */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DECLENCHEMENT_ACCELERATEUR_JAUNE()
{
	/* Default exit sequence for state Copy_1_DECLENCHEMENT_ACCELERATEUR_JAUNE */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DECLENCHEMENT_ACCELERATEUR_JAUNE();
}

/* Default exit sequence for state Copy_1_DECLENCHEMENT_ACCELERATEUR_VIOLET */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DECLENCHEMENT_ACCELERATEUR_VIOLET()
{
	/* Default exit sequence for state Copy_1_DECLENCHEMENT_ACCELERATEUR_VIOLET */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DECLENCHEMENT_ACCELERATEUR_VIOLET();
}

/* Default exit sequence for state Copy_2_DECLENCHEMENT_ACCELERATEUR_JAUNE */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_DECLENCHEMENT_ACCELERATEUR_JAUNE()
{
	/* Default exit sequence for state Copy_2_DECLENCHEMENT_ACCELERATEUR_JAUNE */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_DECLENCHEMENT_ACCELERATEUR_JAUNE();
}

/* Default exit sequence for state Copy_3_DECLENCHEMENT_ACCELERATEUR_JAUNE */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_DECLENCHEMENT_ACCELERATEUR_JAUNE()
{
	/* Default exit sequence for state Copy_3_DECLENCHEMENT_ACCELERATEUR_JAUNE */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_DECLENCHEMENT_ACCELERATEUR_JAUNE();
}

/* Default exit sequence for state Copy_2_DECLENCHEMENT_ACCELERATEUR_VIOLET */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_DECLENCHEMENT_ACCELERATEUR_VIOLET()
{
	/* Default exit sequence for state Copy_2_DECLENCHEMENT_ACCELERATEUR_VIOLET */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_DECLENCHEMENT_ACCELERATEUR_VIOLET();
}

/* Default exit sequence for state Copy_3_DECLENCHEMENT_ACCELERATEUR_VIOLET */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_DECLENCHEMENT_ACCELERATEUR_VIOLET()
{
	/* Default exit sequence for state Copy_3_DECLENCHEMENT_ACCELERATEUR_VIOLET */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_DECLENCHEMENT_ACCELERATEUR_VIOLET();
}

/* Default exit sequence for state SUPERVISEUR */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR()
{
	/* Default exit sequence for state SUPERVISEUR */
	exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR();
}

/* Default exit sequence for state SEQUENCE_01 */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_01()
{
	/* Default exit sequence for state SEQUENCE_01 */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state SEQUENCE_02 */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_02()
{
	/* Default exit sequence for state SEQUENCE_02 */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for final state. */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__final_()
{
	/* Default exit sequence for final state. */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state SEQUENCE_03 */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_03()
{
	/* Default exit sequence for state SEQUENCE_03 */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state AUCUNE_SEQUENCE */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_AUCUNE_SEQUENCE()
{
	/* Default exit sequence for state AUCUNE_SEQUENCE */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state SEQUENCE_04 */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_04()
{
	/* Default exit sequence for state SEQUENCE_04 */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state SEQUENCE_05 */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_05()
{
	/* Default exit sequence for state SEQUENCE_05 */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state SEQUENCE_06 */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_06()
{
	/* Default exit sequence for state SEQUENCE_06 */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state ETABLISSEMENT_STRATEGY */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY()
{
	/* Default exit sequence for state ETABLISSEMENT_STRATEGY */
	exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE();
}

/* Default exit sequence for state HOMOLO1 */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_HOMOLO1()
{
	/* Default exit sequence for state HOMOLO1 */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_HOMOLO1();
}

/* Default exit sequence for state HOMOLO2 */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_HOMOLO2()
{
	/* Default exit sequence for state HOMOLO2 */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_HOMOLO2();
}

/* Default exit sequence for final state. */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE__final_()
{
	/* Default exit sequence for final state. */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state STRATEGIE1 */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_STRATEGIE1()
{
	/* Default exit sequence for state STRATEGIE1 */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_STRATEGIE1();
}

/* Default exit sequence for state STRATEGIE_PAR_DEFAUT */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_STRATEGIE_PAR_DEFAUT()
{
	/* Default exit sequence for state STRATEGIE_PAR_DEFAUT */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_STRATEGIE_PAR_DEFAUT();
}

/* Default exit sequence for state SEQUENCE_03_DISTRIBUTEUR */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR()
{
	/* Default exit sequence for state SEQUENCE_03_DISTRIBUTEUR */
	exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR();
}

/* Default exit sequence for state PLACEMENT_DEVANT_DISTRIBUTEUR */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PLACEMENT_DEVANT_DISTRIBUTEUR()
{
	/* Default exit sequence for state PLACEMENT_DEVANT_DISTRIBUTEUR */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PLACEMENT_DEVANT_DISTRIBUTEUR();
}

/* Default exit sequence for state DEVENTOUSAGE_ATOMES */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_DEVENTOUSAGE_ATOMES()
{
	/* Default exit sequence for state DEVENTOUSAGE_ATOMES */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_DEVENTOUSAGE_ATOMES();
}

/* Default exit sequence for state FIN_SEQUENCE */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_FIN_SEQUENCE()
{
	/* Default exit sequence for state FIN_SEQUENCE */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_FIN_SEQUENCE();
}

/* Default exit sequence for final state. */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR__final_()
{
	/* Default exit sequence for final state. */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state INIT_POSITIONS_PLATEAUX_BAS */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_PLATEAUX_BAS()
{
	/* Default exit sequence for state INIT_POSITIONS_PLATEAUX_BAS */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_PLATEAUX_BAS();
}

/* Default exit sequence for state INIT_POSITIONS_BRAS_HAUT */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_BRAS_HAUT()
{
	/* Default exit sequence for state INIT_POSITIONS_BRAS_HAUT */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_BRAS_HAUT();
}

/* Default exit sequence for state INIT_POSITIONS_VENTOUSES_HAUT_01 */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_VENTOUSES_HAUT_01()
{
	/* Default exit sequence for state INIT_POSITIONS_VENTOUSES_HAUT_01 */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_VENTOUSES_HAUT_01();
}

/* Default exit sequence for state INIT_POSITIONS_VENTOUSES_HAUT_02 */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_VENTOUSES_HAUT_02()
{
	/* Default exit sequence for state INIT_POSITIONS_VENTOUSES_HAUT_02 */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_VENTOUSES_HAUT_02();
}

/* Default exit sequence for state MISE_EN_ROUTE_POMPES */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MISE_EN_ROUTE_POMPES()
{
	/* Default exit sequence for state MISE_EN_ROUTE_POMPES */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MISE_EN_ROUTE_POMPES();
}

/* Default exit sequence for state ABAISSEMENT_BRAS */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_ABAISSEMENT_BRAS()
{
	/* Default exit sequence for state ABAISSEMENT_BRAS */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_ABAISSEMENT_BRAS();
}

/* Default exit sequence for state VENTOUSAGE */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VENTOUSAGE()
{
	/* Default exit sequence for state VENTOUSAGE */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VENTOUSAGE();
}

/* Default exit sequence for state RETIRER_ATOMES */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_RETIRER_ATOMES()
{
	/* Default exit sequence for state RETIRER_ATOMES */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_RETIRER_ATOMES();
}

/* Default exit sequence for state VITESSE_VENTOUSE_01 */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VITESSE_VENTOUSE_01()
{
	/* Default exit sequence for state VITESSE_VENTOUSE_01 */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VITESSE_VENTOUSE_01();
}

/* Default exit sequence for state VITESSE_VENTOUSE_02 */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VITESSE_VENTOUSE_02()
{
	/* Default exit sequence for state VITESSE_VENTOUSE_02 */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VITESSE_VENTOUSE_02();
}

/* Default exit sequence for state PIVOTEMENT_ATOME_01 */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PIVOTEMENT_ATOME_01()
{
	/* Default exit sequence for state PIVOTEMENT_ATOME_01 */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PIVOTEMENT_ATOME_01();
}

/* Default exit sequence for state PIVOTEMENT_ATOME_02 */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PIVOTEMENT_ATOME_02()
{
	/* Default exit sequence for state PIVOTEMENT_ATOME_02 */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PIVOTEMENT_ATOME_02();
}

/* Default exit sequence for state POSITIONS_PLATEAUX_MILIEU */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_MILIEU()
{
	/* Default exit sequence for state POSITIONS_PLATEAUX_MILIEU */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_MILIEU();
}

/* Default exit sequence for state POSITIONS_BRAS_HAUT_01 */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_BRAS_HAUT_01()
{
	/* Default exit sequence for state POSITIONS_BRAS_HAUT_01 */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_BRAS_HAUT_01();
}

/* Default exit sequence for state POSITIONS_BRAS_HAUT_02 */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_BRAS_HAUT_02()
{
	/* Default exit sequence for state POSITIONS_BRAS_HAUT_02 */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_BRAS_HAUT_02();
}

/* Default exit sequence for state SECU_ELETROVANNES */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_SECU_ELETROVANNES()
{
	/* Default exit sequence for state SECU_ELETROVANNES */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_SECU_ELETROVANNES();
}

/* Default exit sequence for state POSITIONS_PLATEAUX_BAS */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_BAS()
{
	/* Default exit sequence for state POSITIONS_PLATEAUX_BAS */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_BAS();
}

/* Default exit sequence for state DEGAGEMENT_BRAS */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_DEGAGEMENT_BRAS()
{
	/* Default exit sequence for state DEGAGEMENT_BRAS */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_DEGAGEMENT_BRAS();
}

/* Default exit sequence for state POSITIONS_PLATEAUX_HAUT */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_HAUT()
{
	/* Default exit sequence for state POSITIONS_PLATEAUX_HAUT */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_HAUT();
}

/* Default exit sequence for state STOCKAGE_HORIZONTAL_ATOMES */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_STOCKAGE_HORIZONTAL_ATOMES()
{
	/* Default exit sequence for state STOCKAGE_HORIZONTAL_ATOMES */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_STOCKAGE_HORIZONTAL_ATOMES();
}

/* Default exit sequence for state RANGEMENT_BRAS */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_RANGEMENT_BRAS()
{
	/* Default exit sequence for state RANGEMENT_BRAS */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_RANGEMENT_BRAS();
}

/* Default exit sequence for state MAINTIEN_KMAR_AR */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MAINTIEN_KMAR_AR()
{
	/* Default exit sequence for state MAINTIEN_KMAR_AR */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MAINTIEN_KMAR_AR();
}

/* Default exit sequence for state SEQUENCE_05_RAMASSAGE_ZONE_CHAOS */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS()
{
	/* Default exit sequence for state SEQUENCE_05_RAMASSAGE_ZONE_CHAOS */
	exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS();
}

/* Default exit sequence for state DEPLACEMENT_RAMASSAGE_ATOME */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEPLACEMENT_RAMASSAGE_ATOME()
{
	/* Default exit sequence for state DEPLACEMENT_RAMASSAGE_ATOME */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEPLACEMENT_RAMASSAGE_ATOME();
}

/* Default exit sequence for state FIN_SEQUENCE */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_FIN_SEQUENCE()
{
	/* Default exit sequence for state FIN_SEQUENCE */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_FIN_SEQUENCE();
}

/* Default exit sequence for final state. */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS__final_()
{
	/* Default exit sequence for final state. */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state GLISSSADE */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_GLISSSADE()
{
	/* Default exit sequence for state GLISSSADE */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_GLISSSADE();
}

/* Default exit sequence for state ACTIVATION_POMPE */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_ACTIVATION_POMPE()
{
	/* Default exit sequence for state ACTIVATION_POMPE */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_ACTIVATION_POMPE();
}

/* Default exit sequence for state DEVENTOUSAGE_ATOMES */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEVENTOUSAGE_ATOMES()
{
	/* Default exit sequence for state DEVENTOUSAGE_ATOMES */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEVENTOUSAGE_ATOMES();
}

/* Default exit sequence for state VITESSE_VENTOUSE_01 */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_VITESSE_VENTOUSE_01()
{
	/* Default exit sequence for state VITESSE_VENTOUSE_01 */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_VITESSE_VENTOUSE_01();
}

/* Default exit sequence for state VITESSE_VENTOUSE_02 */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_VITESSE_VENTOUSE_02()
{
	/* Default exit sequence for state VITESSE_VENTOUSE_02 */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_VITESSE_VENTOUSE_02();
}

/* Default exit sequence for state PIVOTEMENT_ATOME_01 */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_PIVOTEMENT_ATOME_01()
{
	/* Default exit sequence for state PIVOTEMENT_ATOME_01 */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_PIVOTEMENT_ATOME_01();
}

/* Default exit sequence for state PIVOTEMENT_ATOME_02 */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_PIVOTEMENT_ATOME_02()
{
	/* Default exit sequence for state PIVOTEMENT_ATOME_02 */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_PIVOTEMENT_ATOME_02();
}

/* Default exit sequence for state POSITIONS_BRAS_HAUT_01 */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_BRAS_HAUT_01()
{
	/* Default exit sequence for state POSITIONS_BRAS_HAUT_01 */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_BRAS_HAUT_01();
}

/* Default exit sequence for state POSITIONS_BRAS_HAUT_02 */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_BRAS_HAUT_02()
{
	/* Default exit sequence for state POSITIONS_BRAS_HAUT_02 */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_BRAS_HAUT_02();
}

/* Default exit sequence for state SECU_ELETROVANNES */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_SECU_ELETROVANNES()
{
	/* Default exit sequence for state SECU_ELETROVANNES */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_SECU_ELETROVANNES();
}

/* Default exit sequence for state POSITIONS_PLATEAUX_BAS */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_PLATEAUX_BAS()
{
	/* Default exit sequence for state POSITIONS_PLATEAUX_BAS */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_PLATEAUX_BAS();
}

/* Default exit sequence for state SEQUENCE_04_ATOME_DEPART */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART()
{
	/* Default exit sequence for state SEQUENCE_04_ATOME_DEPART */
	exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART();
}

/* Default exit sequence for state DEPASSE_ZONE_CHAOS_RAMASSE_DEPART */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEPASSE_ZONE_CHAOS_RAMASSE_DEPART()
{
	/* Default exit sequence for state DEPASSE_ZONE_CHAOS_RAMASSE_DEPART */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEPASSE_ZONE_CHAOS_RAMASSE_DEPART();
}

/* Default exit sequence for state FIN_SEQUENCE */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_FIN_SEQUENCE()
{
	/* Default exit sequence for state FIN_SEQUENCE */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_FIN_SEQUENCE();
}

/* Default exit sequence for final state. */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART__final_()
{
	/* Default exit sequence for final state. */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state DEPLACEMENT_RAMASSAGE_ATOME */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEPLACEMENT_RAMASSAGE_ATOME()
{
	/* Default exit sequence for state DEPLACEMENT_RAMASSAGE_ATOME */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEPLACEMENT_RAMASSAGE_ATOME();
}

/* Default exit sequence for state PRISE_ATOME */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PRISE_ATOME()
{
	/* Default exit sequence for state PRISE_ATOME */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PRISE_ATOME();
}

/* Default exit sequence for state DESCENTE PARECHOC */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DESCENTE_PARECHOC()
{
	/* Default exit sequence for state DESCENTE PARECHOC */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DESCENTE_PARECHOC();
}

/* Default exit sequence for state ACTIVATION_POMPE */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_ACTIVATION_POMPE()
{
	/* Default exit sequence for state ACTIVATION_POMPE */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_ACTIVATION_POMPE();
}

/* Default exit sequence for state DEVENTOUSAGE_ATOMES */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEVENTOUSAGE_ATOMES()
{
	/* Default exit sequence for state DEVENTOUSAGE_ATOMES */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEVENTOUSAGE_ATOMES();
}

/* Default exit sequence for state VITESSE_VENTOUSE_01 */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_VITESSE_VENTOUSE_01()
{
	/* Default exit sequence for state VITESSE_VENTOUSE_01 */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_VITESSE_VENTOUSE_01();
}

/* Default exit sequence for state VITESSE_VENTOUSE_02 */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_VITESSE_VENTOUSE_02()
{
	/* Default exit sequence for state VITESSE_VENTOUSE_02 */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_VITESSE_VENTOUSE_02();
}

/* Default exit sequence for state PIVOTEMENT_ATOME_01 */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PIVOTEMENT_ATOME_01()
{
	/* Default exit sequence for state PIVOTEMENT_ATOME_01 */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PIVOTEMENT_ATOME_01();
}

/* Default exit sequence for state PIVOTEMENT_ATOME_02 */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PIVOTEMENT_ATOME_02()
{
	/* Default exit sequence for state PIVOTEMENT_ATOME_02 */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PIVOTEMENT_ATOME_02();
}

/* Default exit sequence for state POSITIONS_PLATEAUX_MILIEU */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_PLATEAUX_MILIEU()
{
	/* Default exit sequence for state POSITIONS_PLATEAUX_MILIEU */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_PLATEAUX_MILIEU();
}

/* Default exit sequence for state POSITIONS_BRAS_HAUT_01 */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_BRAS_HAUT_01()
{
	/* Default exit sequence for state POSITIONS_BRAS_HAUT_01 */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_BRAS_HAUT_01();
}

/* Default exit sequence for state POSITIONS_BRAS_HAUT_02 */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_BRAS_HAUT_02()
{
	/* Default exit sequence for state POSITIONS_BRAS_HAUT_02 */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_BRAS_HAUT_02();
}

/* Default exit sequence for state SECU_ELETROVANNES */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_SECU_ELETROVANNES()
{
	/* Default exit sequence for state SECU_ELETROVANNES */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_SECU_ELETROVANNES();
}

/* Default exit sequence for state POSITIONS_PLATEAUX_BAS */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_PLATEAUX_BAS()
{
	/* Default exit sequence for state POSITIONS_PLATEAUX_BAS */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_PLATEAUX_BAS();
}

/* Default exit sequence for state Copy_1_POSITIONS_PLATEAUX_MILIEU */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_1_POSITIONS_PLATEAUX_MILIEU()
{
	/* Default exit sequence for state Copy_1_POSITIONS_PLATEAUX_MILIEU */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_1_POSITIONS_PLATEAUX_MILIEU();
}

/* Default exit sequence for state GLISSSADE */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_GLISSSADE()
{
	/* Default exit sequence for state GLISSSADE */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_GLISSSADE();
}

/* Default exit sequence for state Copy_1_PRISE_ATOME */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_1_PRISE_ATOME()
{
	/* Default exit sequence for state Copy_1_PRISE_ATOME */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_1_PRISE_ATOME();
}

/* Default exit sequence for state Copy_2_PRISE_ATOME */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_2_PRISE_ATOME()
{
	/* Default exit sequence for state Copy_2_PRISE_ATOME */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_2_PRISE_ATOME();
}

/* Default exit sequence for state SEQUENCE_06_FIN_HOMOLO */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO()
{
	/* Default exit sequence for state SEQUENCE_06_FIN_HOMOLO */
	exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO();
}

/* Default exit sequence for state SE_METTRE_EN_LIEU_SUR */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_SE_METTRE_EN_LIEU_SUR()
{
	/* Default exit sequence for state SE_METTRE_EN_LIEU_SUR */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_SE_METTRE_EN_LIEU_SUR();
}

/* Default exit sequence for final state. */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO__final_()
{
	/* Default exit sequence for final state. */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state MAINTIEN_KMAR_AR */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_MAINTIEN_KMAR_AR()
{
	/* Default exit sequence for state MAINTIEN_KMAR_AR */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_MAINTIEN_KMAR_AR();
}

/* Default exit sequence for state FIN_MATCH */
void IA::exseq_main_region_FIN_MATCH()
{
	/* Default exit sequence for state FIN_MATCH */
	stateConfVector[0] = IA_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for region main region */
void IA::exseq_main_region()
{
	/* Default exit sequence for region main region */
	/* Handle exit of all possible states (of IA.main_region) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_INIT :
		{
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_INIT();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_HAUTS :
		{
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_HAUTS();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_APPRENTISSAGE_ASCENSEUR :
		{
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_APPRENTISSAGE_ASCENSEUR();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_BAS :
		{
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_BAS();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_RANGE_01 :
		{
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_RANGE_01();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_RANGE_02 :
		{
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_RANGE_02();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_SORTI_01 :
		{
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_SORTI_01();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_SORTI_02 :
		{
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_SORTI_02();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_HAUT :
		{
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_HAUT();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_Copy_1_TOBOGGANS_BAS :
		{
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_Copy_1_TOBOGGANS_BAS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_SORTIE_EVITEMENT :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_SORTIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_ATTENTE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_ATTENTE();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ELOIGNEMENT :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ELOIGNEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ROTATION :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ROTATION();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_FIN_STRATEGIE_EVITEMENT :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_FIN_STRATEGIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_DEBUT_STRATEGIE_EVITEMENT :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_DEBUT_STRATEGIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVD :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVD();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVG :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVG();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_SYNCHRO :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_SYNCHRO();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVD_AVG :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVD_AVG();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARD :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARD();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARG :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARG();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARD_ARG :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARD_ARG();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_DEFAULT :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_DEFAULT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_REDRESSE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_REDRESSE();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE_2 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE_2();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_RETENTATIVE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_RETENTATIVE();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_BUG_YAKINDU_CHOICE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_BUG_YAKINDU_CHOICE();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_DEPASSE_ZONE_CHAOS :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_DEPASSE_ZONE_CHAOS();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_FACE_ZONE_CHAOS :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_FACE_ZONE_CHAOS();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_STOCKAGE_DANS_ZONE_DEPART :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_STOCKAGE_DANS_ZONE_DEPART();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_FIN_SEQUENCE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_FIN_SEQUENCE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE__final_ :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE__final_();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_PARE_CHOC :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_PARE_CHOC();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_MAINTIEN_KMAR_AR :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_MAINTIEN_KMAR_AR();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FACE_BLEUIUM :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FACE_BLEUIUM();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPA_POUSSETTE_JAUNE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPA_POUSSETTE_JAUNE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DEPLACEMENT_VERS_GOLDENIUM :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DEPLACEMENT_VERS_GOLDENIUM();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_POUR_GOLDENIUM :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_POUR_GOLDENIUM();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_VENTOUSAGE_GOLDENIUM :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_VENTOUSAGE_GOLDENIUM();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_DROITE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_DROITE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPA_POUSSETTE_VIOLET :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPA_POUSSETTE_VIOLET();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_GOLDENIUM_DANS_ROBOT_GAUCHE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_GOLDENIUM_DANS_ROBOT_GAUCHE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLACEMENT_DEVANT_BALANCE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLACEMENT_DEVANT_BALANCE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLUS_PROCHE_BALANCE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLUS_PROCHE_BALANCE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_GOLDENIUM_EN_L_AIR :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_GOLDENIUM_EN_L_AIR();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DROPAGE_GOLDENIUM :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DROPAGE_GOLDENIUM();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM__final_ :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM__final_();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DROPAGE_GOLDENIUM :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DROPAGE_GOLDENIUM();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RECULE_AVEC_PRECAUTION :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RECULE_AVEC_PRECAUTION();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ARRET_MOTEURS :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ARRET_MOTEURS();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_MISE_GOLDENIUM_BAS :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_MISE_GOLDENIUM_BAS();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RALENTISSEMENT_KMAR_01 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RALENTISSEMENT_KMAR_01();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RALENTISSEMENT_KMAR_02 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RALENTISSEMENT_KMAR_02();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_POSE_GOLDENIUM :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_POSE_GOLDENIUM();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_01 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_01();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_02 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_02();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_SECURE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_SECURE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_03 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_03();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_GOLDENIUM_DANS_ROBOT_GAUCHE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_GOLDENIUM_DANS_ROBOT_GAUCHE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DESCEND_KMAR :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DESCEND_KMAR();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_MONTE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_MONTE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_BIEN_DROIT :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_BIEN_DROIT();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ROTATION_VERS_GOLDENIUM :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ROTATION_VERS_GOLDENIUM();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLACEMENT_FACE_GOLDENIUM :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLACEMENT_FACE_GOLDENIUM();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_ACCOSTAGE_BALANCE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_ACCOSTAGE_BALANCE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECLENCHEMENT_ACCELERATEUR_JAUNE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECLENCHEMENT_ACCELERATEUR_JAUNE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_FACE_BLEUIUM :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_FACE_BLEUIUM();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECLENCHEMENT_ACCELERATEUR_VIOLET :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECLENCHEMENT_ACCELERATEUR_VIOLET();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ROTATION_VERS_GOLDENIUM_VIOLET :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ROTATION_VERS_GOLDENIUM_VIOLET();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN_POUSSETTE_JAUNE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN_POUSSETTE_JAUNE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RAPPROCHEMENT_DEVANT_BALANCE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RAPPROCHEMENT_DEVANT_BALANCE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_FACE_BLEUIUM :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_FACE_BLEUIUM();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_LEGEREMENT_A_GAUCHE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_LEGEREMENT_A_GAUCHE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_LEGEREMENT_A_DROITE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_LEGEREMENT_A_DROITE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN_POUSSETTE_VIOLET :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN_POUSSETTE_VIOLET();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_FACE_BLEUIUM :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_FACE_BLEUIUM();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ATTENTE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ATTENTE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DECLENCHEMENT_ACCELERATEUR_JAUNE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DECLENCHEMENT_ACCELERATEUR_JAUNE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DECLENCHEMENT_ACCELERATEUR_VIOLET :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DECLENCHEMENT_ACCELERATEUR_VIOLET();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_DECLENCHEMENT_ACCELERATEUR_JAUNE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_DECLENCHEMENT_ACCELERATEUR_JAUNE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_DECLENCHEMENT_ACCELERATEUR_JAUNE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_DECLENCHEMENT_ACCELERATEUR_JAUNE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_DECLENCHEMENT_ACCELERATEUR_VIOLET :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_DECLENCHEMENT_ACCELERATEUR_VIOLET();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_DECLENCHEMENT_ACCELERATEUR_VIOLET :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_DECLENCHEMENT_ACCELERATEUR_VIOLET();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_01 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_01();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_02 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_02();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__final_ :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__final_();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_03 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_03();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_AUCUNE_SEQUENCE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_AUCUNE_SEQUENCE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_04 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_04();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_05 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_05();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_06 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_06();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_HOMOLO1 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_HOMOLO1();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_HOMOLO2 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_HOMOLO2();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE__final_ :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE__final_();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_STRATEGIE1 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_STRATEGIE1();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_STRATEGIE_PAR_DEFAUT :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_STRATEGIE_PAR_DEFAUT();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PLACEMENT_DEVANT_DISTRIBUTEUR :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PLACEMENT_DEVANT_DISTRIBUTEUR();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_DEVENTOUSAGE_ATOMES :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_DEVENTOUSAGE_ATOMES();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_FIN_SEQUENCE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_FIN_SEQUENCE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR__final_ :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR__final_();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_PLATEAUX_BAS :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_PLATEAUX_BAS();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_BRAS_HAUT :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_BRAS_HAUT();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_VENTOUSES_HAUT_01 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_VENTOUSES_HAUT_01();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_VENTOUSES_HAUT_02 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_VENTOUSES_HAUT_02();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MISE_EN_ROUTE_POMPES :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MISE_EN_ROUTE_POMPES();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_ABAISSEMENT_BRAS :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_ABAISSEMENT_BRAS();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VENTOUSAGE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VENTOUSAGE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_RETIRER_ATOMES :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_RETIRER_ATOMES();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VITESSE_VENTOUSE_01 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VITESSE_VENTOUSE_01();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VITESSE_VENTOUSE_02 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VITESSE_VENTOUSE_02();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PIVOTEMENT_ATOME_01 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PIVOTEMENT_ATOME_01();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PIVOTEMENT_ATOME_02 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PIVOTEMENT_ATOME_02();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_MILIEU :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_MILIEU();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_BRAS_HAUT_01 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_BRAS_HAUT_01();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_BRAS_HAUT_02 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_BRAS_HAUT_02();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_SECU_ELETROVANNES :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_SECU_ELETROVANNES();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_BAS :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_BAS();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_DEGAGEMENT_BRAS :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_DEGAGEMENT_BRAS();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_HAUT :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_HAUT();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_STOCKAGE_HORIZONTAL_ATOMES :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_STOCKAGE_HORIZONTAL_ATOMES();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_RANGEMENT_BRAS :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_RANGEMENT_BRAS();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MAINTIEN_KMAR_AR :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MAINTIEN_KMAR_AR();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEPLACEMENT_RAMASSAGE_ATOME :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEPLACEMENT_RAMASSAGE_ATOME();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_FIN_SEQUENCE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_FIN_SEQUENCE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS__final_ :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS__final_();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_GLISSSADE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_GLISSSADE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_ACTIVATION_POMPE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_ACTIVATION_POMPE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEVENTOUSAGE_ATOMES :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEVENTOUSAGE_ATOMES();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_VITESSE_VENTOUSE_01 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_VITESSE_VENTOUSE_01();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_VITESSE_VENTOUSE_02 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_VITESSE_VENTOUSE_02();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_PIVOTEMENT_ATOME_01 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_PIVOTEMENT_ATOME_01();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_PIVOTEMENT_ATOME_02 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_PIVOTEMENT_ATOME_02();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_BRAS_HAUT_01 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_BRAS_HAUT_01();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_BRAS_HAUT_02 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_BRAS_HAUT_02();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_SECU_ELETROVANNES :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_SECU_ELETROVANNES();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_PLATEAUX_BAS :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_PLATEAUX_BAS();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEPASSE_ZONE_CHAOS_RAMASSE_DEPART :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEPASSE_ZONE_CHAOS_RAMASSE_DEPART();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_FIN_SEQUENCE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_FIN_SEQUENCE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART__final_ :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART__final_();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEPLACEMENT_RAMASSAGE_ATOME :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEPLACEMENT_RAMASSAGE_ATOME();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PRISE_ATOME :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PRISE_ATOME();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DESCENTE_PARECHOC :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DESCENTE_PARECHOC();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_ACTIVATION_POMPE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_ACTIVATION_POMPE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEVENTOUSAGE_ATOMES :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEVENTOUSAGE_ATOMES();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_VITESSE_VENTOUSE_01 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_VITESSE_VENTOUSE_01();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_VITESSE_VENTOUSE_02 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_VITESSE_VENTOUSE_02();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PIVOTEMENT_ATOME_01 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PIVOTEMENT_ATOME_01();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PIVOTEMENT_ATOME_02 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PIVOTEMENT_ATOME_02();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_PLATEAUX_MILIEU :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_PLATEAUX_MILIEU();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_BRAS_HAUT_01 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_BRAS_HAUT_01();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_BRAS_HAUT_02 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_BRAS_HAUT_02();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_SECU_ELETROVANNES :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_SECU_ELETROVANNES();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_PLATEAUX_BAS :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_PLATEAUX_BAS();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_1_POSITIONS_PLATEAUX_MILIEU :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_1_POSITIONS_PLATEAUX_MILIEU();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_GLISSSADE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_GLISSSADE();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_1_PRISE_ATOME :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_1_PRISE_ATOME();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_2_PRISE_ATOME :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_2_PRISE_ATOME();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_SE_METTRE_EN_LIEU_SUR :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_SE_METTRE_EN_LIEU_SUR();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO__final_ :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO__final_();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_MAINTIEN_KMAR_AR :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_MAINTIEN_KMAR_AR();
			exact_main_region_MATCH_EN_COURS();
			break;
		}
		case main_region_FIN_MATCH :
		{
			exseq_main_region_FIN_MATCH();
			break;
		}
		default: break;
	}
	/* Handle exit of all possible states (of IA.main_region) at position 1... */
	switch(stateConfVector[ 1 ])
	{
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_COULEUR_CHOIX_COULEUR_VIOLET :
		{
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_COULEUR_CHOIX_COULEUR_VIOLET();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_COULEUR_CHOIX_COULEUR_JAUNE :
		{
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_COULEUR_CHOIX_COULEUR_JAUNE();
			break;
		}
		default: break;
	}
	/* Handle exit of all possible states (of IA.main_region) at position 2... */
	switch(stateConfVector[ 2 ])
	{
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_STRATEGIE_CHOIX_NUM_STRATEGIE :
		{
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_STRATEGIE_CHOIX_NUM_STRATEGIE();
			break;
		}
		default: break;
	}
}

/* Default exit sequence for region null */
void IA::exseq_main_region_ATTENTE_TIRETTE__region0()
{
	/* Default exit sequence for region null */
	/* Handle exit of all possible states (of IA.main_region.ATTENTE_TIRETTE._region0) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_INIT :
		{
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_INIT();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_HAUTS :
		{
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_HAUTS();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_APPRENTISSAGE_ASCENSEUR :
		{
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_APPRENTISSAGE_ASCENSEUR();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_BAS :
		{
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_BAS();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_RANGE_01 :
		{
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_RANGE_01();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_RANGE_02 :
		{
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_RANGE_02();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_SORTI_01 :
		{
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_SORTI_01();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_SORTI_02 :
		{
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_SORTI_02();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_HAUT :
		{
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_HAUT();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_Copy_1_TOBOGGANS_BAS :
		{
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_Copy_1_TOBOGGANS_BAS();
			break;
		}
		default: break;
	}
	/* Handle exit of all possible states (of IA.main_region.ATTENTE_TIRETTE._region0) at position 1... */
	switch(stateConfVector[ 1 ])
	{
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_COULEUR_CHOIX_COULEUR_VIOLET :
		{
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_COULEUR_CHOIX_COULEUR_VIOLET();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_COULEUR_CHOIX_COULEUR_JAUNE :
		{
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_COULEUR_CHOIX_COULEUR_JAUNE();
			break;
		}
		default: break;
	}
	/* Handle exit of all possible states (of IA.main_region.ATTENTE_TIRETTE._region0) at position 2... */
	switch(stateConfVector[ 2 ])
	{
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_STRATEGIE_CHOIX_NUM_STRATEGIE :
		{
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_STRATEGIE_CHOIX_NUM_STRATEGIE();
			break;
		}
		default: break;
	}
}

/* Default exit sequence for region INIT */
void IA::exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT()
{
	/* Default exit sequence for region INIT */
	/* Handle exit of all possible states (of IA.main_region.ATTENTE_TIRETTE._region0.ATTENTE_TIRETTE.INIT) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_INIT :
		{
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_INIT();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_HAUTS :
		{
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_HAUTS();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_APPRENTISSAGE_ASCENSEUR :
		{
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_APPRENTISSAGE_ASCENSEUR();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_BAS :
		{
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_BAS();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_RANGE_01 :
		{
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_RANGE_01();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_RANGE_02 :
		{
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_RANGE_02();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_SORTI_01 :
		{
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_SORTI_01();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_SORTI_02 :
		{
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_SORTI_02();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_HAUT :
		{
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_HAUT();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_Copy_1_TOBOGGANS_BAS :
		{
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_Copy_1_TOBOGGANS_BAS();
			break;
		}
		default: break;
	}
}

/* Default exit sequence for region CHOIX_COULEUR */
void IA::exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_COULEUR()
{
	/* Default exit sequence for region CHOIX_COULEUR */
	/* Handle exit of all possible states (of IA.main_region.ATTENTE_TIRETTE._region0.ATTENTE_TIRETTE.CHOIX_COULEUR) at position 1... */
	switch(stateConfVector[ 1 ])
	{
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_COULEUR_CHOIX_COULEUR_VIOLET :
		{
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_COULEUR_CHOIX_COULEUR_VIOLET();
			break;
		}
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_COULEUR_CHOIX_COULEUR_JAUNE :
		{
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_COULEUR_CHOIX_COULEUR_JAUNE();
			break;
		}
		default: break;
	}
}

/* Default exit sequence for region CHOIX_STRATEGIE */
void IA::exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_STRATEGIE()
{
	/* Default exit sequence for region CHOIX_STRATEGIE */
	/* Handle exit of all possible states (of IA.main_region.ATTENTE_TIRETTE._region0.ATTENTE_TIRETTE.CHOIX_STRATEGIE) at position 2... */
	switch(stateConfVector[ 2 ])
	{
		case main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_STRATEGIE_CHOIX_NUM_STRATEGIE :
		{
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_STRATEGIE_CHOIX_NUM_STRATEGIE();
			break;
		}
		default: break;
	}
}

/* Default exit sequence for region DEROULEMENT_MATCH */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH()
{
	/* Default exit sequence for region DEROULEMENT_MATCH */
	/* Handle exit of all possible states (of IA.main_region.MATCH_EN_COURS.DEROULEMENT_MATCH) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_SORTIE_EVITEMENT :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_SORTIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_ATTENTE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_ATTENTE();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ELOIGNEMENT :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ELOIGNEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ROTATION :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ROTATION();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_FIN_STRATEGIE_EVITEMENT :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_FIN_STRATEGIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_DEBUT_STRATEGIE_EVITEMENT :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_DEBUT_STRATEGIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVD :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVD();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVG :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVG();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_SYNCHRO :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_SYNCHRO();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVD_AVG :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVD_AVG();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARD :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARD();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARG :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARG();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARD_ARG :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARD_ARG();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_DEFAULT :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_DEFAULT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_REDRESSE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_REDRESSE();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE_2 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE_2();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_RETENTATIVE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_RETENTATIVE();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_BUG_YAKINDU_CHOICE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_BUG_YAKINDU_CHOICE();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_DEPASSE_ZONE_CHAOS :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_DEPASSE_ZONE_CHAOS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_FACE_ZONE_CHAOS :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_FACE_ZONE_CHAOS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_STOCKAGE_DANS_ZONE_DEPART :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_STOCKAGE_DANS_ZONE_DEPART();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_FIN_SEQUENCE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_FIN_SEQUENCE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE__final_ :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE__final_();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_PARE_CHOC :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_PARE_CHOC();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_MAINTIEN_KMAR_AR :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_MAINTIEN_KMAR_AR();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FACE_BLEUIUM :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FACE_BLEUIUM();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPA_POUSSETTE_JAUNE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPA_POUSSETTE_JAUNE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DEPLACEMENT_VERS_GOLDENIUM :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DEPLACEMENT_VERS_GOLDENIUM();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_POUR_GOLDENIUM :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_POUR_GOLDENIUM();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_VENTOUSAGE_GOLDENIUM :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_VENTOUSAGE_GOLDENIUM();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_DROITE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_DROITE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPA_POUSSETTE_VIOLET :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPA_POUSSETTE_VIOLET();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_GOLDENIUM_DANS_ROBOT_GAUCHE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_GOLDENIUM_DANS_ROBOT_GAUCHE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLACEMENT_DEVANT_BALANCE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLACEMENT_DEVANT_BALANCE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLUS_PROCHE_BALANCE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLUS_PROCHE_BALANCE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_GOLDENIUM_EN_L_AIR :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_GOLDENIUM_EN_L_AIR();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DROPAGE_GOLDENIUM :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DROPAGE_GOLDENIUM();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM__final_ :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM__final_();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DROPAGE_GOLDENIUM :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DROPAGE_GOLDENIUM();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RECULE_AVEC_PRECAUTION :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RECULE_AVEC_PRECAUTION();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ARRET_MOTEURS :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ARRET_MOTEURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_MISE_GOLDENIUM_BAS :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_MISE_GOLDENIUM_BAS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RALENTISSEMENT_KMAR_01 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RALENTISSEMENT_KMAR_01();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RALENTISSEMENT_KMAR_02 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RALENTISSEMENT_KMAR_02();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_POSE_GOLDENIUM :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_POSE_GOLDENIUM();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_01 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_01();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_02 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_02();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_SECURE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_SECURE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_03 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_03();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_GOLDENIUM_DANS_ROBOT_GAUCHE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_GOLDENIUM_DANS_ROBOT_GAUCHE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DESCEND_KMAR :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DESCEND_KMAR();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_MONTE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_MONTE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_BIEN_DROIT :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_BIEN_DROIT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ROTATION_VERS_GOLDENIUM :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ROTATION_VERS_GOLDENIUM();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLACEMENT_FACE_GOLDENIUM :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLACEMENT_FACE_GOLDENIUM();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_ACCOSTAGE_BALANCE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_ACCOSTAGE_BALANCE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECLENCHEMENT_ACCELERATEUR_JAUNE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECLENCHEMENT_ACCELERATEUR_JAUNE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_FACE_BLEUIUM :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_FACE_BLEUIUM();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECLENCHEMENT_ACCELERATEUR_VIOLET :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECLENCHEMENT_ACCELERATEUR_VIOLET();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ROTATION_VERS_GOLDENIUM_VIOLET :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ROTATION_VERS_GOLDENIUM_VIOLET();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN_POUSSETTE_JAUNE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN_POUSSETTE_JAUNE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RAPPROCHEMENT_DEVANT_BALANCE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RAPPROCHEMENT_DEVANT_BALANCE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_FACE_BLEUIUM :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_FACE_BLEUIUM();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_LEGEREMENT_A_GAUCHE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_LEGEREMENT_A_GAUCHE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_LEGEREMENT_A_DROITE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_LEGEREMENT_A_DROITE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN_POUSSETTE_VIOLET :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN_POUSSETTE_VIOLET();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_FACE_BLEUIUM :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_FACE_BLEUIUM();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ATTENTE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ATTENTE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DECLENCHEMENT_ACCELERATEUR_JAUNE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DECLENCHEMENT_ACCELERATEUR_JAUNE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DECLENCHEMENT_ACCELERATEUR_VIOLET :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DECLENCHEMENT_ACCELERATEUR_VIOLET();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_DECLENCHEMENT_ACCELERATEUR_JAUNE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_DECLENCHEMENT_ACCELERATEUR_JAUNE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_DECLENCHEMENT_ACCELERATEUR_JAUNE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_DECLENCHEMENT_ACCELERATEUR_JAUNE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_DECLENCHEMENT_ACCELERATEUR_VIOLET :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_DECLENCHEMENT_ACCELERATEUR_VIOLET();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_DECLENCHEMENT_ACCELERATEUR_VIOLET :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_DECLENCHEMENT_ACCELERATEUR_VIOLET();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_01 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_01();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_02 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_02();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__final_ :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__final_();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_03 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_03();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_AUCUNE_SEQUENCE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_AUCUNE_SEQUENCE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_04 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_04();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_05 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_05();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_06 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_06();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_HOMOLO1 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_HOMOLO1();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_HOMOLO2 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_HOMOLO2();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE__final_ :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE__final_();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_STRATEGIE1 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_STRATEGIE1();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_STRATEGIE_PAR_DEFAUT :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_STRATEGIE_PAR_DEFAUT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PLACEMENT_DEVANT_DISTRIBUTEUR :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PLACEMENT_DEVANT_DISTRIBUTEUR();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_DEVENTOUSAGE_ATOMES :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_DEVENTOUSAGE_ATOMES();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_FIN_SEQUENCE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_FIN_SEQUENCE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR__final_ :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR__final_();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_PLATEAUX_BAS :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_PLATEAUX_BAS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_BRAS_HAUT :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_BRAS_HAUT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_VENTOUSES_HAUT_01 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_VENTOUSES_HAUT_01();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_VENTOUSES_HAUT_02 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_VENTOUSES_HAUT_02();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MISE_EN_ROUTE_POMPES :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MISE_EN_ROUTE_POMPES();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_ABAISSEMENT_BRAS :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_ABAISSEMENT_BRAS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VENTOUSAGE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VENTOUSAGE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_RETIRER_ATOMES :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_RETIRER_ATOMES();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VITESSE_VENTOUSE_01 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VITESSE_VENTOUSE_01();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VITESSE_VENTOUSE_02 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VITESSE_VENTOUSE_02();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PIVOTEMENT_ATOME_01 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PIVOTEMENT_ATOME_01();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PIVOTEMENT_ATOME_02 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PIVOTEMENT_ATOME_02();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_MILIEU :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_MILIEU();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_BRAS_HAUT_01 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_BRAS_HAUT_01();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_BRAS_HAUT_02 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_BRAS_HAUT_02();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_SECU_ELETROVANNES :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_SECU_ELETROVANNES();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_BAS :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_BAS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_DEGAGEMENT_BRAS :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_DEGAGEMENT_BRAS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_HAUT :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_HAUT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_STOCKAGE_HORIZONTAL_ATOMES :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_STOCKAGE_HORIZONTAL_ATOMES();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_RANGEMENT_BRAS :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_RANGEMENT_BRAS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MAINTIEN_KMAR_AR :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MAINTIEN_KMAR_AR();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEPLACEMENT_RAMASSAGE_ATOME :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEPLACEMENT_RAMASSAGE_ATOME();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_FIN_SEQUENCE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_FIN_SEQUENCE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS__final_ :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS__final_();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_GLISSSADE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_GLISSSADE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_ACTIVATION_POMPE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_ACTIVATION_POMPE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEVENTOUSAGE_ATOMES :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEVENTOUSAGE_ATOMES();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_VITESSE_VENTOUSE_01 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_VITESSE_VENTOUSE_01();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_VITESSE_VENTOUSE_02 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_VITESSE_VENTOUSE_02();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_PIVOTEMENT_ATOME_01 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_PIVOTEMENT_ATOME_01();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_PIVOTEMENT_ATOME_02 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_PIVOTEMENT_ATOME_02();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_BRAS_HAUT_01 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_BRAS_HAUT_01();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_BRAS_HAUT_02 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_BRAS_HAUT_02();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_SECU_ELETROVANNES :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_SECU_ELETROVANNES();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_PLATEAUX_BAS :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_PLATEAUX_BAS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEPASSE_ZONE_CHAOS_RAMASSE_DEPART :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEPASSE_ZONE_CHAOS_RAMASSE_DEPART();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_FIN_SEQUENCE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_FIN_SEQUENCE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART__final_ :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART__final_();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEPLACEMENT_RAMASSAGE_ATOME :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEPLACEMENT_RAMASSAGE_ATOME();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PRISE_ATOME :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PRISE_ATOME();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DESCENTE_PARECHOC :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DESCENTE_PARECHOC();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_ACTIVATION_POMPE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_ACTIVATION_POMPE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEVENTOUSAGE_ATOMES :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEVENTOUSAGE_ATOMES();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_VITESSE_VENTOUSE_01 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_VITESSE_VENTOUSE_01();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_VITESSE_VENTOUSE_02 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_VITESSE_VENTOUSE_02();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PIVOTEMENT_ATOME_01 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PIVOTEMENT_ATOME_01();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PIVOTEMENT_ATOME_02 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PIVOTEMENT_ATOME_02();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_PLATEAUX_MILIEU :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_PLATEAUX_MILIEU();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_BRAS_HAUT_01 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_BRAS_HAUT_01();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_BRAS_HAUT_02 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_BRAS_HAUT_02();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_SECU_ELETROVANNES :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_SECU_ELETROVANNES();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_PLATEAUX_BAS :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_PLATEAUX_BAS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_1_POSITIONS_PLATEAUX_MILIEU :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_1_POSITIONS_PLATEAUX_MILIEU();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_GLISSSADE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_GLISSSADE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_1_PRISE_ATOME :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_1_PRISE_ATOME();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_2_PRISE_ATOME :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_2_PRISE_ATOME();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_SE_METTRE_EN_LIEU_SUR :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_SE_METTRE_EN_LIEU_SUR();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO__final_ :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO__final_();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_MAINTIEN_KMAR_AR :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_MAINTIEN_KMAR_AR();
			break;
		}
		default: break;
	}
}

/* Default exit sequence for region r1 */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1()
{
	/* Default exit sequence for region r1 */
	/* Handle exit of all possible states (of IA.main_region.MATCH_EN_COURS.DEROULEMENT_MATCH.DETECTION_OBSTACLE.r1) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_SORTIE_EVITEMENT :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_SORTIE_EVITEMENT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_ATTENTE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_ATTENTE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ELOIGNEMENT :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ELOIGNEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ROTATION :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ROTATION();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_FIN_STRATEGIE_EVITEMENT :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_FIN_STRATEGIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_DEBUT_STRATEGIE_EVITEMENT :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_DEBUT_STRATEGIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVD :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVD();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVG :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVG();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_SYNCHRO :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_SYNCHRO();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVD_AVG :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVD_AVG();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARD :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARD();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARG :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARG();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARD_ARG :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARD_ARG();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_DEFAULT :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_DEFAULT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_REDRESSE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_REDRESSE();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE_2 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE_2();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_RETENTATIVE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_RETENTATIVE();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_BUG_YAKINDU_CHOICE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_BUG_YAKINDU_CHOICE();
			break;
		}
		default: break;
	}
}

/* Default exit sequence for region r1 */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1()
{
	/* Default exit sequence for region r1 */
	/* Handle exit of all possible states (of IA.main_region.MATCH_EN_COURS.DEROULEMENT_MATCH.DETECTION_OBSTACLE.r1.EVITEMMENT_OBSTACLE_CONTENEUR.r1) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_SORTIE_EVITEMENT :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_SORTIE_EVITEMENT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_ATTENTE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_ATTENTE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ELOIGNEMENT :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ELOIGNEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ROTATION :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ROTATION();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_FIN_STRATEGIE_EVITEMENT :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_FIN_STRATEGIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_DEBUT_STRATEGIE_EVITEMENT :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_DEBUT_STRATEGIE_EVITEMENT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVD :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVD();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVG :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVG();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_SYNCHRO :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_SYNCHRO();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVD_AVG :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVD_AVG();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARD :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARD();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARG :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARG();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARD_ARG :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARD_ARG();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_DEFAULT :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_DEFAULT();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_REDRESSE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_REDRESSE();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE_2 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE_2();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_RETENTATIVE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_RETENTATIVE();
			exact_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_BUG_YAKINDU_CHOICE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_BUG_YAKINDU_CHOICE();
			break;
		}
		default: break;
	}
}

/* Default exit sequence for region r1 */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1()
{
	/* Default exit sequence for region r1 */
	/* Handle exit of all possible states (of IA.main_region.MATCH_EN_COURS.DEROULEMENT_MATCH.DETECTION_OBSTACLE.r1.EVITEMMENT_OBSTACLE_CONTENEUR.r1.STRATEGIE_EVITEMENT.r1) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ELOIGNEMENT :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ELOIGNEMENT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ROTATION :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ROTATION();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_FIN_STRATEGIE_EVITEMENT :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_FIN_STRATEGIE_EVITEMENT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_DEBUT_STRATEGIE_EVITEMENT :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_DEBUT_STRATEGIE_EVITEMENT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVD :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVD();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVG :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVG();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_SYNCHRO :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_SYNCHRO();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVD_AVG :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVD_AVG();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARD :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARD();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARG :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARG();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARD_ARG :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARD_ARG();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_DEFAULT :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_DEFAULT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_REDRESSE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_REDRESSE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE_2 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE_2();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_RETENTATIVE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_RETENTATIVE();
			break;
		}
		default: break;
	}
}

/* Default exit sequence for region TACHE_NETTOYAGE */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE()
{
	/* Default exit sequence for region TACHE_NETTOYAGE */
	/* Handle exit of all possible states (of IA.main_region.MATCH_EN_COURS.DEROULEMENT_MATCH.SEQUENCE_01_NETTOYAGE.TACHE_NETTOYAGE) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_DEPASSE_ZONE_CHAOS :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_DEPASSE_ZONE_CHAOS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_FACE_ZONE_CHAOS :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_FACE_ZONE_CHAOS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_STOCKAGE_DANS_ZONE_DEPART :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_STOCKAGE_DANS_ZONE_DEPART();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_FIN_SEQUENCE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_FIN_SEQUENCE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE__final_ :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE__final_();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_PARE_CHOC :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_PARE_CHOC();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_MAINTIEN_KMAR_AR :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_MAINTIEN_KMAR_AR();
			break;
		}
		default: break;
	}
}

/* Default exit sequence for region TACHE_GOLDENIUM */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM()
{
	/* Default exit sequence for region TACHE_GOLDENIUM */
	/* Handle exit of all possible states (of IA.main_region.MATCH_EN_COURS.DEROULEMENT_MATCH.SEQUENCE_02_GOLDENIUM.TACHE_GOLDENIUM) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FACE_BLEUIUM :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FACE_BLEUIUM();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPA_POUSSETTE_JAUNE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPA_POUSSETTE_JAUNE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DEPLACEMENT_VERS_GOLDENIUM :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DEPLACEMENT_VERS_GOLDENIUM();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_POUR_GOLDENIUM :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_POUR_GOLDENIUM();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_VENTOUSAGE_GOLDENIUM :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_VENTOUSAGE_GOLDENIUM();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_DROITE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_DROITE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPA_POUSSETTE_VIOLET :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPA_POUSSETTE_VIOLET();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_GOLDENIUM_DANS_ROBOT_GAUCHE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_GOLDENIUM_DANS_ROBOT_GAUCHE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLACEMENT_DEVANT_BALANCE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLACEMENT_DEVANT_BALANCE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLUS_PROCHE_BALANCE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLUS_PROCHE_BALANCE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_GOLDENIUM_EN_L_AIR :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_GOLDENIUM_EN_L_AIR();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DROPAGE_GOLDENIUM :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DROPAGE_GOLDENIUM();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM__final_ :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM__final_();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DROPAGE_GOLDENIUM :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DROPAGE_GOLDENIUM();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RECULE_AVEC_PRECAUTION :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RECULE_AVEC_PRECAUTION();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ARRET_MOTEURS :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ARRET_MOTEURS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_MISE_GOLDENIUM_BAS :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_MISE_GOLDENIUM_BAS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RALENTISSEMENT_KMAR_01 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RALENTISSEMENT_KMAR_01();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RALENTISSEMENT_KMAR_02 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RALENTISSEMENT_KMAR_02();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_POSE_GOLDENIUM :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_POSE_GOLDENIUM();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_01 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_01();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_02 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_02();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_SECURE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_SECURE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_03 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_03();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_GOLDENIUM_DANS_ROBOT_GAUCHE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_GOLDENIUM_DANS_ROBOT_GAUCHE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DESCEND_KMAR :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DESCEND_KMAR();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_MONTE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_MONTE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_BIEN_DROIT :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_BIEN_DROIT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ROTATION_VERS_GOLDENIUM :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ROTATION_VERS_GOLDENIUM();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLACEMENT_FACE_GOLDENIUM :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLACEMENT_FACE_GOLDENIUM();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_ACCOSTAGE_BALANCE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_ACCOSTAGE_BALANCE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECLENCHEMENT_ACCELERATEUR_JAUNE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECLENCHEMENT_ACCELERATEUR_JAUNE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_FACE_BLEUIUM :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_FACE_BLEUIUM();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECLENCHEMENT_ACCELERATEUR_VIOLET :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECLENCHEMENT_ACCELERATEUR_VIOLET();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ROTATION_VERS_GOLDENIUM_VIOLET :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ROTATION_VERS_GOLDENIUM_VIOLET();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN_POUSSETTE_JAUNE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN_POUSSETTE_JAUNE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RAPPROCHEMENT_DEVANT_BALANCE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RAPPROCHEMENT_DEVANT_BALANCE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_FACE_BLEUIUM :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_FACE_BLEUIUM();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_LEGEREMENT_A_GAUCHE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_LEGEREMENT_A_GAUCHE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_LEGEREMENT_A_DROITE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_LEGEREMENT_A_DROITE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN_POUSSETTE_VIOLET :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN_POUSSETTE_VIOLET();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_FACE_BLEUIUM :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_FACE_BLEUIUM();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ATTENTE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ATTENTE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DECLENCHEMENT_ACCELERATEUR_JAUNE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DECLENCHEMENT_ACCELERATEUR_JAUNE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DECLENCHEMENT_ACCELERATEUR_VIOLET :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DECLENCHEMENT_ACCELERATEUR_VIOLET();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_DECLENCHEMENT_ACCELERATEUR_JAUNE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_DECLENCHEMENT_ACCELERATEUR_JAUNE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_DECLENCHEMENT_ACCELERATEUR_JAUNE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_DECLENCHEMENT_ACCELERATEUR_JAUNE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_DECLENCHEMENT_ACCELERATEUR_VIOLET :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_DECLENCHEMENT_ACCELERATEUR_VIOLET();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_DECLENCHEMENT_ACCELERATEUR_VIOLET :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_DECLENCHEMENT_ACCELERATEUR_VIOLET();
			break;
		}
		default: break;
	}
}

/* Default exit sequence for region TACHE_SUPERVISEUR */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR()
{
	/* Default exit sequence for region TACHE_SUPERVISEUR */
	/* Handle exit of all possible states (of IA.main_region.MATCH_EN_COURS.DEROULEMENT_MATCH.SUPERVISEUR.TACHE_SUPERVISEUR) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_01 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_01();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_02 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_02();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__final_ :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__final_();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_03 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_03();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_AUCUNE_SEQUENCE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_AUCUNE_SEQUENCE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_04 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_04();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_05 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_05();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_06 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_06();
			break;
		}
		default: break;
	}
}

/* Default exit sequence for region TACHE_CHOIX_STRATEGIE */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE()
{
	/* Default exit sequence for region TACHE_CHOIX_STRATEGIE */
	/* Handle exit of all possible states (of IA.main_region.MATCH_EN_COURS.DEROULEMENT_MATCH.ETABLISSEMENT_STRATEGY.TACHE_CHOIX_STRATEGIE) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_HOMOLO1 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_HOMOLO1();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_HOMOLO2 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_HOMOLO2();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE__final_ :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE__final_();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_STRATEGIE1 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_STRATEGIE1();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_STRATEGIE_PAR_DEFAUT :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_STRATEGIE_PAR_DEFAUT();
			break;
		}
		default: break;
	}
}

/* Default exit sequence for region TACHE_DISTRIBUTEUR */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR()
{
	/* Default exit sequence for region TACHE_DISTRIBUTEUR */
	/* Handle exit of all possible states (of IA.main_region.MATCH_EN_COURS.DEROULEMENT_MATCH.SEQUENCE_03_DISTRIBUTEUR.TACHE_DISTRIBUTEUR) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PLACEMENT_DEVANT_DISTRIBUTEUR :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PLACEMENT_DEVANT_DISTRIBUTEUR();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_DEVENTOUSAGE_ATOMES :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_DEVENTOUSAGE_ATOMES();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_FIN_SEQUENCE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_FIN_SEQUENCE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR__final_ :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR__final_();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_PLATEAUX_BAS :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_PLATEAUX_BAS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_BRAS_HAUT :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_BRAS_HAUT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_VENTOUSES_HAUT_01 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_VENTOUSES_HAUT_01();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_VENTOUSES_HAUT_02 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_VENTOUSES_HAUT_02();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MISE_EN_ROUTE_POMPES :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MISE_EN_ROUTE_POMPES();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_ABAISSEMENT_BRAS :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_ABAISSEMENT_BRAS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VENTOUSAGE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VENTOUSAGE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_RETIRER_ATOMES :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_RETIRER_ATOMES();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VITESSE_VENTOUSE_01 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VITESSE_VENTOUSE_01();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VITESSE_VENTOUSE_02 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VITESSE_VENTOUSE_02();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PIVOTEMENT_ATOME_01 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PIVOTEMENT_ATOME_01();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PIVOTEMENT_ATOME_02 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PIVOTEMENT_ATOME_02();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_MILIEU :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_MILIEU();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_BRAS_HAUT_01 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_BRAS_HAUT_01();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_BRAS_HAUT_02 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_BRAS_HAUT_02();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_SECU_ELETROVANNES :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_SECU_ELETROVANNES();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_BAS :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_BAS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_DEGAGEMENT_BRAS :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_DEGAGEMENT_BRAS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_HAUT :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_HAUT();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_STOCKAGE_HORIZONTAL_ATOMES :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_STOCKAGE_HORIZONTAL_ATOMES();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_RANGEMENT_BRAS :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_RANGEMENT_BRAS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MAINTIEN_KMAR_AR :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MAINTIEN_KMAR_AR();
			break;
		}
		default: break;
	}
}

/* Default exit sequence for region TACHE_RAMASSAGE_ZONE_CHAOS */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS()
{
	/* Default exit sequence for region TACHE_RAMASSAGE_ZONE_CHAOS */
	/* Handle exit of all possible states (of IA.main_region.MATCH_EN_COURS.DEROULEMENT_MATCH.SEQUENCE_05_RAMASSAGE_ZONE_CHAOS.TACHE_RAMASSAGE_ZONE_CHAOS) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEPLACEMENT_RAMASSAGE_ATOME :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEPLACEMENT_RAMASSAGE_ATOME();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_FIN_SEQUENCE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_FIN_SEQUENCE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS__final_ :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS__final_();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_GLISSSADE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_GLISSSADE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_ACTIVATION_POMPE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_ACTIVATION_POMPE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEVENTOUSAGE_ATOMES :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEVENTOUSAGE_ATOMES();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_VITESSE_VENTOUSE_01 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_VITESSE_VENTOUSE_01();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_VITESSE_VENTOUSE_02 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_VITESSE_VENTOUSE_02();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_PIVOTEMENT_ATOME_01 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_PIVOTEMENT_ATOME_01();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_PIVOTEMENT_ATOME_02 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_PIVOTEMENT_ATOME_02();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_BRAS_HAUT_01 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_BRAS_HAUT_01();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_BRAS_HAUT_02 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_BRAS_HAUT_02();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_SECU_ELETROVANNES :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_SECU_ELETROVANNES();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_PLATEAUX_BAS :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_PLATEAUX_BAS();
			break;
		}
		default: break;
	}
}

/* Default exit sequence for region TACHE_RAMASSAGE_ATOME_DEPART */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART()
{
	/* Default exit sequence for region TACHE_RAMASSAGE_ATOME_DEPART */
	/* Handle exit of all possible states (of IA.main_region.MATCH_EN_COURS.DEROULEMENT_MATCH.SEQUENCE_04_ATOME_DEPART.TACHE_RAMASSAGE_ATOME_DEPART) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEPASSE_ZONE_CHAOS_RAMASSE_DEPART :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEPASSE_ZONE_CHAOS_RAMASSE_DEPART();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_FIN_SEQUENCE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_FIN_SEQUENCE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART__final_ :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART__final_();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEPLACEMENT_RAMASSAGE_ATOME :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEPLACEMENT_RAMASSAGE_ATOME();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PRISE_ATOME :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PRISE_ATOME();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DESCENTE_PARECHOC :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DESCENTE_PARECHOC();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_ACTIVATION_POMPE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_ACTIVATION_POMPE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEVENTOUSAGE_ATOMES :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEVENTOUSAGE_ATOMES();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_VITESSE_VENTOUSE_01 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_VITESSE_VENTOUSE_01();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_VITESSE_VENTOUSE_02 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_VITESSE_VENTOUSE_02();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PIVOTEMENT_ATOME_01 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PIVOTEMENT_ATOME_01();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PIVOTEMENT_ATOME_02 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PIVOTEMENT_ATOME_02();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_PLATEAUX_MILIEU :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_PLATEAUX_MILIEU();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_BRAS_HAUT_01 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_BRAS_HAUT_01();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_BRAS_HAUT_02 :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_BRAS_HAUT_02();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_SECU_ELETROVANNES :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_SECU_ELETROVANNES();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_PLATEAUX_BAS :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_PLATEAUX_BAS();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_1_POSITIONS_PLATEAUX_MILIEU :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_1_POSITIONS_PLATEAUX_MILIEU();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_GLISSSADE :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_GLISSSADE();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_1_PRISE_ATOME :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_1_PRISE_ATOME();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_2_PRISE_ATOME :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_2_PRISE_ATOME();
			break;
		}
		default: break;
	}
}

/* Default exit sequence for region STRATEGIE_FIN_HOMOLO */
void IA::exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO()
{
	/* Default exit sequence for region STRATEGIE_FIN_HOMOLO */
	/* Handle exit of all possible states (of IA.main_region.MATCH_EN_COURS.DEROULEMENT_MATCH.SEQUENCE_06_FIN_HOMOLO.STRATEGIE_FIN_HOMOLO) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_SE_METTRE_EN_LIEU_SUR :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_SE_METTRE_EN_LIEU_SUR();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO__final_ :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO__final_();
			break;
		}
		case main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_MAINTIEN_KMAR_AR :
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_MAINTIEN_KMAR_AR();
			break;
		}
		default: break;
	}
}

/* The reactions of state INIT. */
void IA::react_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_INIT()
{
	/* The reactions of state INIT. */
	if (iface.EV_Tirette_raised)
	{ 
		exseq_main_region_ATTENTE_TIRETTE();
		/* 'default' enter sequence for state MATCH_EN_COURS */
		/* Entry action for state 'MATCH_EN_COURS'. */
		timer->setTimer(this, (sc_eventid)(&timeEvents[9]), (DUREE_MATCH) * 1000, false);
		Application.m_leds.setPattern(PATTERN_CLIGNO_12_34, 1000);
		Application.m_asservissement.setPosition_XYTeta(0, 0, IA::DefaultSCI::PI);
		Application.m_asservissement.Ind_perfo = 0.1;
		Application.m_asservissement.cde_max = 20;
		Application.m_asservissement.cde_min = -20;
		Application.m_servos_sd20.setDureeAvantRelache(SERVO_PLATEAU_G, 100000);
		Application.m_servos_sd20.setDureeAvantRelache(SERVO_PLATEAU_D, 100000);
		iface.evit_choix_strategie = ((int32_t) EVITEMENT_NEUTRE);
		iface.evit_nombre_max_tentatives = 5;
		/* 'default' enter sequence for region DEROULEMENT_MATCH */
		/* Default react sequence for initial entry  */
		/* 'default' enter sequence for state ETABLISSEMENT_STRATEGY */
		/* 'default' enter sequence for region TACHE_CHOIX_STRATEGIE */
		/* Default react sequence for initial entry  */
		react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE__choice_0();
	}  else
	{
		iface.tempsMatch = 0;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = -1;
		if (timeEvents[0])
		{ 
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_INIT();
			/* 'default' enter sequence for state TOBOGGANS_HAUTS */
			/* Entry action for state 'TOBOGGANS_HAUTS'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[1]), 200, false);
			Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_G, IA::DefaultSCI::TOB_G_HAUT);
			Application.m_servos_ax.setPosition(SERVO_VENTOUSE_ARG_VERT, IA::DefaultSCI::TOUSE_G_MILIEU);
			Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_D, IA::DefaultSCI::TOB_D_HAUT);
			Application.m_servos_ax.setPosition(SERVO_VENTOUSE_ARD_VERT, IA::DefaultSCI::TOUSE_D_MILIEU);
			stateConfVector[0] = main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_HAUTS;
			stateConfVectorPosition = 0;
		} 
	}
}

/* The reactions of state TOBOGGANS_HAUTS. */
void IA::react_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_HAUTS()
{
	/* The reactions of state TOBOGGANS_HAUTS. */
	if (iface.EV_Tirette_raised)
	{ 
		exseq_main_region_ATTENTE_TIRETTE();
		/* 'default' enter sequence for state MATCH_EN_COURS */
		/* Entry action for state 'MATCH_EN_COURS'. */
		timer->setTimer(this, (sc_eventid)(&timeEvents[9]), (DUREE_MATCH) * 1000, false);
		Application.m_leds.setPattern(PATTERN_CLIGNO_12_34, 1000);
		Application.m_asservissement.setPosition_XYTeta(0, 0, IA::DefaultSCI::PI);
		Application.m_asservissement.Ind_perfo = 0.1;
		Application.m_asservissement.cde_max = 20;
		Application.m_asservissement.cde_min = -20;
		Application.m_servos_sd20.setDureeAvantRelache(SERVO_PLATEAU_G, 100000);
		Application.m_servos_sd20.setDureeAvantRelache(SERVO_PLATEAU_D, 100000);
		iface.evit_choix_strategie = ((int32_t) EVITEMENT_NEUTRE);
		iface.evit_nombre_max_tentatives = 5;
		/* 'default' enter sequence for region DEROULEMENT_MATCH */
		/* Default react sequence for initial entry  */
		/* 'default' enter sequence for state ETABLISSEMENT_STRATEGY */
		/* 'default' enter sequence for region TACHE_CHOIX_STRATEGIE */
		/* Default react sequence for initial entry  */
		react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE__choice_0();
	}  else
	{
		iface.tempsMatch = 0;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = -1;
		if (timeEvents[1])
		{ 
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_HAUTS();
			/* 'default' enter sequence for state KMAR_SORTI_01 */
			/* Entry action for state 'KMAR_SORTI_01'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[6]), 200, false);
			Application.m_servos_ax.setPosition(SERVO_VENTOUSE_AV_HORIZ, IA::DefaultSCI::KMAR_MILIEU);
			Application.m_servos_sd20.CommandePosition(SERVO_PARE_CHOC, IA::DefaultSCI::PARE_CHOC_BAS);
			stateConfVector[0] = main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_SORTI_01;
			stateConfVectorPosition = 0;
		} 
	}
}

/* The reactions of state APPRENTISSAGE_ASCENSEUR. */
void IA::react_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_APPRENTISSAGE_ASCENSEUR()
{
	/* The reactions of state APPRENTISSAGE_ASCENSEUR. */
	if (iface.EV_Tirette_raised)
	{ 
		exseq_main_region_ATTENTE_TIRETTE();
		/* 'default' enter sequence for state MATCH_EN_COURS */
		/* Entry action for state 'MATCH_EN_COURS'. */
		timer->setTimer(this, (sc_eventid)(&timeEvents[9]), (DUREE_MATCH) * 1000, false);
		Application.m_leds.setPattern(PATTERN_CLIGNO_12_34, 1000);
		Application.m_asservissement.setPosition_XYTeta(0, 0, IA::DefaultSCI::PI);
		Application.m_asservissement.Ind_perfo = 0.1;
		Application.m_asservissement.cde_max = 20;
		Application.m_asservissement.cde_min = -20;
		Application.m_servos_sd20.setDureeAvantRelache(SERVO_PLATEAU_G, 100000);
		Application.m_servos_sd20.setDureeAvantRelache(SERVO_PLATEAU_D, 100000);
		iface.evit_choix_strategie = ((int32_t) EVITEMENT_NEUTRE);
		iface.evit_nombre_max_tentatives = 5;
		/* 'default' enter sequence for region DEROULEMENT_MATCH */
		/* Default react sequence for initial entry  */
		/* 'default' enter sequence for state ETABLISSEMENT_STRATEGY */
		/* 'default' enter sequence for region TACHE_CHOIX_STRATEGIE */
		/* Default react sequence for initial entry  */
		react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE__choice_0();
	}  else
	{
		iface.tempsMatch = 0;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = -1;
		if (timeEvents[2])
		{ 
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_APPRENTISSAGE_ASCENSEUR();
			/* 'default' enter sequence for state TOBOGGANS_BAS */
			/* Entry action for state 'TOBOGGANS_BAS'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[3]), 200, false);
			Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_D, IA::DefaultSCI::TOB_D_BAS);
			Application.m_servos_ax.setPosition(SERVO_VENTOUSE_ARD_VERT, IA::DefaultSCI::TOUSE_D_BAS);
			stateConfVector[0] = main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_BAS;
			stateConfVectorPosition = 0;
		} 
	}
}

/* The reactions of state TOBOGGANS_BAS. */
void IA::react_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_BAS()
{
	/* The reactions of state TOBOGGANS_BAS. */
	if (iface.EV_Tirette_raised)
	{ 
		exseq_main_region_ATTENTE_TIRETTE();
		/* 'default' enter sequence for state MATCH_EN_COURS */
		/* Entry action for state 'MATCH_EN_COURS'. */
		timer->setTimer(this, (sc_eventid)(&timeEvents[9]), (DUREE_MATCH) * 1000, false);
		Application.m_leds.setPattern(PATTERN_CLIGNO_12_34, 1000);
		Application.m_asservissement.setPosition_XYTeta(0, 0, IA::DefaultSCI::PI);
		Application.m_asservissement.Ind_perfo = 0.1;
		Application.m_asservissement.cde_max = 20;
		Application.m_asservissement.cde_min = -20;
		Application.m_servos_sd20.setDureeAvantRelache(SERVO_PLATEAU_G, 100000);
		Application.m_servos_sd20.setDureeAvantRelache(SERVO_PLATEAU_D, 100000);
		iface.evit_choix_strategie = ((int32_t) EVITEMENT_NEUTRE);
		iface.evit_nombre_max_tentatives = 5;
		/* 'default' enter sequence for region DEROULEMENT_MATCH */
		/* Default react sequence for initial entry  */
		/* 'default' enter sequence for state ETABLISSEMENT_STRATEGY */
		/* 'default' enter sequence for region TACHE_CHOIX_STRATEGIE */
		/* Default react sequence for initial entry  */
		react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE__choice_0();
	}  else
	{
		iface.tempsMatch = 0;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = -1;
		if (timeEvents[3])
		{ 
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_BAS();
			/* 'default' enter sequence for state Copy_1_TOBOGGANS_BAS */
			/* Entry action for state 'Copy_1_TOBOGGANS_BAS'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[8]), 200, false);
			Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_G, IA::DefaultSCI::TOB_G_BAS);
			Application.m_servos_ax.setPosition(SERVO_VENTOUSE_ARG_VERT, IA::DefaultSCI::TOUSE_G_BAS);
			stateConfVector[0] = main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_Copy_1_TOBOGGANS_BAS;
			stateConfVectorPosition = 0;
		} 
	}
}

/* The reactions of state KMAR_RANGE_01. */
void IA::react_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_RANGE_01()
{
	/* The reactions of state KMAR_RANGE_01. */
	if (iface.EV_Tirette_raised)
	{ 
		exseq_main_region_ATTENTE_TIRETTE();
		/* 'default' enter sequence for state MATCH_EN_COURS */
		/* Entry action for state 'MATCH_EN_COURS'. */
		timer->setTimer(this, (sc_eventid)(&timeEvents[9]), (DUREE_MATCH) * 1000, false);
		Application.m_leds.setPattern(PATTERN_CLIGNO_12_34, 1000);
		Application.m_asservissement.setPosition_XYTeta(0, 0, IA::DefaultSCI::PI);
		Application.m_asservissement.Ind_perfo = 0.1;
		Application.m_asservissement.cde_max = 20;
		Application.m_asservissement.cde_min = -20;
		Application.m_servos_sd20.setDureeAvantRelache(SERVO_PLATEAU_G, 100000);
		Application.m_servos_sd20.setDureeAvantRelache(SERVO_PLATEAU_D, 100000);
		iface.evit_choix_strategie = ((int32_t) EVITEMENT_NEUTRE);
		iface.evit_nombre_max_tentatives = 5;
		/* 'default' enter sequence for region DEROULEMENT_MATCH */
		/* Default react sequence for initial entry  */
		/* 'default' enter sequence for state ETABLISSEMENT_STRATEGY */
		/* 'default' enter sequence for region TACHE_CHOIX_STRATEGIE */
		/* Default react sequence for initial entry  */
		react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE__choice_0();
	}  else
	{
		iface.tempsMatch = 0;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = -1;
		if (timeEvents[4])
		{ 
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_RANGE_01();
			/* 'default' enter sequence for state KMAR_RANGE_02 */
			/* Entry action for state 'KMAR_RANGE_02'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[5]), 200, false);
			Application.m_servos_ax.setPosition(SERVO_VENTOUSE_AV_HORIZ, IA::DefaultSCI::KMAR_MOLLE);
			stateConfVector[0] = main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_RANGE_02;
			stateConfVectorPosition = 0;
		} 
	}
}

/* The reactions of state KMAR_RANGE_02. */
void IA::react_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_RANGE_02()
{
	/* The reactions of state KMAR_RANGE_02. */
	if (iface.EV_Tirette_raised)
	{ 
		exseq_main_region_ATTENTE_TIRETTE();
		/* 'default' enter sequence for state MATCH_EN_COURS */
		/* Entry action for state 'MATCH_EN_COURS'. */
		timer->setTimer(this, (sc_eventid)(&timeEvents[9]), (DUREE_MATCH) * 1000, false);
		Application.m_leds.setPattern(PATTERN_CLIGNO_12_34, 1000);
		Application.m_asservissement.setPosition_XYTeta(0, 0, IA::DefaultSCI::PI);
		Application.m_asservissement.Ind_perfo = 0.1;
		Application.m_asservissement.cde_max = 20;
		Application.m_asservissement.cde_min = -20;
		Application.m_servos_sd20.setDureeAvantRelache(SERVO_PLATEAU_G, 100000);
		Application.m_servos_sd20.setDureeAvantRelache(SERVO_PLATEAU_D, 100000);
		iface.evit_choix_strategie = ((int32_t) EVITEMENT_NEUTRE);
		iface.evit_nombre_max_tentatives = 5;
		/* 'default' enter sequence for region DEROULEMENT_MATCH */
		/* Default react sequence for initial entry  */
		/* 'default' enter sequence for state ETABLISSEMENT_STRATEGY */
		/* 'default' enter sequence for region TACHE_CHOIX_STRATEGIE */
		/* Default react sequence for initial entry  */
		react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE__choice_0();
	}  else
	{
		iface.tempsMatch = 0;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = -1;
		if (timeEvents[5])
		{ 
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_RANGE_02();
			/* 'default' enter sequence for state TOBOGGANS_HAUT */
			/* Entry action for state 'TOBOGGANS_HAUT'. */
			Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_G, IA::DefaultSCI::TOB_G_HAUT);
			Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_D, IA::DefaultSCI::TOB_D_HAUT);
			Application.m_servos_sd20.CommandePosition(SERVO_PARE_CHOC, IA::DefaultSCI::PARE_CHOC_HAUT);
			stateConfVector[0] = main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_HAUT;
			stateConfVectorPosition = 0;
		} 
	}
}

/* The reactions of state KMAR_SORTI_01. */
void IA::react_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_SORTI_01()
{
	/* The reactions of state KMAR_SORTI_01. */
	if (iface.EV_Tirette_raised)
	{ 
		exseq_main_region_ATTENTE_TIRETTE();
		/* 'default' enter sequence for state MATCH_EN_COURS */
		/* Entry action for state 'MATCH_EN_COURS'. */
		timer->setTimer(this, (sc_eventid)(&timeEvents[9]), (DUREE_MATCH) * 1000, false);
		Application.m_leds.setPattern(PATTERN_CLIGNO_12_34, 1000);
		Application.m_asservissement.setPosition_XYTeta(0, 0, IA::DefaultSCI::PI);
		Application.m_asservissement.Ind_perfo = 0.1;
		Application.m_asservissement.cde_max = 20;
		Application.m_asservissement.cde_min = -20;
		Application.m_servos_sd20.setDureeAvantRelache(SERVO_PLATEAU_G, 100000);
		Application.m_servos_sd20.setDureeAvantRelache(SERVO_PLATEAU_D, 100000);
		iface.evit_choix_strategie = ((int32_t) EVITEMENT_NEUTRE);
		iface.evit_nombre_max_tentatives = 5;
		/* 'default' enter sequence for region DEROULEMENT_MATCH */
		/* Default react sequence for initial entry  */
		/* 'default' enter sequence for state ETABLISSEMENT_STRATEGY */
		/* 'default' enter sequence for region TACHE_CHOIX_STRATEGIE */
		/* Default react sequence for initial entry  */
		react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE__choice_0();
	}  else
	{
		iface.tempsMatch = 0;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = -1;
		if (timeEvents[6])
		{ 
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_SORTI_01();
			/* 'default' enter sequence for state KMAR_SORTI_02 */
			/* Entry action for state 'KMAR_SORTI_02'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[7]), 200, false);
			Application.m_servos_ax.setPosition(SERVO_VENTOUSE_AV_VERT, IA::DefaultSCI::KMAR_MI_MOLLE);
			stateConfVector[0] = main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_SORTI_02;
			stateConfVectorPosition = 0;
		} 
	}
}

/* The reactions of state KMAR_SORTI_02. */
void IA::react_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_SORTI_02()
{
	/* The reactions of state KMAR_SORTI_02. */
	if (iface.EV_Tirette_raised)
	{ 
		exseq_main_region_ATTENTE_TIRETTE();
		/* 'default' enter sequence for state MATCH_EN_COURS */
		/* Entry action for state 'MATCH_EN_COURS'. */
		timer->setTimer(this, (sc_eventid)(&timeEvents[9]), (DUREE_MATCH) * 1000, false);
		Application.m_leds.setPattern(PATTERN_CLIGNO_12_34, 1000);
		Application.m_asservissement.setPosition_XYTeta(0, 0, IA::DefaultSCI::PI);
		Application.m_asservissement.Ind_perfo = 0.1;
		Application.m_asservissement.cde_max = 20;
		Application.m_asservissement.cde_min = -20;
		Application.m_servos_sd20.setDureeAvantRelache(SERVO_PLATEAU_G, 100000);
		Application.m_servos_sd20.setDureeAvantRelache(SERVO_PLATEAU_D, 100000);
		iface.evit_choix_strategie = ((int32_t) EVITEMENT_NEUTRE);
		iface.evit_nombre_max_tentatives = 5;
		/* 'default' enter sequence for region DEROULEMENT_MATCH */
		/* Default react sequence for initial entry  */
		/* 'default' enter sequence for state ETABLISSEMENT_STRATEGY */
		/* 'default' enter sequence for region TACHE_CHOIX_STRATEGIE */
		/* Default react sequence for initial entry  */
		react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE__choice_0();
	}  else
	{
		iface.tempsMatch = 0;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = -1;
		if (timeEvents[7])
		{ 
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_SORTI_02();
			/* 'default' enter sequence for state APPRENTISSAGE_ASCENSEUR */
			/* Entry action for state 'APPRENTISSAGE_ASCENSEUR'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[2]), 7 * 1000, false);
			Application.m_asservissement_chariot.Recal_Chariot();
			stateConfVector[0] = main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_APPRENTISSAGE_ASCENSEUR;
			stateConfVectorPosition = 0;
		} 
	}
}

/* The reactions of state TOBOGGANS_HAUT. */
void IA::react_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_TOBOGGANS_HAUT()
{
	/* The reactions of state TOBOGGANS_HAUT. */
	if (iface.EV_Tirette_raised)
	{ 
		exseq_main_region_ATTENTE_TIRETTE();
		/* 'default' enter sequence for state MATCH_EN_COURS */
		/* Entry action for state 'MATCH_EN_COURS'. */
		timer->setTimer(this, (sc_eventid)(&timeEvents[9]), (DUREE_MATCH) * 1000, false);
		Application.m_leds.setPattern(PATTERN_CLIGNO_12_34, 1000);
		Application.m_asservissement.setPosition_XYTeta(0, 0, IA::DefaultSCI::PI);
		Application.m_asservissement.Ind_perfo = 0.1;
		Application.m_asservissement.cde_max = 20;
		Application.m_asservissement.cde_min = -20;
		Application.m_servos_sd20.setDureeAvantRelache(SERVO_PLATEAU_G, 100000);
		Application.m_servos_sd20.setDureeAvantRelache(SERVO_PLATEAU_D, 100000);
		iface.evit_choix_strategie = ((int32_t) EVITEMENT_NEUTRE);
		iface.evit_nombre_max_tentatives = 5;
		/* 'default' enter sequence for region DEROULEMENT_MATCH */
		/* Default react sequence for initial entry  */
		/* 'default' enter sequence for state ETABLISSEMENT_STRATEGY */
		/* 'default' enter sequence for region TACHE_CHOIX_STRATEGIE */
		/* Default react sequence for initial entry  */
		react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE__choice_0();
	}  else
	{
		iface.tempsMatch = 0;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = -1;
	}
}

/* The reactions of state Copy_1_TOBOGGANS_BAS. */
void IA::react_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_Copy_1_TOBOGGANS_BAS()
{
	/* The reactions of state Copy_1_TOBOGGANS_BAS. */
	if (iface.EV_Tirette_raised)
	{ 
		exseq_main_region_ATTENTE_TIRETTE();
		/* 'default' enter sequence for state MATCH_EN_COURS */
		/* Entry action for state 'MATCH_EN_COURS'. */
		timer->setTimer(this, (sc_eventid)(&timeEvents[9]), (DUREE_MATCH) * 1000, false);
		Application.m_leds.setPattern(PATTERN_CLIGNO_12_34, 1000);
		Application.m_asservissement.setPosition_XYTeta(0, 0, IA::DefaultSCI::PI);
		Application.m_asservissement.Ind_perfo = 0.1;
		Application.m_asservissement.cde_max = 20;
		Application.m_asservissement.cde_min = -20;
		Application.m_servos_sd20.setDureeAvantRelache(SERVO_PLATEAU_G, 100000);
		Application.m_servos_sd20.setDureeAvantRelache(SERVO_PLATEAU_D, 100000);
		iface.evit_choix_strategie = ((int32_t) EVITEMENT_NEUTRE);
		iface.evit_nombre_max_tentatives = 5;
		/* 'default' enter sequence for region DEROULEMENT_MATCH */
		/* Default react sequence for initial entry  */
		/* 'default' enter sequence for state ETABLISSEMENT_STRATEGY */
		/* 'default' enter sequence for region TACHE_CHOIX_STRATEGIE */
		/* Default react sequence for initial entry  */
		react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE__choice_0();
	}  else
	{
		iface.tempsMatch = 0;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = -1;
		if (timeEvents[8])
		{ 
			exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_Copy_1_TOBOGGANS_BAS();
			/* 'default' enter sequence for state KMAR_RANGE_01 */
			/* Entry action for state 'KMAR_RANGE_01'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[4]), 200, false);
			Application.m_servos_ax.setPosition(SERVO_VENTOUSE_AV_VERT, IA::DefaultSCI::KMAR_GAUCHE);
			stateConfVector[0] = main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_INIT_KMAR_RANGE_01;
			stateConfVectorPosition = 0;
		} 
	}
}

/* The reactions of state CHOIX_COULEUR_VIOLET. */
void IA::react_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_COULEUR_CHOIX_COULEUR_VIOLET()
{
	/* The reactions of state CHOIX_COULEUR_VIOLET. */
	if (iface.IN_Couleur == 1)
	{ 
		exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_COULEUR_CHOIX_COULEUR_VIOLET();
		/* 'default' enter sequence for state CHOIX_COULEUR_JAUNE */
		/* Entry action for state 'CHOIX_COULEUR_JAUNE'. */
		iface.Couleur = IA::DefaultSCI::JAUNE;
		Application.m_leds.setPattern(PATTERN_CHENILLE, 50);
		ifaceInternalSCI.invMouv = 1;
		stateConfVector[1] = main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_COULEUR_CHOIX_COULEUR_JAUNE;
		stateConfVectorPosition = 1;
	} 
}

/* The reactions of state CHOIX_COULEUR_JAUNE. */
void IA::react_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_COULEUR_CHOIX_COULEUR_JAUNE()
{
	/* The reactions of state CHOIX_COULEUR_JAUNE. */
	if (iface.IN_Couleur == 0)
	{ 
		exseq_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_COULEUR_CHOIX_COULEUR_JAUNE();
		/* 'default' enter sequence for state CHOIX_COULEUR_VIOLET */
		/* Entry action for state 'CHOIX_COULEUR_VIOLET'. */
		iface.Couleur = IA::DefaultSCI::VIOLET;
		Application.m_leds.setPattern(PATTERN_K2000, 50);
		ifaceInternalSCI.invMouv = -1;
		stateConfVector[1] = main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_COULEUR_CHOIX_COULEUR_VIOLET;
		stateConfVectorPosition = 1;
	} 
}

/* The reactions of state CHOIX_NUM_STRATEGIE. */
void IA::react_main_region_ATTENTE_TIRETTE__region0_ATTENTE_TIRETTE_CHOIX_STRATEGIE_CHOIX_NUM_STRATEGIE()
{
	/* The reactions of state CHOIX_NUM_STRATEGIE. */
	iface.choixStrategie = iface.IN_choixStrategie;
}

/* The reactions of state EVITEMENT_INIT. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT()
{
	/* The reactions of state EVITEMENT_INIT. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 0) && (iface.evitementEnCours == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH__choice_0();
		}  else
		{
			iface.evit_detection_obstacle_bitfield = Application.m_match.m_obstacle_detecte_bitfield;
			if (timeEvents[10])
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT();
				/* 'default' enter sequence for state EVITEMENT_BUG_YAKINDU_CHOICE */
				stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_BUG_YAKINDU_CHOICE;
				stateConfVectorPosition = 0;
			} 
		}
	}
}

/* The reactions of state SORTIE_EVITEMENT. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_SORTIE_EVITEMENT()
{
	/* The reactions of state SORTIE_EVITEMENT. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 0) && (iface.evitementEnCours == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH__choice_0();
		}  else
		{
			iface.evit_detection_obstacle_bitfield = Application.m_match.m_obstacle_detecte_bitfield;
			if (timeEvents[11])
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_SORTIE_EVITEMENT();
				/* 'default' enter sequence for state EVITEMENT_INIT */
				/* Entry action for state 'EVITEMENT_INIT'. */
				timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
				iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
				iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
				iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
				iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
				iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
				iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
				iface.evit_memo_force_obstacle = iface.forceObstacle;
				iface.forceObstacle = true;
				iface.evit_debug_etape = 0;
				iface.evit_nombre_tentatives = 0;
				iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
				Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
				stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
				stateConfVectorPosition = 0;
			} 
		}
	}
}

/* The reactions of state EVITEMENT_ATTENTE. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_ATTENTE()
{
	/* The reactions of state EVITEMENT_ATTENTE. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 0) && (iface.evitementEnCours == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH__choice_0();
		}  else
		{
			iface.evit_detection_obstacle_bitfield = Application.m_match.m_obstacle_detecte_bitfield;
			if (timeEvents[12])
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_ATTENTE();
				/* 'default' enter sequence for state EVITEMENT_BUG_YAKINDU_CHOICE */
				stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_BUG_YAKINDU_CHOICE;
				stateConfVectorPosition = 0;
			} 
		}
	}
}

/* The reactions of state EVITEMENT_ELOIGNEMENT. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ELOIGNEMENT()
{
	/* The reactions of state EVITEMENT_ELOIGNEMENT. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 0) && (iface.evitementEnCours == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH__choice_0();
		}  else
		{
			iface.evit_detection_obstacle_bitfield = Application.m_match.m_obstacle_detecte_bitfield;
			if (iface.evit_strategie_evitement_en_cours == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1__choice_1();
			}  else
			{
				if (iface.EV_ConvergenceMvt_Rapide_raised || timeEvents[13])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ELOIGNEMENT();
					/* 'default' enter sequence for state EVITEMENT_ROTATION */
					/* Entry action for state 'EVITEMENT_ROTATION'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[14]), 3 * 1000, false);
					Application.m_asservissement.CommandeMouvementDistanceAngle(0, ((float) iface.IN_teta_pos) + iface.evit_sgn_angle_pivote * 1.1);
					iface.evit_debug_etape = 22;
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ROTATION;
					stateConfVectorPosition = 0;
				}  else
				{
					if (iface.IN_Obstacle == 1)
					{ 
						exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ELOIGNEMENT();
						/* 'default' enter sequence for state EVITEMENT_RETENTATIVE */
						/* Entry action for state 'EVITEMENT_RETENTATIVE'. */
						iface.evit_strategie_evitement_en_cours = false;
						iface.evit_debug_etape = 27;
						stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_RETENTATIVE;
						stateConfVectorPosition = 0;
					} 
				}
			}
		}
	}
}

/* The reactions of state EVITEMENT_ROTATION. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ROTATION()
{
	/* The reactions of state EVITEMENT_ROTATION. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 0) && (iface.evitementEnCours == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH__choice_0();
		}  else
		{
			iface.evit_detection_obstacle_bitfield = Application.m_match.m_obstacle_detecte_bitfield;
			if (iface.evit_strategie_evitement_en_cours == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1__choice_1();
			}  else
			{
				if (iface.EV_ConvergenceMvt_Rapide_raised || timeEvents[14])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ROTATION();
					/* 'default' enter sequence for state EVITEMENT_EVACUE */
					/* Entry action for state 'EVITEMENT_EVACUE'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[15]), 5 * 1000, false);
					Application.m_asservissement.CommandeMouvementDistanceAngle(iface.evit_sgn_dist_evacue * (40 + 4 * iface.evit_nombre_tentatives), ((float) iface.IN_teta_pos));
					iface.evit_debug_etape = 23;
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE;
					stateConfVectorPosition = 0;
				} 
			}
		}
	}
}

/* The reactions of state EVITEMENT_EVACUE. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE()
{
	/* The reactions of state EVITEMENT_EVACUE. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 0) && (iface.evitementEnCours == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH__choice_0();
		}  else
		{
			iface.evit_detection_obstacle_bitfield = Application.m_match.m_obstacle_detecte_bitfield;
			if (iface.evit_strategie_evitement_en_cours == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1__choice_1();
			}  else
			{
				if (iface.EV_ConvergenceMvt_Rapide_raised || timeEvents[15])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE();
					/* 'default' enter sequence for state EVITEMENT_REDRESSE */
					/* Entry action for state 'EVITEMENT_REDRESSE'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[16]), 3 * 1000, false);
					Application.m_asservissement.CommandeMouvementDistanceAngle(0, ((float) iface.IN_teta_pos) - iface.evit_sgn_angle_pivote * 0.9);
					iface.evit_debug_etape = 24;
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_REDRESSE;
					stateConfVectorPosition = 0;
				}  else
				{
					if (iface.IN_Obstacle == 1)
					{ 
						exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE();
						/* 'default' enter sequence for state EVITEMENT_RETENTATIVE */
						/* Entry action for state 'EVITEMENT_RETENTATIVE'. */
						iface.evit_strategie_evitement_en_cours = false;
						iface.evit_debug_etape = 27;
						stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_RETENTATIVE;
						stateConfVectorPosition = 0;
					} 
				}
			}
		}
	}
}

/* The reactions of state FIN_STRATEGIE_EVITEMENT. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_FIN_STRATEGIE_EVITEMENT()
{
	/* The reactions of state FIN_STRATEGIE_EVITEMENT. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 0) && (iface.evitementEnCours == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH__choice_0();
		}  else
		{
			iface.evit_detection_obstacle_bitfield = Application.m_match.m_obstacle_detecte_bitfield;
			if (iface.evit_strategie_evitement_en_cours == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1__choice_1();
			} 
		}
	}
}

/* The reactions of state DEBUT_STRATEGIE_EVITEMENT. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_DEBUT_STRATEGIE_EVITEMENT()
{
	/* The reactions of state DEBUT_STRATEGIE_EVITEMENT. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 0) && (iface.evitementEnCours == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH__choice_0();
		}  else
		{
			iface.evit_detection_obstacle_bitfield = Application.m_match.m_obstacle_detecte_bitfield;
			if (iface.evit_strategie_evitement_en_cours == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1__choice_1();
			}  else
			{
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_DEBUT_STRATEGIE_EVITEMENT();
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1__choice_0();
			}
		}
	}
}

/* The reactions of state EVITEMENT_AVD. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVD()
{
	/* The reactions of state EVITEMENT_AVD. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 0) && (iface.evitementEnCours == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH__choice_0();
		}  else
		{
			iface.evit_detection_obstacle_bitfield = Application.m_match.m_obstacle_detecte_bitfield;
			if (iface.evit_strategie_evitement_en_cours == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1__choice_1();
			}  else
			{
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVD();
				/* 'default' enter sequence for state EVITEMENT_SYNCHRO */
				stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_SYNCHRO;
				stateConfVectorPosition = 0;
			}
		}
	}
}

/* The reactions of state EVITEMENT_AVG. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVG()
{
	/* The reactions of state EVITEMENT_AVG. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 0) && (iface.evitementEnCours == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH__choice_0();
		}  else
		{
			iface.evit_detection_obstacle_bitfield = Application.m_match.m_obstacle_detecte_bitfield;
			if (iface.evit_strategie_evitement_en_cours == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1__choice_1();
			}  else
			{
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVG();
				/* 'default' enter sequence for state EVITEMENT_SYNCHRO */
				stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_SYNCHRO;
				stateConfVectorPosition = 0;
			}
		}
	}
}

/* The reactions of state EVITEMENT_SYNCHRO. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_SYNCHRO()
{
	/* The reactions of state EVITEMENT_SYNCHRO. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 0) && (iface.evitementEnCours == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH__choice_0();
		}  else
		{
			iface.evit_detection_obstacle_bitfield = Application.m_match.m_obstacle_detecte_bitfield;
			if (iface.evit_strategie_evitement_en_cours == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1__choice_1();
			}  else
			{
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_SYNCHRO();
				/* 'default' enter sequence for state EVITEMENT_ELOIGNEMENT */
				/* Entry action for state 'EVITEMENT_ELOIGNEMENT'. */
				timer->setTimer(this, (sc_eventid)(&timeEvents[13]), 5 * 1000, false);
				Application.m_asservissement.CommandeMouvementDistanceAngle(iface.evit_sgn_dist_eloigne * (15 + 3 * iface.evit_nombre_tentatives), ((float) iface.IN_teta_pos));
				iface.evit_debug_etape = 21;
				stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ELOIGNEMENT;
				stateConfVectorPosition = 0;
			}
		}
	}
}

/* The reactions of state EVITEMENT_AVD_AVG. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVD_AVG()
{
	/* The reactions of state EVITEMENT_AVD_AVG. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 0) && (iface.evitementEnCours == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH__choice_0();
		}  else
		{
			iface.evit_detection_obstacle_bitfield = Application.m_match.m_obstacle_detecte_bitfield;
			if (iface.evit_strategie_evitement_en_cours == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1__choice_1();
			}  else
			{
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVD_AVG();
				/* 'default' enter sequence for state EVITEMENT_SYNCHRO */
				stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_SYNCHRO;
				stateConfVectorPosition = 0;
			}
		}
	}
}

/* The reactions of state EVITEMENT_ARD. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARD()
{
	/* The reactions of state EVITEMENT_ARD. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 0) && (iface.evitementEnCours == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH__choice_0();
		}  else
		{
			iface.evit_detection_obstacle_bitfield = Application.m_match.m_obstacle_detecte_bitfield;
			if (iface.evit_strategie_evitement_en_cours == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1__choice_1();
			}  else
			{
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARD();
				/* 'default' enter sequence for state EVITEMENT_SYNCHRO */
				stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_SYNCHRO;
				stateConfVectorPosition = 0;
			}
		}
	}
}

/* The reactions of state EVITEMENT_ARG. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARG()
{
	/* The reactions of state EVITEMENT_ARG. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 0) && (iface.evitementEnCours == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH__choice_0();
		}  else
		{
			iface.evit_detection_obstacle_bitfield = Application.m_match.m_obstacle_detecte_bitfield;
			if (iface.evit_strategie_evitement_en_cours == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1__choice_1();
			}  else
			{
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARG();
				/* 'default' enter sequence for state EVITEMENT_SYNCHRO */
				stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_SYNCHRO;
				stateConfVectorPosition = 0;
			}
		}
	}
}

/* The reactions of state EVITEMENT_ARD_ARG. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARD_ARG()
{
	/* The reactions of state EVITEMENT_ARD_ARG. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 0) && (iface.evitementEnCours == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH__choice_0();
		}  else
		{
			iface.evit_detection_obstacle_bitfield = Application.m_match.m_obstacle_detecte_bitfield;
			if (iface.evit_strategie_evitement_en_cours == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1__choice_1();
			}  else
			{
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARD_ARG();
				/* 'default' enter sequence for state EVITEMENT_SYNCHRO */
				stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_SYNCHRO;
				stateConfVectorPosition = 0;
			}
		}
	}
}

/* The reactions of state EVITEMENT_DEFAULT. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_DEFAULT()
{
	/* The reactions of state EVITEMENT_DEFAULT. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 0) && (iface.evitementEnCours == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH__choice_0();
		}  else
		{
			iface.evit_detection_obstacle_bitfield = Application.m_match.m_obstacle_detecte_bitfield;
			if (iface.evit_strategie_evitement_en_cours == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1__choice_1();
			} 
		}
	}
}

/* The reactions of state EVITEMENT_REDRESSE. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_REDRESSE()
{
	/* The reactions of state EVITEMENT_REDRESSE. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 0) && (iface.evitementEnCours == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH__choice_0();
		}  else
		{
			iface.evit_detection_obstacle_bitfield = Application.m_match.m_obstacle_detecte_bitfield;
			if (iface.evit_strategie_evitement_en_cours == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1__choice_1();
			}  else
			{
				if (iface.EV_ConvergenceMvt_Rapide_raised || timeEvents[16])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_REDRESSE();
					/* 'default' enter sequence for state EVITEMENT_EVACUE_2 */
					/* Entry action for state 'EVITEMENT_EVACUE_2'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[17]), 5 * 1000, false);
					Application.m_asservissement.CommandeMouvementDistanceAngle(iface.evit_sgn_dist_evacue * (50 + 4 * iface.evit_nombre_tentatives), ((float) iface.IN_teta_pos));
					iface.evit_debug_etape = 25;
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE_2;
					stateConfVectorPosition = 0;
				} 
			}
		}
	}
}

/* The reactions of state EVITEMENT_EVACUE_2. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE_2()
{
	/* The reactions of state EVITEMENT_EVACUE_2. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 0) && (iface.evitementEnCours == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH__choice_0();
		}  else
		{
			iface.evit_detection_obstacle_bitfield = Application.m_match.m_obstacle_detecte_bitfield;
			if (iface.evit_strategie_evitement_en_cours == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1__choice_1();
			}  else
			{
				if (iface.EV_ConvergenceMvt_Rapide_raised || timeEvents[17])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE_2();
					/* 'default' enter sequence for state FIN_STRATEGIE_EVITEMENT */
					/* Entry action for state 'FIN_STRATEGIE_EVITEMENT'. */
					iface.evit_strategie_evitement_en_cours = false;
					iface.evit_debug_etape = 26;
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_FIN_STRATEGIE_EVITEMENT;
					stateConfVectorPosition = 0;
				}  else
				{
					if (iface.IN_Obstacle == 1)
					{ 
						exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_EVACUE_2();
						/* 'default' enter sequence for state EVITEMENT_RETENTATIVE */
						/* Entry action for state 'EVITEMENT_RETENTATIVE'. */
						iface.evit_strategie_evitement_en_cours = false;
						iface.evit_debug_etape = 27;
						stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_RETENTATIVE;
						stateConfVectorPosition = 0;
					} 
				}
			}
		}
	}
}

/* The reactions of state EVITEMENT_RETENTATIVE. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_RETENTATIVE()
{
	/* The reactions of state EVITEMENT_RETENTATIVE. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 0) && (iface.evitementEnCours == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH__choice_0();
		}  else
		{
			iface.evit_detection_obstacle_bitfield = Application.m_match.m_obstacle_detecte_bitfield;
			if (iface.evit_strategie_evitement_en_cours == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT();
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1__choice_1();
			} 
		}
	}
}

/* The reactions of state EVITEMENT_BUG_YAKINDU_CHOICE. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_BUG_YAKINDU_CHOICE()
{
	/* The reactions of state EVITEMENT_BUG_YAKINDU_CHOICE. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 0) && (iface.evitementEnCours == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE();
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH__choice_0();
		}  else
		{
			iface.evit_detection_obstacle_bitfield = Application.m_match.m_obstacle_detecte_bitfield;
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_BUG_YAKINDU_CHOICE();
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1__choice_0();
		}
	}
}

/* The reactions of state DEPASSE_ZONE_CHAOS. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_DEPASSE_ZONE_CHAOS()
{
	/* The reactions of state DEPASSE_ZONE_CHAOS. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence1 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (iface.EV_ConvergenceMvt_raised || timeEvents[18])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_DEPASSE_ZONE_CHAOS();
					/* 'default' enter sequence for state MAINTIEN_KMAR_AR */
					/* Entry action for state 'MAINTIEN_KMAR_AR'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[22]), 40, false);
					Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARG, IA::DefaultSCI::KMAR_G_HAUT);
					Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARD, IA::DefaultSCI::KMAR_D_HAUT);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_MAINTIEN_KMAR_AR;
					stateConfVectorPosition = 0;
					historyVector[0] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state FACE_ZONE_CHAOS. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_FACE_ZONE_CHAOS()
{
	/* The reactions of state FACE_ZONE_CHAOS. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence1 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (iface.EV_ConvergenceMvt_raised || timeEvents[19])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_FACE_ZONE_CHAOS();
					/* 'default' enter sequence for state STOCKAGE_DANS_ZONE_DEPART */
					/* Entry action for state 'STOCKAGE_DANS_ZONE_DEPART'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[20]), 6 * 1000, false);
					SCI_Asser_OCB::XYTeta(30, -57 * ifaceInternalSCI.invMouv, 0);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_STOCKAGE_DANS_ZONE_DEPART;
					stateConfVectorPosition = 0;
					historyVector[0] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state STOCKAGE_DANS_ZONE_DEPART. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_STOCKAGE_DANS_ZONE_DEPART()
{
	/* The reactions of state STOCKAGE_DANS_ZONE_DEPART. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence1 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (iface.EV_ConvergenceMvt_raised || timeEvents[20])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_STOCKAGE_DANS_ZONE_DEPART();
					/* 'default' enter sequence for state FIN_SEQUENCE */
					/* Entry action for state 'FIN_SEQUENCE'. */
					iface.score_grosbot += 9;
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_FIN_SEQUENCE;
					stateConfVectorPosition = 0;
					historyVector[0] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state FIN_SEQUENCE. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_FIN_SEQUENCE()
{
	/* The reactions of state FIN_SEQUENCE. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence1 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_FIN_SEQUENCE();
				/* Default enter sequence for state null */
				stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE__final_;
				stateConfVectorPosition = 0;
			}
		}
	}
}

/* The reactions of state null. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE__final_()
{
	/* The reactions of state null. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence1 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			} 
		}
	}
}

/* The reactions of state PARE_CHOC. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_PARE_CHOC()
{
	/* The reactions of state PARE_CHOC. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence1 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[21])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_PARE_CHOC();
					/* 'default' enter sequence for state DEPASSE_ZONE_CHAOS */
					/* Entry action for state 'DEPASSE_ZONE_CHAOS'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[18]), 3 * 1000, false);
					SCI_Asser_OCB::XYTeta(114, 0, IA::DefaultSCI::PI);
					iface.evit_choix_strategie = ((int32_t) EVITEMENT_NORMAL);
					iface.evit_nombre_max_tentatives = 1;
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_DEPASSE_ZONE_CHAOS;
					stateConfVectorPosition = 0;
					historyVector[0] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state MAINTIEN_KMAR_AR. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_MAINTIEN_KMAR_AR()
{
	/* The reactions of state MAINTIEN_KMAR_AR. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence1 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[22])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_MAINTIEN_KMAR_AR();
					/* 'default' enter sequence for state FACE_ZONE_CHAOS */
					/* Entry action for state 'FACE_ZONE_CHAOS'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[19]), 5 * 1000, false);
					SCI_Asser_OCB::XYTeta(114, -57 * ifaceInternalSCI.invMouv, 0);
					iface.evit_nombre_max_tentatives = 2;
					Application.m_servos_sd20.CommandePosition(SERVO_PARE_CHOC, IA::DefaultSCI::PARE_CHOC_BAS);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_FACE_ZONE_CHAOS;
					stateConfVectorPosition = 0;
					historyVector[0] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state FACE_BLEUIUM. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FACE_BLEUIUM()
{
	/* The reactions of state FACE_BLEUIUM. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (iface.EV_ConvergenceMvt_raised || timeEvents[23])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FACE_BLEUIUM();
					/* 'default' enter sequence for state Copy_2_FACE_BLEUIUM */
					/* Entry action for state 'Copy_2_FACE_BLEUIUM'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[61]), 5 * 1000, false);
					iface.inhibeObstacle = true;
					SCI_Asser_OCB::XYTeta(142, 21 * ifaceInternalSCI.invMouv, IA::DefaultSCI::PI);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_FACE_BLEUIUM;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state PREPA_POUSSETTE_JAUNE. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPA_POUSSETTE_JAUNE()
{
	/* The reactions of state PREPA_POUSSETTE_JAUNE. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[24])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPA_POUSSETTE_JAUNE();
					/* 'default' enter sequence for state DECLENCHEMENT_ACCELERATEUR_JAUNE */
					/* Entry action for state 'DECLENCHEMENT_ACCELERATEUR_JAUNE'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[55]), 2 * 1000, false);
					SCI_Asser_OCB::DistanceAngle(-19, IA::DefaultSCI::PI);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECLENCHEMENT_ACCELERATEUR_JAUNE;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state DEPLACEMENT_VERS_GOLDENIUM. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DEPLACEMENT_VERS_GOLDENIUM()
{
	/* The reactions of state DEPLACEMENT_VERS_GOLDENIUM. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (iface.EV_ConvergenceMvt_raised || timeEvents[25])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DEPLACEMENT_VERS_GOLDENIUM();
					/* 'default' enter sequence for state ATTENTE */
					/* Entry action for state 'ATTENTE'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[66]), 500, false);
					iface.inhibeObstacle = true;
					iface.forceObstacle = false;
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ATTENTE;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state PREPARATION_KMAR_POUR_GOLDENIUM. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_POUR_GOLDENIUM()
{
	/* The reactions of state PREPARATION_KMAR_POUR_GOLDENIUM. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[26])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_POUR_GOLDENIUM();
					/* 'default' enter sequence for state RALENTISSEMENT_KMAR_01 */
					/* Entry action for state 'RALENTISSEMENT_KMAR_01'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[41]), 200, false);
					Application.m_servos_ax.setSpeed(SERVO_VENTOUSE_AV_VERT, 200);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RALENTISSEMENT_KMAR_01;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state VENTOUSAGE_GOLDENIUM. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_VENTOUSAGE_GOLDENIUM()
{
	/* The reactions of state VENTOUSAGE_GOLDENIUM. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[27])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_VENTOUSAGE_GOLDENIUM();
					/* 'default' enter sequence for state RECULE_AVEC_PRECAUTION */
					/* Entry action for state 'RECULE_AVEC_PRECAUTION'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[38]), 2 * 1000, false);
					Application.m_asservissement.CommandeManuelle(-10, -10);
					iface.forceObstacle = true;
					iface.US_AV = false;
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RECULE_AVEC_PRECAUTION;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state PREPARATION_KMAR_GAUCHE. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE()
{
	/* The reactions of state PREPARATION_KMAR_GAUCHE. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[28])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE();
					/* 'default' enter sequence for state Copy_1_FACE_BLEUIUM */
					/* Entry action for state 'Copy_1_FACE_BLEUIUM'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[56]), 10 * 1000, false);
					Application.m_asservissement.Ind_perfo = 0.1;
					Application.m_asservissement.cde_max = 20;
					Application.m_asservissement.cde_min = -20;
					SCI_Asser_OCB::XYTeta(142, -10 * ifaceInternalSCI.invMouv, 0);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_FACE_BLEUIUM;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state PREPARATION_KMAR_DROITE. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_DROITE()
{
	/* The reactions of state PREPARATION_KMAR_DROITE. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[29])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_DROITE();
					/* 'default' enter sequence for state FACE_BLEUIUM */
					/* Entry action for state 'FACE_BLEUIUM'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[23]), 10 * 1000, false);
					Application.m_asservissement.Ind_perfo = 0.1;
					Application.m_asservissement.cde_max = 20;
					Application.m_asservissement.cde_min = -20;
					SCI_Asser_OCB::XYTeta(142, -10 * ifaceInternalSCI.invMouv, IA::DefaultSCI::PI);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FACE_BLEUIUM;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE()
{
	/* The reactions of state PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[30])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE();
					react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM__choice_0();
				} 
			}
		}
	}
}

/* The reactions of state PREPA_POUSSETTE_VIOLET. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPA_POUSSETTE_VIOLET()
{
	/* The reactions of state PREPA_POUSSETTE_VIOLET. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[31])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPA_POUSSETTE_VIOLET();
					/* 'default' enter sequence for state DECLENCHEMENT_ACCELERATEUR_VIOLET */
					/* Entry action for state 'DECLENCHEMENT_ACCELERATEUR_VIOLET'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[57]), 2 * 1000, false);
					SCI_Asser_OCB::DistanceAngle(19, 0);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECLENCHEMENT_ACCELERATEUR_VIOLET;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state GOLDENIUM_DANS_ROBOT_GAUCHE. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_GOLDENIUM_DANS_ROBOT_GAUCHE()
{
	/* The reactions of state GOLDENIUM_DANS_ROBOT_GAUCHE. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[32])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_GOLDENIUM_DANS_ROBOT_GAUCHE();
					/* 'default' enter sequence for state POSE_GOLDENIUM */
					/* Entry action for state 'POSE_GOLDENIUM'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[43]), 2 * 1000, false);
					Application.m_asservissement_chariot.setConsigne(200);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_POSE_GOLDENIUM;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state PLACEMENT_DEVANT_BALANCE. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLACEMENT_DEVANT_BALANCE()
{
	/* The reactions of state PLACEMENT_DEVANT_BALANCE. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (iface.EV_ConvergenceMvt_raised || timeEvents[33])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLACEMENT_DEVANT_BALANCE();
					/* 'default' enter sequence for state RAPPROCHEMENT_DEVANT_BALANCE */
					/* Entry action for state 'RAPPROCHEMENT_DEVANT_BALANCE'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[60]), 3 * 1000, false);
					Application.m_asservissement.CommandeMouvementXY_TETA(111, -70 * ifaceInternalSCI.invMouv, (-IA::DefaultSCI::PI / 2.0) * ifaceInternalSCI.invMouv);
					iface.inhibeObstacle = true;
					iface.evit_choix_strategie = ((int32_t) EVITEMENT_NEUTRE);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RAPPROCHEMENT_DEVANT_BALANCE;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state PLUS_PROCHE_BALANCE. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLUS_PROCHE_BALANCE()
{
	/* The reactions of state PLUS_PROCHE_BALANCE. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (iface.EV_ConvergenceMvt_raised || timeEvents[34])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLUS_PROCHE_BALANCE();
					/* 'default' enter sequence for state Copy_1_ACCOSTAGE_BALANCE */
					/* Entry action for state 'Copy_1_ACCOSTAGE_BALANCE'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[54]), 2 * 1000, false);
					Application.m_asservissement.CommandeManuelle(15, 15);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_ACCOSTAGE_BALANCE;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state GOLDENIUM_EN_L_AIR. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_GOLDENIUM_EN_L_AIR()
{
	/* The reactions of state GOLDENIUM_EN_L_AIR. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[35])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_GOLDENIUM_EN_L_AIR();
					react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM__choice_1();
				} 
			}
		}
	}
}

/* The reactions of state DROPAGE_GOLDENIUM. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DROPAGE_GOLDENIUM()
{
	/* The reactions of state DROPAGE_GOLDENIUM. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[36])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DROPAGE_GOLDENIUM();
					/* 'default' enter sequence for state Copy_1_DROPAGE_GOLDENIUM */
					/* Entry action for state 'Copy_1_DROPAGE_GOLDENIUM'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[37]), 1 * 1000, false);
					Application.m_power_switch.setOutput(EV_AV, false);
					Application.m_servos_ax.setPosition(SERVO_VENTOUSE_AV_HORIZ, 512);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DROPAGE_GOLDENIUM;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state FIN. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN()
{
	/* The reactions of state FIN. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN();
				/* Default enter sequence for state null */
				stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM__final_;
				stateConfVectorPosition = 0;
			}
		}
	}
}

/* The reactions of state null. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM__final_()
{
	/* The reactions of state null. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			} 
		}
	}
}

/* The reactions of state Copy_1_DROPAGE_GOLDENIUM. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DROPAGE_GOLDENIUM()
{
	/* The reactions of state Copy_1_DROPAGE_GOLDENIUM. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[37])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DROPAGE_GOLDENIUM();
					/* 'default' enter sequence for state FIN */
					/* Entry action for state 'FIN'. */
					iface.score_grosbot += 24;
					Application.m_power_switch.setOutput(EV_AV, false);
					Application.m_power_switch.setOutput(EV_ARD, false);
					Application.m_power_switch.setOutput(EV_ARG, false);
					Application.m_power_switch.setOutput(POMPE_ARD, false);
					Application.m_power_switch.setOutput(POMPE_ARG, false);
					Application.m_power_switch.setOutput(POMPE_AV, false);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state RECULE_AVEC_PRECAUTION. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RECULE_AVEC_PRECAUTION()
{
	/* The reactions of state RECULE_AVEC_PRECAUTION. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[38])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RECULE_AVEC_PRECAUTION();
					/* 'default' enter sequence for state ARRET_MOTEURS */
					/* Entry action for state 'ARRET_MOTEURS'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[39]), 1 * 1000, false);
					iface.score_grosbot += 20;
					Application.m_asservissement.CommandeManuelle(0, 0);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ARRET_MOTEURS;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state ARRET_MOTEURS. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ARRET_MOTEURS()
{
	/* The reactions of state ARRET_MOTEURS. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[39])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ARRET_MOTEURS();
					/* 'default' enter sequence for state MISE_GOLDENIUM_BAS */
					/* Entry action for state 'MISE_GOLDENIUM_BAS'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[40]), 2 * 1000, false);
					Application.m_servos_ax.setPosition(SERVO_VENTOUSE_AV_HORIZ, 200);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_MISE_GOLDENIUM_BAS;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state MISE_GOLDENIUM_BAS. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_MISE_GOLDENIUM_BAS()
{
	/* The reactions of state MISE_GOLDENIUM_BAS. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[40])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_MISE_GOLDENIUM_BAS();
					/* 'default' enter sequence for state GOLDENIUM_DANS_ROBOT_GAUCHE */
					/* Entry action for state 'GOLDENIUM_DANS_ROBOT_GAUCHE'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[32]), 1 * 1000, false);
					Application.m_servos_ax.setPosition(SERVO_VENTOUSE_AV_VERT, 150);
					Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_G, 65);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_GOLDENIUM_DANS_ROBOT_GAUCHE;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state RALENTISSEMENT_KMAR_01. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RALENTISSEMENT_KMAR_01()
{
	/* The reactions of state RALENTISSEMENT_KMAR_01. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[41])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RALENTISSEMENT_KMAR_01();
					/* 'default' enter sequence for state RALENTISSEMENT_KMAR_02 */
					/* Entry action for state 'RALENTISSEMENT_KMAR_02'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[42]), 1 * 1000, false);
					Application.m_servos_ax.setSpeed(SERVO_VENTOUSE_AV_HORIZ, 200);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RALENTISSEMENT_KMAR_02;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state RALENTISSEMENT_KMAR_02. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RALENTISSEMENT_KMAR_02()
{
	/* The reactions of state RALENTISSEMENT_KMAR_02. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[42])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RALENTISSEMENT_KMAR_02();
					/* 'default' enter sequence for state VENTOUSAGE_GOLDENIUM */
					/* Entry action for state 'VENTOUSAGE_GOLDENIUM'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[27]), 2 * 1000, false);
					Application.m_asservissement.CommandeManuelle(15, 15);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_VENTOUSAGE_GOLDENIUM;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state POSE_GOLDENIUM. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_POSE_GOLDENIUM()
{
	/* The reactions of state POSE_GOLDENIUM. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[43])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_POSE_GOLDENIUM();
					/* 'default' enter sequence for state DECOLLAGE_GOLDENIUM_01 */
					/* Entry action for state 'DECOLLAGE_GOLDENIUM_01'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[44]), 200, false);
					Application.m_power_switch.setOutput(POMPE_AV, false);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_01;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state DECOLLAGE_GOLDENIUM_01. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_01()
{
	/* The reactions of state DECOLLAGE_GOLDENIUM_01. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[44])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_01();
					/* 'default' enter sequence for state DECOLLAGE_GOLDENIUM_02 */
					/* Entry action for state 'DECOLLAGE_GOLDENIUM_02'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[45]), 500, false);
					Application.m_power_switch.setOutput(EV_AV, true);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_02;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state DECOLLAGE_GOLDENIUM_02. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_02()
{
	/* The reactions of state DECOLLAGE_GOLDENIUM_02. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[45])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_02();
					/* 'default' enter sequence for state DECOLLAGE_GOLDENIUM_03 */
					/* Entry action for state 'DECOLLAGE_GOLDENIUM_03'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[47]), 200, false);
					Application.m_power_switch.setOutput(EV_AV, false);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_03;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state KMAR_SECURE. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_SECURE()
{
	/* The reactions of state KMAR_SECURE. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[46])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_SECURE();
					/* 'default' enter sequence for state PLACEMENT_DEVANT_BALANCE */
					/* Entry action for state 'PLACEMENT_DEVANT_BALANCE'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[33]), 4 * 1000, false);
					Application.m_asservissement.CommandeMouvementXY_TETA(111, -55 * ifaceInternalSCI.invMouv, (-IA::DefaultSCI::PI / 2.0) * ifaceInternalSCI.invMouv);
					iface.inhibeObstacle = false;
					Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_G, IA::DefaultSCI::TOB_G_HAUT);
					Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_D, IA::DefaultSCI::TOB_D_HAUT);
					iface.evit_choix_strategie = ((int32_t) EVITEMENT_NORMAL);
					iface.evit_nombre_max_tentatives = 1;
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLACEMENT_DEVANT_BALANCE;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state DECOLLAGE_GOLDENIUM_03. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_03()
{
	/* The reactions of state DECOLLAGE_GOLDENIUM_03. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[47])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECOLLAGE_GOLDENIUM_03();
					/* 'default' enter sequence for state KMAR_SECURE */
					/* Entry action for state 'KMAR_SECURE'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[46]), 2 * 1000, false);
					Application.m_asservissement_chariot.setConsigne(400);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_SECURE;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state Copy_1_GOLDENIUM_DANS_ROBOT_GAUCHE. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_GOLDENIUM_DANS_ROBOT_GAUCHE()
{
	/* The reactions of state Copy_1_GOLDENIUM_DANS_ROBOT_GAUCHE. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[48])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_GOLDENIUM_DANS_ROBOT_GAUCHE();
					/* 'default' enter sequence for state DESCEND_KMAR */
					/* Entry action for state 'DESCEND_KMAR'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[49]), 1500, false);
					Application.m_power_switch.setOutput(POMPE_AV, true);
					Application.m_asservissement_chariot.setConsigne(100);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DESCEND_KMAR;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state DESCEND_KMAR. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DESCEND_KMAR()
{
	/* The reactions of state DESCEND_KMAR. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[49])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DESCEND_KMAR();
					/* 'default' enter sequence for state KMAR_MONTE */
					/* Entry action for state 'KMAR_MONTE'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[50]), 1 * 1000, false);
					Application.m_asservissement_chariot.setConsigne(500);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_MONTE;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state KMAR_MONTE. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_MONTE()
{
	/* The reactions of state KMAR_MONTE. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[50])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_MONTE();
					/* 'default' enter sequence for state KMAR_BIEN_DROIT */
					/* Entry action for state 'KMAR_BIEN_DROIT'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[51]), 1500, false);
					Application.m_servos_ax.setPosition(SERVO_VENTOUSE_AV_VERT, 512);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_BIEN_DROIT;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state KMAR_BIEN_DROIT. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_BIEN_DROIT()
{
	/* The reactions of state KMAR_BIEN_DROIT. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[51])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_BIEN_DROIT();
					/* 'default' enter sequence for state GOLDENIUM_EN_L_AIR */
					/* Entry action for state 'GOLDENIUM_EN_L_AIR'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[35]), 1 * 1000, false);
					Application.m_servos_ax.setPosition(SERVO_VENTOUSE_AV_HORIZ, 750);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_GOLDENIUM_EN_L_AIR;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state ROTATION_VERS_GOLDENIUM. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ROTATION_VERS_GOLDENIUM()
{
	/* The reactions of state ROTATION_VERS_GOLDENIUM. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (iface.EV_ConvergenceMvt_raised || timeEvents[52])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ROTATION_VERS_GOLDENIUM();
					/* 'default' enter sequence for state DEPLACEMENT_VERS_GOLDENIUM */
					/* Entry action for state 'DEPLACEMENT_VERS_GOLDENIUM'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[25]), 6 * 1000, false);
					iface.forceObstacle = true;
					SCI_Asser_OCB::XY(209, 12 * ifaceInternalSCI.invMouv);
					iface.evit_choix_strategie = ((int32_t) EVITEMENT_NEUTRE);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DEPLACEMENT_VERS_GOLDENIUM;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state PLACEMENT_FACE_GOLDENIUM. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLACEMENT_FACE_GOLDENIUM()
{
	/* The reactions of state PLACEMENT_FACE_GOLDENIUM. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (iface.EV_ConvergenceMvt_raised || timeEvents[53])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLACEMENT_FACE_GOLDENIUM();
					/* 'default' enter sequence for state PREPARATION_KMAR_POUR_GOLDENIUM */
					/* Entry action for state 'PREPARATION_KMAR_POUR_GOLDENIUM'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[26]), 200, false);
					Application.m_servos_ax.setPosition(SERVO_VENTOUSE_AV_VERT, 512);
					Application.m_power_switch.setOutput(POMPE_AV, true);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_POUR_GOLDENIUM;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state Copy_1_ACCOSTAGE_BALANCE. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_ACCOSTAGE_BALANCE()
{
	/* The reactions of state Copy_1_ACCOSTAGE_BALANCE. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[54])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_ACCOSTAGE_BALANCE();
					/* 'default' enter sequence for state DROPAGE_GOLDENIUM */
					/* Entry action for state 'DROPAGE_GOLDENIUM'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[36]), 5 * 1000, false);
					Application.m_power_switch.setOutput(EV_AV, true);
					Application.m_power_switch.setOutput(POMPE_AV, false);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DROPAGE_GOLDENIUM;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state DECLENCHEMENT_ACCELERATEUR_JAUNE. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECLENCHEMENT_ACCELERATEUR_JAUNE()
{
	/* The reactions of state DECLENCHEMENT_ACCELERATEUR_JAUNE. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (iface.EV_ConvergenceMvt_raised || timeEvents[55])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECLENCHEMENT_ACCELERATEUR_JAUNE();
					/* 'default' enter sequence for state Copy_2_DECLENCHEMENT_ACCELERATEUR_JAUNE */
					/* Entry action for state 'Copy_2_DECLENCHEMENT_ACCELERATEUR_JAUNE'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[69]), 2 * 1000, false);
					SCI_Asser_OCB::DistanceAngle(15, IA::DefaultSCI::PI);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_DECLENCHEMENT_ACCELERATEUR_JAUNE;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state Copy_1_FACE_BLEUIUM. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_FACE_BLEUIUM()
{
	/* The reactions of state Copy_1_FACE_BLEUIUM. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (iface.EV_ConvergenceMvt_raised || timeEvents[56])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_FACE_BLEUIUM();
					/* 'default' enter sequence for state Copy_3_FACE_BLEUIUM */
					/* Entry action for state 'Copy_3_FACE_BLEUIUM'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[65]), 5 * 1000, false);
					iface.inhibeObstacle = true;
					SCI_Asser_OCB::XYTeta(142, 21 * ifaceInternalSCI.invMouv, 0);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_FACE_BLEUIUM;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state DECLENCHEMENT_ACCELERATEUR_VIOLET. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECLENCHEMENT_ACCELERATEUR_VIOLET()
{
	/* The reactions of state DECLENCHEMENT_ACCELERATEUR_VIOLET. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (iface.EV_ConvergenceMvt_raised || timeEvents[57])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DECLENCHEMENT_ACCELERATEUR_VIOLET();
					/* 'default' enter sequence for state Copy_1_DECLENCHEMENT_ACCELERATEUR_VIOLET */
					/* Entry action for state 'Copy_1_DECLENCHEMENT_ACCELERATEUR_VIOLET'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[68]), 2 * 1000, false);
					SCI_Asser_OCB::DistanceAngle(-14, 0);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DECLENCHEMENT_ACCELERATEUR_VIOLET;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state ROTATION_VERS_GOLDENIUM_VIOLET. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ROTATION_VERS_GOLDENIUM_VIOLET()
{
	/* The reactions of state ROTATION_VERS_GOLDENIUM_VIOLET. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (iface.EV_ConvergenceMvt_raised || timeEvents[58])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ROTATION_VERS_GOLDENIUM_VIOLET();
					/* 'default' enter sequence for state DEPLACEMENT_VERS_GOLDENIUM */
					/* Entry action for state 'DEPLACEMENT_VERS_GOLDENIUM'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[25]), 6 * 1000, false);
					iface.forceObstacle = true;
					SCI_Asser_OCB::XY(209, 12 * ifaceInternalSCI.invMouv);
					iface.evit_choix_strategie = ((int32_t) EVITEMENT_NEUTRE);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_DEPLACEMENT_VERS_GOLDENIUM;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state FIN_POUSSETTE_JAUNE. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN_POUSSETTE_JAUNE()
{
	/* The reactions of state FIN_POUSSETTE_JAUNE. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[59])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN_POUSSETTE_JAUNE();
					/* 'default' enter sequence for state ROTATION_VERS_GOLDENIUM */
					/* Entry action for state 'ROTATION_VERS_GOLDENIUM'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[52]), 2 * 1000, false);
					iface.score_grosbot += 20;
					SCI_Asser_OCB::DistanceAngle(0, 0);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ROTATION_VERS_GOLDENIUM;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state RAPPROCHEMENT_DEVANT_BALANCE. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RAPPROCHEMENT_DEVANT_BALANCE()
{
	/* The reactions of state RAPPROCHEMENT_DEVANT_BALANCE. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (iface.EV_ConvergenceMvt_raised || timeEvents[60])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_RAPPROCHEMENT_DEVANT_BALANCE();
					/* 'default' enter sequence for state Copy_1_GOLDENIUM_DANS_ROBOT_GAUCHE */
					/* Entry action for state 'Copy_1_GOLDENIUM_DANS_ROBOT_GAUCHE'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[48]), 100, false);
					Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_G, 65);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_GOLDENIUM_DANS_ROBOT_GAUCHE;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state Copy_2_FACE_BLEUIUM. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_FACE_BLEUIUM()
{
	/* The reactions of state Copy_2_FACE_BLEUIUM. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (iface.EV_ConvergenceMvt_raised || timeEvents[61])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_FACE_BLEUIUM();
					/* 'default' enter sequence for state PREPA_POUSSETTE_JAUNE */
					/* Entry action for state 'PREPA_POUSSETTE_JAUNE'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[24]), 500, false);
					Application.m_servos_ax.setPosition(SERVO_CHUCK_NORRIS, IA::DefaultSCI::CHUCK_OUVERT);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPA_POUSSETTE_JAUNE;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state KMAR_LEGEREMENT_A_GAUCHE. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_LEGEREMENT_A_GAUCHE()
{
	/* The reactions of state KMAR_LEGEREMENT_A_GAUCHE. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[62])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_LEGEREMENT_A_GAUCHE();
					/* 'default' enter sequence for state PLUS_PROCHE_BALANCE */
					/* Entry action for state 'PLUS_PROCHE_BALANCE'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[34]), 3 * 1000, false);
					Application.m_asservissement.Ind_perfo = 0.3;
					Application.m_asservissement.CommandeMouvementXY_TETA(111, -89 * ifaceInternalSCI.invMouv, (-IA::DefaultSCI::PI / 2.0) * ifaceInternalSCI.invMouv);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLUS_PROCHE_BALANCE;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state KMAR_LEGEREMENT_A_DROITE. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_LEGEREMENT_A_DROITE()
{
	/* The reactions of state KMAR_LEGEREMENT_A_DROITE. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[63])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_LEGEREMENT_A_DROITE();
					/* 'default' enter sequence for state PLUS_PROCHE_BALANCE */
					/* Entry action for state 'PLUS_PROCHE_BALANCE'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[34]), 3 * 1000, false);
					Application.m_asservissement.Ind_perfo = 0.3;
					Application.m_asservissement.CommandeMouvementXY_TETA(111, -89 * ifaceInternalSCI.invMouv, (-IA::DefaultSCI::PI / 2.0) * ifaceInternalSCI.invMouv);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLUS_PROCHE_BALANCE;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state FIN_POUSSETTE_VIOLET. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN_POUSSETTE_VIOLET()
{
	/* The reactions of state FIN_POUSSETTE_VIOLET. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[64])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN_POUSSETTE_VIOLET();
					/* 'default' enter sequence for state ROTATION_VERS_GOLDENIUM_VIOLET */
					/* Entry action for state 'ROTATION_VERS_GOLDENIUM_VIOLET'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[58]), 2 * 1000, false);
					iface.score_grosbot += 20;
					iface.forceObstacle = true;
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ROTATION_VERS_GOLDENIUM_VIOLET;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state Copy_3_FACE_BLEUIUM. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_FACE_BLEUIUM()
{
	/* The reactions of state Copy_3_FACE_BLEUIUM. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (iface.EV_ConvergenceMvt_raised || timeEvents[65])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_FACE_BLEUIUM();
					/* 'default' enter sequence for state PREPA_POUSSETTE_VIOLET */
					/* Entry action for state 'PREPA_POUSSETTE_VIOLET'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[31]), 500, false);
					Application.m_servos_ax.setPosition(SERVO_CHUCK_NORRIS, IA::DefaultSCI::CHUCK_OUVERT);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPA_POUSSETTE_VIOLET;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state ATTENTE. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ATTENTE()
{
	/* The reactions of state ATTENTE. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[66])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_ATTENTE();
					/* 'default' enter sequence for state PLACEMENT_FACE_GOLDENIUM */
					/* Entry action for state 'PLACEMENT_FACE_GOLDENIUM'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[53]), 2 * 1000, false);
					SCI_Asser_OCB::XYTeta(209, 12 * ifaceInternalSCI.invMouv, (IA::DefaultSCI::PI / 2.0) * ifaceInternalSCI.invMouv);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PLACEMENT_FACE_GOLDENIUM;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state Copy_1_DECLENCHEMENT_ACCELERATEUR_JAUNE. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DECLENCHEMENT_ACCELERATEUR_JAUNE()
{
	/* The reactions of state Copy_1_DECLENCHEMENT_ACCELERATEUR_JAUNE. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (iface.EV_ConvergenceMvt_raised || timeEvents[67])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DECLENCHEMENT_ACCELERATEUR_JAUNE();
					/* 'default' enter sequence for state FIN_POUSSETTE_JAUNE */
					/* Entry action for state 'FIN_POUSSETTE_JAUNE'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[59]), 500, false);
					Application.m_servos_ax.setPosition(SERVO_CHUCK_NORRIS, IA::DefaultSCI::CHUCK_FERME);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN_POUSSETTE_JAUNE;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state Copy_1_DECLENCHEMENT_ACCELERATEUR_VIOLET. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DECLENCHEMENT_ACCELERATEUR_VIOLET()
{
	/* The reactions of state Copy_1_DECLENCHEMENT_ACCELERATEUR_VIOLET. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (iface.EV_ConvergenceMvt_raised || timeEvents[68])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DECLENCHEMENT_ACCELERATEUR_VIOLET();
					/* 'default' enter sequence for state Copy_2_DECLENCHEMENT_ACCELERATEUR_VIOLET */
					/* Entry action for state 'Copy_2_DECLENCHEMENT_ACCELERATEUR_VIOLET'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[71]), 2 * 1000, false);
					SCI_Asser_OCB::DistanceAngle(19, 0);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_DECLENCHEMENT_ACCELERATEUR_VIOLET;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state Copy_2_DECLENCHEMENT_ACCELERATEUR_JAUNE. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_DECLENCHEMENT_ACCELERATEUR_JAUNE()
{
	/* The reactions of state Copy_2_DECLENCHEMENT_ACCELERATEUR_JAUNE. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (iface.EV_ConvergenceMvt_raised || timeEvents[69])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_DECLENCHEMENT_ACCELERATEUR_JAUNE();
					/* 'default' enter sequence for state Copy_3_DECLENCHEMENT_ACCELERATEUR_JAUNE */
					/* Entry action for state 'Copy_3_DECLENCHEMENT_ACCELERATEUR_JAUNE'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[70]), 2 * 1000, false);
					SCI_Asser_OCB::DistanceAngle(-19, IA::DefaultSCI::PI);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_DECLENCHEMENT_ACCELERATEUR_JAUNE;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state Copy_3_DECLENCHEMENT_ACCELERATEUR_JAUNE. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_DECLENCHEMENT_ACCELERATEUR_JAUNE()
{
	/* The reactions of state Copy_3_DECLENCHEMENT_ACCELERATEUR_JAUNE. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (iface.EV_ConvergenceMvt_raised || timeEvents[70])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_DECLENCHEMENT_ACCELERATEUR_JAUNE();
					/* 'default' enter sequence for state Copy_1_DECLENCHEMENT_ACCELERATEUR_JAUNE */
					/* Entry action for state 'Copy_1_DECLENCHEMENT_ACCELERATEUR_JAUNE'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[67]), 2 * 1000, false);
					SCI_Asser_OCB::DistanceAngle(15, IA::DefaultSCI::PI);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_1_DECLENCHEMENT_ACCELERATEUR_JAUNE;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state Copy_2_DECLENCHEMENT_ACCELERATEUR_VIOLET. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_DECLENCHEMENT_ACCELERATEUR_VIOLET()
{
	/* The reactions of state Copy_2_DECLENCHEMENT_ACCELERATEUR_VIOLET. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (iface.EV_ConvergenceMvt_raised || timeEvents[71])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_2_DECLENCHEMENT_ACCELERATEUR_VIOLET();
					/* 'default' enter sequence for state Copy_3_DECLENCHEMENT_ACCELERATEUR_VIOLET */
					/* Entry action for state 'Copy_3_DECLENCHEMENT_ACCELERATEUR_VIOLET'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[72]), 2 * 1000, false);
					SCI_Asser_OCB::DistanceAngle(-14, 0);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_DECLENCHEMENT_ACCELERATEUR_VIOLET;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state Copy_3_DECLENCHEMENT_ACCELERATEUR_VIOLET. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_DECLENCHEMENT_ACCELERATEUR_VIOLET()
{
	/* The reactions of state Copy_3_DECLENCHEMENT_ACCELERATEUR_VIOLET. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence2 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (iface.EV_ConvergenceMvt_raised || timeEvents[72])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_Copy_3_DECLENCHEMENT_ACCELERATEUR_VIOLET();
					/* 'default' enter sequence for state FIN_POUSSETTE_VIOLET */
					/* Entry action for state 'FIN_POUSSETTE_VIOLET'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[64]), 500, false);
					Application.m_servos_ax.setPosition(SERVO_CHUCK_NORRIS, IA::DefaultSCI::CHUCK_FERME);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_FIN_POUSSETTE_VIOLET;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state SEQUENCE_01. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_01()
{
	/* The reactions of state SEQUENCE_01. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if (ifaceInternalSCI.sequence1)
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
			/* 'Entry_init' enter sequence for state SEQUENCE_01_NETTOYAGE */
			/* 'Entry_init' enter sequence for region TACHE_NETTOYAGE */
			/* Default react sequence for initial entry Entry_init */
			/* 'default' enter sequence for state PARE_CHOC */
			/* Entry action for state 'PARE_CHOC'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[21]), 500, false);
			Application.m_servos_sd20.CommandePosition(SERVO_PARE_CHOC, IA::DefaultSCI::PARE_CHOC_BAS);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_PARE_CHOC;
			stateConfVectorPosition = 0;
			historyVector[0] = stateConfVector[0];
		}  else
		{
			if (ifaceInternalSCI.sequence3)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
				/* 'Entry_init' enter sequence for state SEQUENCE_03_DISTRIBUTEUR */
				/* 'Entry_init' enter sequence for region TACHE_DISTRIBUTEUR */
				/* Default react sequence for initial entry Entry_init */
				/* 'default' enter sequence for state MAINTIEN_KMAR_AR */
				/* Entry action for state 'MAINTIEN_KMAR_AR'. */
				timer->setTimer(this, (sc_eventid)(&timeEvents[96]), 40, false);
				Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARG, IA::DefaultSCI::KMAR_G_HAUT);
				Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARD, IA::DefaultSCI::KMAR_D_HAUT);
				stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MAINTIEN_KMAR_AR;
				stateConfVectorPosition = 0;
				historyVector[2] = stateConfVector[0];
			}  else
			{
				if (ifaceInternalSCI.sequence2)
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
					/* 'Entry_init' enter sequence for state SEQUENCE_02_GOLDENIUM */
					/* 'Entry_init' enter sequence for region TACHE_GOLDENIUM */
					/* Default react sequence for initial entry Entry_init */
					/* 'default' enter sequence for state PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE */
					/* Entry action for state 'PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[30]), 50, false);
					Application.m_servos_ax.setPosition(SERVO_VENTOUSE_AV_HORIZ, 512);
					Application.m_servos_sd20.CommandePosition(SERVO_PARE_CHOC, IA::DefaultSCI::PARE_CHOC_HAUT);
					iface.evit_choix_strategie = ((int32_t) EVITEMENT_NORMAL);
					iface.evit_nombre_max_tentatives = 2;
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				}  else
				{
					if (ifaceInternalSCI.sequence4)
					{ 
						exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
						/* 'Entry_init' enter sequence for state SEQUENCE_04_ATOME_DEPART */
						/* 'Entry_init' enter sequence for region TACHE_RAMASSAGE_ATOME_DEPART */
						/* Default react sequence for initial entry Entry_init */
						/* 'default' enter sequence for state DESCENTE PARECHOC */
						/* Entry action for state 'DESCENTE PARECHOC'. */
						timer->setTimer(this, (sc_eventid)(&timeEvents[112]), 1 * 1000, false);
						Application.m_servos_sd20.CommandePosition(SERVO_PARE_CHOC, IA::DefaultSCI::PARE_CHOC_BAS);
						stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DESCENTE_PARECHOC;
						stateConfVectorPosition = 0;
						historyVector[4] = stateConfVector[0];
					}  else
					{
						if (ifaceInternalSCI.sequence5)
						{ 
							exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
							/* 'Entry_init' enter sequence for state SEQUENCE_05_RAMASSAGE_ZONE_CHAOS */
							/* 'Entry_init' enter sequence for region TACHE_RAMASSAGE_ZONE_CHAOS */
							/* Default react sequence for initial entry Entry_init */
							/* 'default' enter sequence for state DEPLACEMENT_RAMASSAGE_ATOME */
							/* Entry action for state 'DEPLACEMENT_RAMASSAGE_ATOME'. */
							timer->setTimer(this, (sc_eventid)(&timeEvents[97]), 2 * 1000, false);
							SCI_Asser_OCB::XYTeta(39.5, -57 * ifaceInternalSCI.invMouv, 0);
							stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEPLACEMENT_RAMASSAGE_ATOME;
							stateConfVectorPosition = 0;
							historyVector[3] = stateConfVector[0];
						}  else
						{
							if (ifaceInternalSCI.sequence6)
							{ 
								exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
								/* 'Entry_init' enter sequence for state SEQUENCE_06_FIN_HOMOLO */
								/* 'Entry_init' enter sequence for region STRATEGIE_FIN_HOMOLO */
								/* Default react sequence for initial entry Entry_init */
								/* 'default' enter sequence for state MAINTIEN_KMAR_AR */
								/* Entry action for state 'MAINTIEN_KMAR_AR'. */
								timer->setTimer(this, (sc_eventid)(&timeEvents[128]), 40, false);
								Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARG, IA::DefaultSCI::KMAR_G_HAUT);
								Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARD, IA::DefaultSCI::KMAR_D_HAUT);
								stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_MAINTIEN_KMAR_AR;
								stateConfVectorPosition = 0;
								historyVector[5] = stateConfVector[0];
							}  else
							{
								exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_01();
								/* Default enter sequence for state null */
								stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__final_;
								stateConfVectorPosition = 0;
							}
						}
					}
				}
			}
		}
	}
}

/* The reactions of state SEQUENCE_02. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_02()
{
	/* The reactions of state SEQUENCE_02. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if (ifaceInternalSCI.sequence1)
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
			/* 'Entry_init' enter sequence for state SEQUENCE_01_NETTOYAGE */
			/* 'Entry_init' enter sequence for region TACHE_NETTOYAGE */
			/* Default react sequence for initial entry Entry_init */
			/* 'default' enter sequence for state PARE_CHOC */
			/* Entry action for state 'PARE_CHOC'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[21]), 500, false);
			Application.m_servos_sd20.CommandePosition(SERVO_PARE_CHOC, IA::DefaultSCI::PARE_CHOC_BAS);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_PARE_CHOC;
			stateConfVectorPosition = 0;
			historyVector[0] = stateConfVector[0];
		}  else
		{
			if (ifaceInternalSCI.sequence3)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
				/* 'Entry_init' enter sequence for state SEQUENCE_03_DISTRIBUTEUR */
				/* 'Entry_init' enter sequence for region TACHE_DISTRIBUTEUR */
				/* Default react sequence for initial entry Entry_init */
				/* 'default' enter sequence for state MAINTIEN_KMAR_AR */
				/* Entry action for state 'MAINTIEN_KMAR_AR'. */
				timer->setTimer(this, (sc_eventid)(&timeEvents[96]), 40, false);
				Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARG, IA::DefaultSCI::KMAR_G_HAUT);
				Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARD, IA::DefaultSCI::KMAR_D_HAUT);
				stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MAINTIEN_KMAR_AR;
				stateConfVectorPosition = 0;
				historyVector[2] = stateConfVector[0];
			}  else
			{
				if (ifaceInternalSCI.sequence2)
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
					/* 'Entry_init' enter sequence for state SEQUENCE_02_GOLDENIUM */
					/* 'Entry_init' enter sequence for region TACHE_GOLDENIUM */
					/* Default react sequence for initial entry Entry_init */
					/* 'default' enter sequence for state PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE */
					/* Entry action for state 'PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[30]), 50, false);
					Application.m_servos_ax.setPosition(SERVO_VENTOUSE_AV_HORIZ, 512);
					Application.m_servos_sd20.CommandePosition(SERVO_PARE_CHOC, IA::DefaultSCI::PARE_CHOC_HAUT);
					iface.evit_choix_strategie = ((int32_t) EVITEMENT_NORMAL);
					iface.evit_nombre_max_tentatives = 2;
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				}  else
				{
					if (ifaceInternalSCI.sequence4)
					{ 
						exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
						/* 'Entry_init' enter sequence for state SEQUENCE_04_ATOME_DEPART */
						/* 'Entry_init' enter sequence for region TACHE_RAMASSAGE_ATOME_DEPART */
						/* Default react sequence for initial entry Entry_init */
						/* 'default' enter sequence for state DESCENTE PARECHOC */
						/* Entry action for state 'DESCENTE PARECHOC'. */
						timer->setTimer(this, (sc_eventid)(&timeEvents[112]), 1 * 1000, false);
						Application.m_servos_sd20.CommandePosition(SERVO_PARE_CHOC, IA::DefaultSCI::PARE_CHOC_BAS);
						stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DESCENTE_PARECHOC;
						stateConfVectorPosition = 0;
						historyVector[4] = stateConfVector[0];
					}  else
					{
						if (ifaceInternalSCI.sequence5)
						{ 
							exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
							/* 'Entry_init' enter sequence for state SEQUENCE_05_RAMASSAGE_ZONE_CHAOS */
							/* 'Entry_init' enter sequence for region TACHE_RAMASSAGE_ZONE_CHAOS */
							/* Default react sequence for initial entry Entry_init */
							/* 'default' enter sequence for state DEPLACEMENT_RAMASSAGE_ATOME */
							/* Entry action for state 'DEPLACEMENT_RAMASSAGE_ATOME'. */
							timer->setTimer(this, (sc_eventid)(&timeEvents[97]), 2 * 1000, false);
							SCI_Asser_OCB::XYTeta(39.5, -57 * ifaceInternalSCI.invMouv, 0);
							stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEPLACEMENT_RAMASSAGE_ATOME;
							stateConfVectorPosition = 0;
							historyVector[3] = stateConfVector[0];
						}  else
						{
							if (ifaceInternalSCI.sequence6)
							{ 
								exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
								/* 'Entry_init' enter sequence for state SEQUENCE_06_FIN_HOMOLO */
								/* 'Entry_init' enter sequence for region STRATEGIE_FIN_HOMOLO */
								/* Default react sequence for initial entry Entry_init */
								/* 'default' enter sequence for state MAINTIEN_KMAR_AR */
								/* Entry action for state 'MAINTIEN_KMAR_AR'. */
								timer->setTimer(this, (sc_eventid)(&timeEvents[128]), 40, false);
								Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARG, IA::DefaultSCI::KMAR_G_HAUT);
								Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARD, IA::DefaultSCI::KMAR_D_HAUT);
								stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_MAINTIEN_KMAR_AR;
								stateConfVectorPosition = 0;
								historyVector[5] = stateConfVector[0];
							}  else
							{
								exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_02();
								/* Default enter sequence for state null */
								stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__final_;
								stateConfVectorPosition = 0;
							}
						}
					}
				}
			}
		}
	}
}

/* The reactions of state null. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__final_()
{
	/* The reactions of state null. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if (ifaceInternalSCI.sequence1)
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
			/* 'Entry_init' enter sequence for state SEQUENCE_01_NETTOYAGE */
			/* 'Entry_init' enter sequence for region TACHE_NETTOYAGE */
			/* Default react sequence for initial entry Entry_init */
			/* 'default' enter sequence for state PARE_CHOC */
			/* Entry action for state 'PARE_CHOC'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[21]), 500, false);
			Application.m_servos_sd20.CommandePosition(SERVO_PARE_CHOC, IA::DefaultSCI::PARE_CHOC_BAS);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_PARE_CHOC;
			stateConfVectorPosition = 0;
			historyVector[0] = stateConfVector[0];
		}  else
		{
			if (ifaceInternalSCI.sequence3)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
				/* 'Entry_init' enter sequence for state SEQUENCE_03_DISTRIBUTEUR */
				/* 'Entry_init' enter sequence for region TACHE_DISTRIBUTEUR */
				/* Default react sequence for initial entry Entry_init */
				/* 'default' enter sequence for state MAINTIEN_KMAR_AR */
				/* Entry action for state 'MAINTIEN_KMAR_AR'. */
				timer->setTimer(this, (sc_eventid)(&timeEvents[96]), 40, false);
				Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARG, IA::DefaultSCI::KMAR_G_HAUT);
				Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARD, IA::DefaultSCI::KMAR_D_HAUT);
				stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MAINTIEN_KMAR_AR;
				stateConfVectorPosition = 0;
				historyVector[2] = stateConfVector[0];
			}  else
			{
				if (ifaceInternalSCI.sequence2)
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
					/* 'Entry_init' enter sequence for state SEQUENCE_02_GOLDENIUM */
					/* 'Entry_init' enter sequence for region TACHE_GOLDENIUM */
					/* Default react sequence for initial entry Entry_init */
					/* 'default' enter sequence for state PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE */
					/* Entry action for state 'PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[30]), 50, false);
					Application.m_servos_ax.setPosition(SERVO_VENTOUSE_AV_HORIZ, 512);
					Application.m_servos_sd20.CommandePosition(SERVO_PARE_CHOC, IA::DefaultSCI::PARE_CHOC_HAUT);
					iface.evit_choix_strategie = ((int32_t) EVITEMENT_NORMAL);
					iface.evit_nombre_max_tentatives = 2;
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				}  else
				{
					if (ifaceInternalSCI.sequence4)
					{ 
						exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
						/* 'Entry_init' enter sequence for state SEQUENCE_04_ATOME_DEPART */
						/* 'Entry_init' enter sequence for region TACHE_RAMASSAGE_ATOME_DEPART */
						/* Default react sequence for initial entry Entry_init */
						/* 'default' enter sequence for state DESCENTE PARECHOC */
						/* Entry action for state 'DESCENTE PARECHOC'. */
						timer->setTimer(this, (sc_eventid)(&timeEvents[112]), 1 * 1000, false);
						Application.m_servos_sd20.CommandePosition(SERVO_PARE_CHOC, IA::DefaultSCI::PARE_CHOC_BAS);
						stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DESCENTE_PARECHOC;
						stateConfVectorPosition = 0;
						historyVector[4] = stateConfVector[0];
					}  else
					{
						if (ifaceInternalSCI.sequence5)
						{ 
							exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
							/* 'Entry_init' enter sequence for state SEQUENCE_05_RAMASSAGE_ZONE_CHAOS */
							/* 'Entry_init' enter sequence for region TACHE_RAMASSAGE_ZONE_CHAOS */
							/* Default react sequence for initial entry Entry_init */
							/* 'default' enter sequence for state DEPLACEMENT_RAMASSAGE_ATOME */
							/* Entry action for state 'DEPLACEMENT_RAMASSAGE_ATOME'. */
							timer->setTimer(this, (sc_eventid)(&timeEvents[97]), 2 * 1000, false);
							SCI_Asser_OCB::XYTeta(39.5, -57 * ifaceInternalSCI.invMouv, 0);
							stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEPLACEMENT_RAMASSAGE_ATOME;
							stateConfVectorPosition = 0;
							historyVector[3] = stateConfVector[0];
						}  else
						{
							if (ifaceInternalSCI.sequence6)
							{ 
								exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
								/* 'Entry_init' enter sequence for state SEQUENCE_06_FIN_HOMOLO */
								/* 'Entry_init' enter sequence for region STRATEGIE_FIN_HOMOLO */
								/* Default react sequence for initial entry Entry_init */
								/* 'default' enter sequence for state MAINTIEN_KMAR_AR */
								/* Entry action for state 'MAINTIEN_KMAR_AR'. */
								timer->setTimer(this, (sc_eventid)(&timeEvents[128]), 40, false);
								Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARG, IA::DefaultSCI::KMAR_G_HAUT);
								Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARD, IA::DefaultSCI::KMAR_D_HAUT);
								stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_MAINTIEN_KMAR_AR;
								stateConfVectorPosition = 0;
								historyVector[5] = stateConfVector[0];
							} 
						}
					}
				}
			}
		}
	}
}

/* The reactions of state SEQUENCE_03. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_03()
{
	/* The reactions of state SEQUENCE_03. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if (ifaceInternalSCI.sequence1)
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
			/* 'Entry_init' enter sequence for state SEQUENCE_01_NETTOYAGE */
			/* 'Entry_init' enter sequence for region TACHE_NETTOYAGE */
			/* Default react sequence for initial entry Entry_init */
			/* 'default' enter sequence for state PARE_CHOC */
			/* Entry action for state 'PARE_CHOC'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[21]), 500, false);
			Application.m_servos_sd20.CommandePosition(SERVO_PARE_CHOC, IA::DefaultSCI::PARE_CHOC_BAS);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_PARE_CHOC;
			stateConfVectorPosition = 0;
			historyVector[0] = stateConfVector[0];
		}  else
		{
			if (ifaceInternalSCI.sequence3)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
				/* 'Entry_init' enter sequence for state SEQUENCE_03_DISTRIBUTEUR */
				/* 'Entry_init' enter sequence for region TACHE_DISTRIBUTEUR */
				/* Default react sequence for initial entry Entry_init */
				/* 'default' enter sequence for state MAINTIEN_KMAR_AR */
				/* Entry action for state 'MAINTIEN_KMAR_AR'. */
				timer->setTimer(this, (sc_eventid)(&timeEvents[96]), 40, false);
				Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARG, IA::DefaultSCI::KMAR_G_HAUT);
				Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARD, IA::DefaultSCI::KMAR_D_HAUT);
				stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MAINTIEN_KMAR_AR;
				stateConfVectorPosition = 0;
				historyVector[2] = stateConfVector[0];
			}  else
			{
				if (ifaceInternalSCI.sequence2)
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
					/* 'Entry_init' enter sequence for state SEQUENCE_02_GOLDENIUM */
					/* 'Entry_init' enter sequence for region TACHE_GOLDENIUM */
					/* Default react sequence for initial entry Entry_init */
					/* 'default' enter sequence for state PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE */
					/* Entry action for state 'PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[30]), 50, false);
					Application.m_servos_ax.setPosition(SERVO_VENTOUSE_AV_HORIZ, 512);
					Application.m_servos_sd20.CommandePosition(SERVO_PARE_CHOC, IA::DefaultSCI::PARE_CHOC_HAUT);
					iface.evit_choix_strategie = ((int32_t) EVITEMENT_NORMAL);
					iface.evit_nombre_max_tentatives = 2;
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				}  else
				{
					if (ifaceInternalSCI.sequence4)
					{ 
						exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
						/* 'Entry_init' enter sequence for state SEQUENCE_04_ATOME_DEPART */
						/* 'Entry_init' enter sequence for region TACHE_RAMASSAGE_ATOME_DEPART */
						/* Default react sequence for initial entry Entry_init */
						/* 'default' enter sequence for state DESCENTE PARECHOC */
						/* Entry action for state 'DESCENTE PARECHOC'. */
						timer->setTimer(this, (sc_eventid)(&timeEvents[112]), 1 * 1000, false);
						Application.m_servos_sd20.CommandePosition(SERVO_PARE_CHOC, IA::DefaultSCI::PARE_CHOC_BAS);
						stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DESCENTE_PARECHOC;
						stateConfVectorPosition = 0;
						historyVector[4] = stateConfVector[0];
					}  else
					{
						if (ifaceInternalSCI.sequence5)
						{ 
							exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
							/* 'Entry_init' enter sequence for state SEQUENCE_05_RAMASSAGE_ZONE_CHAOS */
							/* 'Entry_init' enter sequence for region TACHE_RAMASSAGE_ZONE_CHAOS */
							/* Default react sequence for initial entry Entry_init */
							/* 'default' enter sequence for state DEPLACEMENT_RAMASSAGE_ATOME */
							/* Entry action for state 'DEPLACEMENT_RAMASSAGE_ATOME'. */
							timer->setTimer(this, (sc_eventid)(&timeEvents[97]), 2 * 1000, false);
							SCI_Asser_OCB::XYTeta(39.5, -57 * ifaceInternalSCI.invMouv, 0);
							stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEPLACEMENT_RAMASSAGE_ATOME;
							stateConfVectorPosition = 0;
							historyVector[3] = stateConfVector[0];
						}  else
						{
							if (ifaceInternalSCI.sequence6)
							{ 
								exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
								/* 'Entry_init' enter sequence for state SEQUENCE_06_FIN_HOMOLO */
								/* 'Entry_init' enter sequence for region STRATEGIE_FIN_HOMOLO */
								/* Default react sequence for initial entry Entry_init */
								/* 'default' enter sequence for state MAINTIEN_KMAR_AR */
								/* Entry action for state 'MAINTIEN_KMAR_AR'. */
								timer->setTimer(this, (sc_eventid)(&timeEvents[128]), 40, false);
								Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARG, IA::DefaultSCI::KMAR_G_HAUT);
								Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARD, IA::DefaultSCI::KMAR_D_HAUT);
								stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_MAINTIEN_KMAR_AR;
								stateConfVectorPosition = 0;
								historyVector[5] = stateConfVector[0];
							}  else
							{
								exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_03();
								/* Default enter sequence for state null */
								stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__final_;
								stateConfVectorPosition = 0;
							}
						}
					}
				}
			}
		}
	}
}

/* The reactions of state AUCUNE_SEQUENCE. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_AUCUNE_SEQUENCE()
{
	/* The reactions of state AUCUNE_SEQUENCE. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if (ifaceInternalSCI.sequence1)
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
			/* 'Entry_init' enter sequence for state SEQUENCE_01_NETTOYAGE */
			/* 'Entry_init' enter sequence for region TACHE_NETTOYAGE */
			/* Default react sequence for initial entry Entry_init */
			/* 'default' enter sequence for state PARE_CHOC */
			/* Entry action for state 'PARE_CHOC'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[21]), 500, false);
			Application.m_servos_sd20.CommandePosition(SERVO_PARE_CHOC, IA::DefaultSCI::PARE_CHOC_BAS);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_PARE_CHOC;
			stateConfVectorPosition = 0;
			historyVector[0] = stateConfVector[0];
		}  else
		{
			if (ifaceInternalSCI.sequence3)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
				/* 'Entry_init' enter sequence for state SEQUENCE_03_DISTRIBUTEUR */
				/* 'Entry_init' enter sequence for region TACHE_DISTRIBUTEUR */
				/* Default react sequence for initial entry Entry_init */
				/* 'default' enter sequence for state MAINTIEN_KMAR_AR */
				/* Entry action for state 'MAINTIEN_KMAR_AR'. */
				timer->setTimer(this, (sc_eventid)(&timeEvents[96]), 40, false);
				Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARG, IA::DefaultSCI::KMAR_G_HAUT);
				Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARD, IA::DefaultSCI::KMAR_D_HAUT);
				stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MAINTIEN_KMAR_AR;
				stateConfVectorPosition = 0;
				historyVector[2] = stateConfVector[0];
			}  else
			{
				if (ifaceInternalSCI.sequence2)
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
					/* 'Entry_init' enter sequence for state SEQUENCE_02_GOLDENIUM */
					/* 'Entry_init' enter sequence for region TACHE_GOLDENIUM */
					/* Default react sequence for initial entry Entry_init */
					/* 'default' enter sequence for state PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE */
					/* Entry action for state 'PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[30]), 50, false);
					Application.m_servos_ax.setPosition(SERVO_VENTOUSE_AV_HORIZ, 512);
					Application.m_servos_sd20.CommandePosition(SERVO_PARE_CHOC, IA::DefaultSCI::PARE_CHOC_HAUT);
					iface.evit_choix_strategie = ((int32_t) EVITEMENT_NORMAL);
					iface.evit_nombre_max_tentatives = 2;
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				}  else
				{
					if (ifaceInternalSCI.sequence4)
					{ 
						exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
						/* 'Entry_init' enter sequence for state SEQUENCE_04_ATOME_DEPART */
						/* 'Entry_init' enter sequence for region TACHE_RAMASSAGE_ATOME_DEPART */
						/* Default react sequence for initial entry Entry_init */
						/* 'default' enter sequence for state DESCENTE PARECHOC */
						/* Entry action for state 'DESCENTE PARECHOC'. */
						timer->setTimer(this, (sc_eventid)(&timeEvents[112]), 1 * 1000, false);
						Application.m_servos_sd20.CommandePosition(SERVO_PARE_CHOC, IA::DefaultSCI::PARE_CHOC_BAS);
						stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DESCENTE_PARECHOC;
						stateConfVectorPosition = 0;
						historyVector[4] = stateConfVector[0];
					}  else
					{
						if (ifaceInternalSCI.sequence5)
						{ 
							exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
							/* 'Entry_init' enter sequence for state SEQUENCE_05_RAMASSAGE_ZONE_CHAOS */
							/* 'Entry_init' enter sequence for region TACHE_RAMASSAGE_ZONE_CHAOS */
							/* Default react sequence for initial entry Entry_init */
							/* 'default' enter sequence for state DEPLACEMENT_RAMASSAGE_ATOME */
							/* Entry action for state 'DEPLACEMENT_RAMASSAGE_ATOME'. */
							timer->setTimer(this, (sc_eventid)(&timeEvents[97]), 2 * 1000, false);
							SCI_Asser_OCB::XYTeta(39.5, -57 * ifaceInternalSCI.invMouv, 0);
							stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEPLACEMENT_RAMASSAGE_ATOME;
							stateConfVectorPosition = 0;
							historyVector[3] = stateConfVector[0];
						}  else
						{
							if (ifaceInternalSCI.sequence6)
							{ 
								exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
								/* 'Entry_init' enter sequence for state SEQUENCE_06_FIN_HOMOLO */
								/* 'Entry_init' enter sequence for region STRATEGIE_FIN_HOMOLO */
								/* Default react sequence for initial entry Entry_init */
								/* 'default' enter sequence for state MAINTIEN_KMAR_AR */
								/* Entry action for state 'MAINTIEN_KMAR_AR'. */
								timer->setTimer(this, (sc_eventid)(&timeEvents[128]), 40, false);
								Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARG, IA::DefaultSCI::KMAR_G_HAUT);
								Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARD, IA::DefaultSCI::KMAR_D_HAUT);
								stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_MAINTIEN_KMAR_AR;
								stateConfVectorPosition = 0;
								historyVector[5] = stateConfVector[0];
							} 
						}
					}
				}
			}
		}
	}
}

/* The reactions of state SEQUENCE_04. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_04()
{
	/* The reactions of state SEQUENCE_04. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if (ifaceInternalSCI.sequence1)
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
			/* 'Entry_init' enter sequence for state SEQUENCE_01_NETTOYAGE */
			/* 'Entry_init' enter sequence for region TACHE_NETTOYAGE */
			/* Default react sequence for initial entry Entry_init */
			/* 'default' enter sequence for state PARE_CHOC */
			/* Entry action for state 'PARE_CHOC'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[21]), 500, false);
			Application.m_servos_sd20.CommandePosition(SERVO_PARE_CHOC, IA::DefaultSCI::PARE_CHOC_BAS);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_PARE_CHOC;
			stateConfVectorPosition = 0;
			historyVector[0] = stateConfVector[0];
		}  else
		{
			if (ifaceInternalSCI.sequence3)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
				/* 'Entry_init' enter sequence for state SEQUENCE_03_DISTRIBUTEUR */
				/* 'Entry_init' enter sequence for region TACHE_DISTRIBUTEUR */
				/* Default react sequence for initial entry Entry_init */
				/* 'default' enter sequence for state MAINTIEN_KMAR_AR */
				/* Entry action for state 'MAINTIEN_KMAR_AR'. */
				timer->setTimer(this, (sc_eventid)(&timeEvents[96]), 40, false);
				Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARG, IA::DefaultSCI::KMAR_G_HAUT);
				Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARD, IA::DefaultSCI::KMAR_D_HAUT);
				stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MAINTIEN_KMAR_AR;
				stateConfVectorPosition = 0;
				historyVector[2] = stateConfVector[0];
			}  else
			{
				if (ifaceInternalSCI.sequence2)
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
					/* 'Entry_init' enter sequence for state SEQUENCE_02_GOLDENIUM */
					/* 'Entry_init' enter sequence for region TACHE_GOLDENIUM */
					/* Default react sequence for initial entry Entry_init */
					/* 'default' enter sequence for state PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE */
					/* Entry action for state 'PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[30]), 50, false);
					Application.m_servos_ax.setPosition(SERVO_VENTOUSE_AV_HORIZ, 512);
					Application.m_servos_sd20.CommandePosition(SERVO_PARE_CHOC, IA::DefaultSCI::PARE_CHOC_HAUT);
					iface.evit_choix_strategie = ((int32_t) EVITEMENT_NORMAL);
					iface.evit_nombre_max_tentatives = 2;
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				}  else
				{
					if (ifaceInternalSCI.sequence4)
					{ 
						exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
						/* 'Entry_init' enter sequence for state SEQUENCE_04_ATOME_DEPART */
						/* 'Entry_init' enter sequence for region TACHE_RAMASSAGE_ATOME_DEPART */
						/* Default react sequence for initial entry Entry_init */
						/* 'default' enter sequence for state DESCENTE PARECHOC */
						/* Entry action for state 'DESCENTE PARECHOC'. */
						timer->setTimer(this, (sc_eventid)(&timeEvents[112]), 1 * 1000, false);
						Application.m_servos_sd20.CommandePosition(SERVO_PARE_CHOC, IA::DefaultSCI::PARE_CHOC_BAS);
						stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DESCENTE_PARECHOC;
						stateConfVectorPosition = 0;
						historyVector[4] = stateConfVector[0];
					}  else
					{
						if (ifaceInternalSCI.sequence5)
						{ 
							exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
							/* 'Entry_init' enter sequence for state SEQUENCE_05_RAMASSAGE_ZONE_CHAOS */
							/* 'Entry_init' enter sequence for region TACHE_RAMASSAGE_ZONE_CHAOS */
							/* Default react sequence for initial entry Entry_init */
							/* 'default' enter sequence for state DEPLACEMENT_RAMASSAGE_ATOME */
							/* Entry action for state 'DEPLACEMENT_RAMASSAGE_ATOME'. */
							timer->setTimer(this, (sc_eventid)(&timeEvents[97]), 2 * 1000, false);
							SCI_Asser_OCB::XYTeta(39.5, -57 * ifaceInternalSCI.invMouv, 0);
							stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEPLACEMENT_RAMASSAGE_ATOME;
							stateConfVectorPosition = 0;
							historyVector[3] = stateConfVector[0];
						}  else
						{
							if (ifaceInternalSCI.sequence6)
							{ 
								exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
								/* 'Entry_init' enter sequence for state SEQUENCE_06_FIN_HOMOLO */
								/* 'Entry_init' enter sequence for region STRATEGIE_FIN_HOMOLO */
								/* Default react sequence for initial entry Entry_init */
								/* 'default' enter sequence for state MAINTIEN_KMAR_AR */
								/* Entry action for state 'MAINTIEN_KMAR_AR'. */
								timer->setTimer(this, (sc_eventid)(&timeEvents[128]), 40, false);
								Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARG, IA::DefaultSCI::KMAR_G_HAUT);
								Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARD, IA::DefaultSCI::KMAR_D_HAUT);
								stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_MAINTIEN_KMAR_AR;
								stateConfVectorPosition = 0;
								historyVector[5] = stateConfVector[0];
							}  else
							{
								exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_04();
								/* Default enter sequence for state null */
								stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__final_;
								stateConfVectorPosition = 0;
							}
						}
					}
				}
			}
		}
	}
}

/* The reactions of state SEQUENCE_05. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_05()
{
	/* The reactions of state SEQUENCE_05. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if (ifaceInternalSCI.sequence1)
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
			/* 'Entry_init' enter sequence for state SEQUENCE_01_NETTOYAGE */
			/* 'Entry_init' enter sequence for region TACHE_NETTOYAGE */
			/* Default react sequence for initial entry Entry_init */
			/* 'default' enter sequence for state PARE_CHOC */
			/* Entry action for state 'PARE_CHOC'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[21]), 500, false);
			Application.m_servos_sd20.CommandePosition(SERVO_PARE_CHOC, IA::DefaultSCI::PARE_CHOC_BAS);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_PARE_CHOC;
			stateConfVectorPosition = 0;
			historyVector[0] = stateConfVector[0];
		}  else
		{
			if (ifaceInternalSCI.sequence3)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
				/* 'Entry_init' enter sequence for state SEQUENCE_03_DISTRIBUTEUR */
				/* 'Entry_init' enter sequence for region TACHE_DISTRIBUTEUR */
				/* Default react sequence for initial entry Entry_init */
				/* 'default' enter sequence for state MAINTIEN_KMAR_AR */
				/* Entry action for state 'MAINTIEN_KMAR_AR'. */
				timer->setTimer(this, (sc_eventid)(&timeEvents[96]), 40, false);
				Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARG, IA::DefaultSCI::KMAR_G_HAUT);
				Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARD, IA::DefaultSCI::KMAR_D_HAUT);
				stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MAINTIEN_KMAR_AR;
				stateConfVectorPosition = 0;
				historyVector[2] = stateConfVector[0];
			}  else
			{
				if (ifaceInternalSCI.sequence2)
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
					/* 'Entry_init' enter sequence for state SEQUENCE_02_GOLDENIUM */
					/* 'Entry_init' enter sequence for region TACHE_GOLDENIUM */
					/* Default react sequence for initial entry Entry_init */
					/* 'default' enter sequence for state PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE */
					/* Entry action for state 'PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[30]), 50, false);
					Application.m_servos_ax.setPosition(SERVO_VENTOUSE_AV_HORIZ, 512);
					Application.m_servos_sd20.CommandePosition(SERVO_PARE_CHOC, IA::DefaultSCI::PARE_CHOC_HAUT);
					iface.evit_choix_strategie = ((int32_t) EVITEMENT_NORMAL);
					iface.evit_nombre_max_tentatives = 2;
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				}  else
				{
					if (ifaceInternalSCI.sequence4)
					{ 
						exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
						/* 'Entry_init' enter sequence for state SEQUENCE_04_ATOME_DEPART */
						/* 'Entry_init' enter sequence for region TACHE_RAMASSAGE_ATOME_DEPART */
						/* Default react sequence for initial entry Entry_init */
						/* 'default' enter sequence for state DESCENTE PARECHOC */
						/* Entry action for state 'DESCENTE PARECHOC'. */
						timer->setTimer(this, (sc_eventid)(&timeEvents[112]), 1 * 1000, false);
						Application.m_servos_sd20.CommandePosition(SERVO_PARE_CHOC, IA::DefaultSCI::PARE_CHOC_BAS);
						stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DESCENTE_PARECHOC;
						stateConfVectorPosition = 0;
						historyVector[4] = stateConfVector[0];
					}  else
					{
						if (ifaceInternalSCI.sequence5)
						{ 
							exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
							/* 'Entry_init' enter sequence for state SEQUENCE_05_RAMASSAGE_ZONE_CHAOS */
							/* 'Entry_init' enter sequence for region TACHE_RAMASSAGE_ZONE_CHAOS */
							/* Default react sequence for initial entry Entry_init */
							/* 'default' enter sequence for state DEPLACEMENT_RAMASSAGE_ATOME */
							/* Entry action for state 'DEPLACEMENT_RAMASSAGE_ATOME'. */
							timer->setTimer(this, (sc_eventid)(&timeEvents[97]), 2 * 1000, false);
							SCI_Asser_OCB::XYTeta(39.5, -57 * ifaceInternalSCI.invMouv, 0);
							stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEPLACEMENT_RAMASSAGE_ATOME;
							stateConfVectorPosition = 0;
							historyVector[3] = stateConfVector[0];
						}  else
						{
							if (ifaceInternalSCI.sequence6)
							{ 
								exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
								/* 'Entry_init' enter sequence for state SEQUENCE_06_FIN_HOMOLO */
								/* 'Entry_init' enter sequence for region STRATEGIE_FIN_HOMOLO */
								/* Default react sequence for initial entry Entry_init */
								/* 'default' enter sequence for state MAINTIEN_KMAR_AR */
								/* Entry action for state 'MAINTIEN_KMAR_AR'. */
								timer->setTimer(this, (sc_eventid)(&timeEvents[128]), 40, false);
								Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARG, IA::DefaultSCI::KMAR_G_HAUT);
								Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARD, IA::DefaultSCI::KMAR_D_HAUT);
								stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_MAINTIEN_KMAR_AR;
								stateConfVectorPosition = 0;
								historyVector[5] = stateConfVector[0];
							}  else
							{
								exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_05();
								/* Default enter sequence for state null */
								stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__final_;
								stateConfVectorPosition = 0;
							}
						}
					}
				}
			}
		}
	}
}

/* The reactions of state SEQUENCE_06. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_06()
{
	/* The reactions of state SEQUENCE_06. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if (ifaceInternalSCI.sequence1)
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
			/* 'Entry_init' enter sequence for state SEQUENCE_01_NETTOYAGE */
			/* 'Entry_init' enter sequence for region TACHE_NETTOYAGE */
			/* Default react sequence for initial entry Entry_init */
			/* 'default' enter sequence for state PARE_CHOC */
			/* Entry action for state 'PARE_CHOC'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[21]), 500, false);
			Application.m_servos_sd20.CommandePosition(SERVO_PARE_CHOC, IA::DefaultSCI::PARE_CHOC_BAS);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE_PARE_CHOC;
			stateConfVectorPosition = 0;
			historyVector[0] = stateConfVector[0];
		}  else
		{
			if (ifaceInternalSCI.sequence3)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
				/* 'Entry_init' enter sequence for state SEQUENCE_03_DISTRIBUTEUR */
				/* 'Entry_init' enter sequence for region TACHE_DISTRIBUTEUR */
				/* Default react sequence for initial entry Entry_init */
				/* 'default' enter sequence for state MAINTIEN_KMAR_AR */
				/* Entry action for state 'MAINTIEN_KMAR_AR'. */
				timer->setTimer(this, (sc_eventid)(&timeEvents[96]), 40, false);
				Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARG, IA::DefaultSCI::KMAR_G_HAUT);
				Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARD, IA::DefaultSCI::KMAR_D_HAUT);
				stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MAINTIEN_KMAR_AR;
				stateConfVectorPosition = 0;
				historyVector[2] = stateConfVector[0];
			}  else
			{
				if (ifaceInternalSCI.sequence2)
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
					/* 'Entry_init' enter sequence for state SEQUENCE_02_GOLDENIUM */
					/* 'Entry_init' enter sequence for region TACHE_GOLDENIUM */
					/* Default react sequence for initial entry Entry_init */
					/* 'default' enter sequence for state PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE */
					/* Entry action for state 'PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[30]), 50, false);
					Application.m_servos_ax.setPosition(SERVO_VENTOUSE_AV_HORIZ, 512);
					Application.m_servos_sd20.CommandePosition(SERVO_PARE_CHOC, IA::DefaultSCI::PARE_CHOC_HAUT);
					iface.evit_choix_strategie = ((int32_t) EVITEMENT_NORMAL);
					iface.evit_nombre_max_tentatives = 2;
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE_VENTOUSE_DROITE;
					stateConfVectorPosition = 0;
					historyVector[1] = stateConfVector[0];
				}  else
				{
					if (ifaceInternalSCI.sequence4)
					{ 
						exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
						/* 'Entry_init' enter sequence for state SEQUENCE_04_ATOME_DEPART */
						/* 'Entry_init' enter sequence for region TACHE_RAMASSAGE_ATOME_DEPART */
						/* Default react sequence for initial entry Entry_init */
						/* 'default' enter sequence for state DESCENTE PARECHOC */
						/* Entry action for state 'DESCENTE PARECHOC'. */
						timer->setTimer(this, (sc_eventid)(&timeEvents[112]), 1 * 1000, false);
						Application.m_servos_sd20.CommandePosition(SERVO_PARE_CHOC, IA::DefaultSCI::PARE_CHOC_BAS);
						stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DESCENTE_PARECHOC;
						stateConfVectorPosition = 0;
						historyVector[4] = stateConfVector[0];
					}  else
					{
						if (ifaceInternalSCI.sequence5)
						{ 
							exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
							/* 'Entry_init' enter sequence for state SEQUENCE_05_RAMASSAGE_ZONE_CHAOS */
							/* 'Entry_init' enter sequence for region TACHE_RAMASSAGE_ZONE_CHAOS */
							/* Default react sequence for initial entry Entry_init */
							/* 'default' enter sequence for state DEPLACEMENT_RAMASSAGE_ATOME */
							/* Entry action for state 'DEPLACEMENT_RAMASSAGE_ATOME'. */
							timer->setTimer(this, (sc_eventid)(&timeEvents[97]), 2 * 1000, false);
							SCI_Asser_OCB::XYTeta(39.5, -57 * ifaceInternalSCI.invMouv, 0);
							stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEPLACEMENT_RAMASSAGE_ATOME;
							stateConfVectorPosition = 0;
							historyVector[3] = stateConfVector[0];
						}  else
						{
							if (ifaceInternalSCI.sequence6)
							{ 
								exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR();
								/* 'Entry_init' enter sequence for state SEQUENCE_06_FIN_HOMOLO */
								/* 'Entry_init' enter sequence for region STRATEGIE_FIN_HOMOLO */
								/* Default react sequence for initial entry Entry_init */
								/* 'default' enter sequence for state MAINTIEN_KMAR_AR */
								/* Entry action for state 'MAINTIEN_KMAR_AR'. */
								timer->setTimer(this, (sc_eventid)(&timeEvents[128]), 40, false);
								Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARG, IA::DefaultSCI::KMAR_G_HAUT);
								Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARD, IA::DefaultSCI::KMAR_D_HAUT);
								stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_MAINTIEN_KMAR_AR;
								stateConfVectorPosition = 0;
								historyVector[5] = stateConfVector[0];
							}  else
							{
								exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_06();
								/* Default enter sequence for state null */
								stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__final_;
								stateConfVectorPosition = 0;
							}
						}
					}
				}
			}
		}
	}
}

/* The reactions of state HOMOLO1. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_HOMOLO1()
{
	/* The reactions of state HOMOLO1. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if (ifaceInternalSCI.sequence0 == false)
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY();
			/* 'default' enter sequence for state SUPERVISEUR */
			/* Entry action for state 'SUPERVISEUR'. */
			ifaceInternalSCI.idx_strategy += 1;
			/* 'default' enter sequence for region TACHE_SUPERVISEUR */
			/* Default react sequence for initial entry  */
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
		}  else
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_HOMOLO1();
			/* Default enter sequence for state null */
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE__final_;
			stateConfVectorPosition = 0;
		}
	}
}

/* The reactions of state HOMOLO2. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_HOMOLO2()
{
	/* The reactions of state HOMOLO2. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if (ifaceInternalSCI.sequence0 == false)
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY();
			/* 'default' enter sequence for state SUPERVISEUR */
			/* Entry action for state 'SUPERVISEUR'. */
			ifaceInternalSCI.idx_strategy += 1;
			/* 'default' enter sequence for region TACHE_SUPERVISEUR */
			/* Default react sequence for initial entry  */
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
		}  else
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_HOMOLO2();
			/* Default enter sequence for state null */
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE__final_;
			stateConfVectorPosition = 0;
		}
	}
}

/* The reactions of state null. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE__final_()
{
	/* The reactions of state null. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if (ifaceInternalSCI.sequence0 == false)
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY();
			/* 'default' enter sequence for state SUPERVISEUR */
			/* Entry action for state 'SUPERVISEUR'. */
			ifaceInternalSCI.idx_strategy += 1;
			/* 'default' enter sequence for region TACHE_SUPERVISEUR */
			/* Default react sequence for initial entry  */
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
		} 
	}
}

/* The reactions of state STRATEGIE1. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_STRATEGIE1()
{
	/* The reactions of state STRATEGIE1. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if (ifaceInternalSCI.sequence0 == false)
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY();
			/* 'default' enter sequence for state SUPERVISEUR */
			/* Entry action for state 'SUPERVISEUR'. */
			ifaceInternalSCI.idx_strategy += 1;
			/* 'default' enter sequence for region TACHE_SUPERVISEUR */
			/* Default react sequence for initial entry  */
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
		}  else
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_STRATEGIE1();
			/* Default enter sequence for state null */
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE__final_;
			stateConfVectorPosition = 0;
		}
	}
}

/* The reactions of state STRATEGIE_PAR_DEFAUT. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_STRATEGIE_PAR_DEFAUT()
{
	/* The reactions of state STRATEGIE_PAR_DEFAUT. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if (ifaceInternalSCI.sequence0 == false)
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY();
			/* 'default' enter sequence for state SUPERVISEUR */
			/* Entry action for state 'SUPERVISEUR'. */
			ifaceInternalSCI.idx_strategy += 1;
			/* 'default' enter sequence for region TACHE_SUPERVISEUR */
			/* Default react sequence for initial entry  */
			react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
		}  else
		{
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_STRATEGIE_PAR_DEFAUT();
			/* Default enter sequence for state null */
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE__final_;
			stateConfVectorPosition = 0;
		}
	}
}

/* The reactions of state PLACEMENT_DEVANT_DISTRIBUTEUR. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PLACEMENT_DEVANT_DISTRIBUTEUR()
{
	/* The reactions of state PLACEMENT_DEVANT_DISTRIBUTEUR. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence3 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (iface.EV_ConvergenceMvt_raised || timeEvents[73])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PLACEMENT_DEVANT_DISTRIBUTEUR();
					/* 'default' enter sequence for state INIT_POSITIONS_PLATEAUX_BAS */
					/* Entry action for state 'INIT_POSITIONS_PLATEAUX_BAS'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[75]), 40, false);
					Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_G, IA::DefaultSCI::TOB_G_BAS);
					Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_D, IA::DefaultSCI::TOB_D_BAS);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_PLATEAUX_BAS;
					stateConfVectorPosition = 0;
					historyVector[2] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state DEVENTOUSAGE_ATOMES. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_DEVENTOUSAGE_ATOMES()
{
	/* The reactions of state DEVENTOUSAGE_ATOMES. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence3 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[74])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_DEVENTOUSAGE_ATOMES();
					/* 'default' enter sequence for state SECU_ELETROVANNES */
					/* Entry action for state 'SECU_ELETROVANNES'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[90]), 40, false);
					Application.m_power_switch.setOutput(EV_ARD, false);
					Application.m_power_switch.setOutput(EV_ARG, false);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_SECU_ELETROVANNES;
					stateConfVectorPosition = 0;
					historyVector[2] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state FIN_SEQUENCE. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_FIN_SEQUENCE()
{
	/* The reactions of state FIN_SEQUENCE. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence3 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_FIN_SEQUENCE();
				/* Default enter sequence for state null */
				stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR__final_;
				stateConfVectorPosition = 0;
			}
		}
	}
}

/* The reactions of state null. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR__final_()
{
	/* The reactions of state null. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence3 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			} 
		}
	}
}

/* The reactions of state INIT_POSITIONS_PLATEAUX_BAS. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_PLATEAUX_BAS()
{
	/* The reactions of state INIT_POSITIONS_PLATEAUX_BAS. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence3 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[75])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_PLATEAUX_BAS();
					/* 'default' enter sequence for state INIT_POSITIONS_BRAS_HAUT */
					/* Entry action for state 'INIT_POSITIONS_BRAS_HAUT'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[76]), 40, false);
					Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARG, IA::DefaultSCI::KMAR_G_HAUT);
					Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARD, IA::DefaultSCI::KMAR_D_HAUT);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_BRAS_HAUT;
					stateConfVectorPosition = 0;
					historyVector[2] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state INIT_POSITIONS_BRAS_HAUT. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_BRAS_HAUT()
{
	/* The reactions of state INIT_POSITIONS_BRAS_HAUT. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence3 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[76])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_BRAS_HAUT();
					/* 'default' enter sequence for state INIT_POSITIONS_VENTOUSES_HAUT_01 */
					/* Entry action for state 'INIT_POSITIONS_VENTOUSES_HAUT_01'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[77]), 40, false);
					Application.m_servos_ax.setPosition(SERVO_VENTOUSE_ARG_VERT, IA::DefaultSCI::TOUSE_G_HAUT);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_VENTOUSES_HAUT_01;
					stateConfVectorPosition = 0;
					historyVector[2] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state INIT_POSITIONS_VENTOUSES_HAUT_01. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_VENTOUSES_HAUT_01()
{
	/* The reactions of state INIT_POSITIONS_VENTOUSES_HAUT_01. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence3 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[77])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_VENTOUSES_HAUT_01();
					/* 'default' enter sequence for state INIT_POSITIONS_VENTOUSES_HAUT_02 */
					/* Entry action for state 'INIT_POSITIONS_VENTOUSES_HAUT_02'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[78]), 100, false);
					Application.m_servos_ax.setPosition(SERVO_VENTOUSE_ARD_VERT, IA::DefaultSCI::TOUSE_D_HAUT);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_VENTOUSES_HAUT_02;
					stateConfVectorPosition = 0;
					historyVector[2] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state INIT_POSITIONS_VENTOUSES_HAUT_02. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_VENTOUSES_HAUT_02()
{
	/* The reactions of state INIT_POSITIONS_VENTOUSES_HAUT_02. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence3 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[78])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_INIT_POSITIONS_VENTOUSES_HAUT_02();
					/* 'default' enter sequence for state MISE_EN_ROUTE_POMPES */
					/* Entry action for state 'MISE_EN_ROUTE_POMPES'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[79]), 1 * 1000, false);
					Application.m_power_switch.setOutput(POMPE_ARD, true);
					Application.m_power_switch.setOutput(POMPE_ARG, true);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MISE_EN_ROUTE_POMPES;
					stateConfVectorPosition = 0;
					historyVector[2] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state MISE_EN_ROUTE_POMPES. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MISE_EN_ROUTE_POMPES()
{
	/* The reactions of state MISE_EN_ROUTE_POMPES. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence3 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[79])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MISE_EN_ROUTE_POMPES();
					/* 'default' enter sequence for state ABAISSEMENT_BRAS */
					/* Entry action for state 'ABAISSEMENT_BRAS'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[80]), 500, false);
					Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARG, IA::DefaultSCI::KMAR_G_MILIEU);
					Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARD, IA::DefaultSCI::KMAR_D_MILIEU);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_ABAISSEMENT_BRAS;
					stateConfVectorPosition = 0;
					historyVector[2] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state ABAISSEMENT_BRAS. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_ABAISSEMENT_BRAS()
{
	/* The reactions of state ABAISSEMENT_BRAS. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence3 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[80])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_ABAISSEMENT_BRAS();
					/* 'default' enter sequence for state VENTOUSAGE */
					/* Entry action for state 'VENTOUSAGE'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[81]), 1500, false);
					Application.m_asservissement.CommandeManuelle(-15, -15);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VENTOUSAGE;
					stateConfVectorPosition = 0;
					historyVector[2] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state VENTOUSAGE. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VENTOUSAGE()
{
	/* The reactions of state VENTOUSAGE. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence3 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[81])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VENTOUSAGE();
					/* 'default' enter sequence for state RETIRER_ATOMES */
					/* Entry action for state 'RETIRER_ATOMES'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[82]), 2 * 1000, false);
					Application.m_asservissement.CommandeMouvementDistanceAngle(6, ifaceInternalSCI.invMouv * IA::DefaultSCI::PI / 2);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_RETIRER_ATOMES;
					stateConfVectorPosition = 0;
					historyVector[2] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state RETIRER_ATOMES. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_RETIRER_ATOMES()
{
	/* The reactions of state RETIRER_ATOMES. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence3 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (iface.EV_ConvergenceMvt_raised || timeEvents[82])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_RETIRER_ATOMES();
					/* 'default' enter sequence for state VITESSE_VENTOUSE_01 */
					/* Entry action for state 'VITESSE_VENTOUSE_01'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[83]), 40, false);
					Application.m_servos_ax.setSpeed(SERVO_VENTOUSE_ARG_VERT, 200);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VITESSE_VENTOUSE_01;
					stateConfVectorPosition = 0;
					historyVector[2] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state VITESSE_VENTOUSE_01. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VITESSE_VENTOUSE_01()
{
	/* The reactions of state VITESSE_VENTOUSE_01. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence3 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[83])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VITESSE_VENTOUSE_01();
					/* 'default' enter sequence for state VITESSE_VENTOUSE_02 */
					/* Entry action for state 'VITESSE_VENTOUSE_02'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[84]), 40, false);
					Application.m_servos_ax.setSpeed(SERVO_VENTOUSE_ARD_VERT, 200);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VITESSE_VENTOUSE_02;
					stateConfVectorPosition = 0;
					historyVector[2] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state VITESSE_VENTOUSE_02. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VITESSE_VENTOUSE_02()
{
	/* The reactions of state VITESSE_VENTOUSE_02. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence3 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[84])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_VITESSE_VENTOUSE_02();
					/* 'default' enter sequence for state PIVOTEMENT_ATOME_01 */
					/* Entry action for state 'PIVOTEMENT_ATOME_01'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[85]), 2 * 1000, false);
					Application.m_servos_ax.setPosition(SERVO_VENTOUSE_ARG_VERT, IA::DefaultSCI::TOUSE_G_BAS);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PIVOTEMENT_ATOME_01;
					stateConfVectorPosition = 0;
					historyVector[2] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state PIVOTEMENT_ATOME_01. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PIVOTEMENT_ATOME_01()
{
	/* The reactions of state PIVOTEMENT_ATOME_01. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence3 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[85])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PIVOTEMENT_ATOME_01();
					/* 'default' enter sequence for state PIVOTEMENT_ATOME_02 */
					/* Entry action for state 'PIVOTEMENT_ATOME_02'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[86]), 2 * 1000, false);
					Application.m_servos_ax.setPosition(SERVO_VENTOUSE_ARD_VERT, IA::DefaultSCI::TOUSE_D_BAS);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PIVOTEMENT_ATOME_02;
					stateConfVectorPosition = 0;
					historyVector[2] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state PIVOTEMENT_ATOME_02. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PIVOTEMENT_ATOME_02()
{
	/* The reactions of state PIVOTEMENT_ATOME_02. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence3 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[86])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PIVOTEMENT_ATOME_02();
					/* 'default' enter sequence for state POSITIONS_BRAS_HAUT_01 */
					/* Entry action for state 'POSITIONS_BRAS_HAUT_01'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[88]), 1500, false);
					Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARG, IA::DefaultSCI::KMAR_G_HAUT);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_BRAS_HAUT_01;
					stateConfVectorPosition = 0;
					historyVector[2] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state POSITIONS_PLATEAUX_MILIEU. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_MILIEU()
{
	/* The reactions of state POSITIONS_PLATEAUX_MILIEU. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence3 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[87])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_MILIEU();
					/* 'default' enter sequence for state DEVENTOUSAGE_ATOMES */
					/* Entry action for state 'DEVENTOUSAGE_ATOMES'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[74]), 1 * 1000, false);
					Application.m_power_switch.setOutput(POMPE_ARD, false);
					Application.m_power_switch.setOutput(EV_ARD, true);
					Application.m_power_switch.setOutput(POMPE_ARG, false);
					Application.m_power_switch.setOutput(EV_ARG, true);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_DEVENTOUSAGE_ATOMES;
					stateConfVectorPosition = 0;
					historyVector[2] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state POSITIONS_BRAS_HAUT_01. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_BRAS_HAUT_01()
{
	/* The reactions of state POSITIONS_BRAS_HAUT_01. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence3 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[88])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_BRAS_HAUT_01();
					/* 'default' enter sequence for state POSITIONS_BRAS_HAUT_02 */
					/* Entry action for state 'POSITIONS_BRAS_HAUT_02'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[89]), 1500, false);
					Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARD, IA::DefaultSCI::KMAR_D_HAUT);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_BRAS_HAUT_02;
					stateConfVectorPosition = 0;
					historyVector[2] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state POSITIONS_BRAS_HAUT_02. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_BRAS_HAUT_02()
{
	/* The reactions of state POSITIONS_BRAS_HAUT_02. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence3 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[89])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_BRAS_HAUT_02();
					/* 'default' enter sequence for state POSITIONS_PLATEAUX_MILIEU */
					/* Entry action for state 'POSITIONS_PLATEAUX_MILIEU'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[87]), 500, false);
					Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_G, IA::DefaultSCI::TOB_G_MILIEU);
					Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_D, IA::DefaultSCI::TOB_D_MILIEU);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_MILIEU;
					stateConfVectorPosition = 0;
					historyVector[2] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state SECU_ELETROVANNES. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_SECU_ELETROVANNES()
{
	/* The reactions of state SECU_ELETROVANNES. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence3 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[90])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_SECU_ELETROVANNES();
					/* 'default' enter sequence for state POSITIONS_PLATEAUX_BAS */
					/* Entry action for state 'POSITIONS_PLATEAUX_BAS'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[91]), 500, false);
					Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_G, IA::DefaultSCI::TOB_G_BAS);
					Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_D, IA::DefaultSCI::TOB_D_BAS);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_BAS;
					stateConfVectorPosition = 0;
					historyVector[2] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state POSITIONS_PLATEAUX_BAS. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_BAS()
{
	/* The reactions of state POSITIONS_PLATEAUX_BAS. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence3 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[91])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_BAS();
					/* 'default' enter sequence for state DEGAGEMENT_BRAS */
					/* Entry action for state 'DEGAGEMENT_BRAS'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[92]), 500, false);
					Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARG, IA::DefaultSCI::KMAR_G_MILIEU);
					Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARD, IA::DefaultSCI::KMAR_D_MILIEU);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_DEGAGEMENT_BRAS;
					stateConfVectorPosition = 0;
					historyVector[2] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state DEGAGEMENT_BRAS. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_DEGAGEMENT_BRAS()
{
	/* The reactions of state DEGAGEMENT_BRAS. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence3 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[92])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_DEGAGEMENT_BRAS();
					/* 'default' enter sequence for state POSITIONS_PLATEAUX_HAUT */
					/* Entry action for state 'POSITIONS_PLATEAUX_HAUT'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[93]), 1 * 1000, false);
					Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_G, IA::DefaultSCI::TOB_G_HAUT);
					Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_D, IA::DefaultSCI::TOB_D_HAUT);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_HAUT;
					stateConfVectorPosition = 0;
					historyVector[2] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state POSITIONS_PLATEAUX_HAUT. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_HAUT()
{
	/* The reactions of state POSITIONS_PLATEAUX_HAUT. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence3 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[93])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_POSITIONS_PLATEAUX_HAUT();
					/* 'default' enter sequence for state STOCKAGE_HORIZONTAL_ATOMES */
					/* Entry action for state 'STOCKAGE_HORIZONTAL_ATOMES'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[94]), 500, false);
					Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_G, IA::DefaultSCI::TOB_G_BAS);
					Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_D, IA::DefaultSCI::TOB_D_BAS);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_STOCKAGE_HORIZONTAL_ATOMES;
					stateConfVectorPosition = 0;
					historyVector[2] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state STOCKAGE_HORIZONTAL_ATOMES. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_STOCKAGE_HORIZONTAL_ATOMES()
{
	/* The reactions of state STOCKAGE_HORIZONTAL_ATOMES. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence3 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[94])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_STOCKAGE_HORIZONTAL_ATOMES();
					/* 'default' enter sequence for state RANGEMENT_BRAS */
					/* Entry action for state 'RANGEMENT_BRAS'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[95]), 500, false);
					Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARG, IA::DefaultSCI::KMAR_G_HAUT);
					Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARD, IA::DefaultSCI::KMAR_D_HAUT);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_RANGEMENT_BRAS;
					stateConfVectorPosition = 0;
					historyVector[2] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state RANGEMENT_BRAS. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_RANGEMENT_BRAS()
{
	/* The reactions of state RANGEMENT_BRAS. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence3 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[95])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_RANGEMENT_BRAS();
					/* 'default' enter sequence for state FIN_SEQUENCE */
					/* Entry action for state 'FIN_SEQUENCE'. */
					iface.score_grosbot += 0;
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_FIN_SEQUENCE;
					stateConfVectorPosition = 0;
					historyVector[2] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state MAINTIEN_KMAR_AR. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MAINTIEN_KMAR_AR()
{
	/* The reactions of state MAINTIEN_KMAR_AR. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence3 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[96])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_MAINTIEN_KMAR_AR();
					/* 'default' enter sequence for state PLACEMENT_DEVANT_DISTRIBUTEUR */
					/* Entry action for state 'PLACEMENT_DEVANT_DISTRIBUTEUR'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[73]), 4 * 1000, false);
					SCI_Asser_OCB::XYTeta(92, -77 * ifaceInternalSCI.invMouv, IA::DefaultSCI::PI / 2 * ifaceInternalSCI.invMouv);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR_PLACEMENT_DEVANT_DISTRIBUTEUR;
					stateConfVectorPosition = 0;
					historyVector[2] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state DEPLACEMENT_RAMASSAGE_ATOME. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEPLACEMENT_RAMASSAGE_ATOME()
{
	/* The reactions of state DEPLACEMENT_RAMASSAGE_ATOME. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence5 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (iface.EV_ConvergenceMvt_raised || timeEvents[97])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEPLACEMENT_RAMASSAGE_ATOME();
					/* 'default' enter sequence for state ACTIVATION_POMPE */
					/* Entry action for state 'ACTIVATION_POMPE'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[99]), 200, false);
					Application.m_power_switch.setOutput(POMPE_ARD, true);
					Application.m_power_switch.setOutput(POMPE_ARG, true);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_ACTIVATION_POMPE;
					stateConfVectorPosition = 0;
					historyVector[3] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state FIN_SEQUENCE. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_FIN_SEQUENCE()
{
	/* The reactions of state FIN_SEQUENCE. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence5 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_FIN_SEQUENCE();
				/* Default enter sequence for state null */
				stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS__final_;
				stateConfVectorPosition = 0;
			}
		}
	}
}

/* The reactions of state null. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS__final_()
{
	/* The reactions of state null. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence5 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			} 
		}
	}
}

/* The reactions of state GLISSSADE. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_GLISSSADE()
{
	/* The reactions of state GLISSSADE. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence5 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[98])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_GLISSSADE();
					/* 'default' enter sequence for state POSITIONS_PLATEAUX_BAS */
					/* Entry action for state 'POSITIONS_PLATEAUX_BAS'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[108]), 200, false);
					Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_G, IA::DefaultSCI::TOB_G_BAS);
					Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_D, IA::DefaultSCI::TOB_D_BAS);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_PLATEAUX_BAS;
					stateConfVectorPosition = 0;
					historyVector[3] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state ACTIVATION_POMPE. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_ACTIVATION_POMPE()
{
	/* The reactions of state ACTIVATION_POMPE. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence5 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[99])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_ACTIVATION_POMPE();
					/* 'default' enter sequence for state VITESSE_VENTOUSE_01 */
					/* Entry action for state 'VITESSE_VENTOUSE_01'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[101]), 40, false);
					Application.m_servos_ax.setSpeed(SERVO_VENTOUSE_ARG_VERT, 200);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_VITESSE_VENTOUSE_01;
					stateConfVectorPosition = 0;
					historyVector[3] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state DEVENTOUSAGE_ATOMES. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEVENTOUSAGE_ATOMES()
{
	/* The reactions of state DEVENTOUSAGE_ATOMES. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence5 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[100])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEVENTOUSAGE_ATOMES();
					/* 'default' enter sequence for state SECU_ELETROVANNES */
					/* Entry action for state 'SECU_ELETROVANNES'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[107]), 40, false);
					Application.m_power_switch.setOutput(EV_ARD, false);
					Application.m_power_switch.setOutput(EV_ARG, false);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_SECU_ELETROVANNES;
					stateConfVectorPosition = 0;
					historyVector[3] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state VITESSE_VENTOUSE_01. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_VITESSE_VENTOUSE_01()
{
	/* The reactions of state VITESSE_VENTOUSE_01. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence5 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[101])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_VITESSE_VENTOUSE_01();
					/* 'default' enter sequence for state VITESSE_VENTOUSE_02 */
					/* Entry action for state 'VITESSE_VENTOUSE_02'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[102]), 40, false);
					Application.m_servos_ax.setSpeed(SERVO_VENTOUSE_ARD_VERT, 200);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_VITESSE_VENTOUSE_02;
					stateConfVectorPosition = 0;
					historyVector[3] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state VITESSE_VENTOUSE_02. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_VITESSE_VENTOUSE_02()
{
	/* The reactions of state VITESSE_VENTOUSE_02. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence5 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[102])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_VITESSE_VENTOUSE_02();
					/* 'default' enter sequence for state POSITIONS_BRAS_HAUT_01 */
					/* Entry action for state 'POSITIONS_BRAS_HAUT_01'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[105]), 1500, false);
					Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARG, IA::DefaultSCI::KMAR_G_HAUT);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_BRAS_HAUT_01;
					stateConfVectorPosition = 0;
					historyVector[3] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state PIVOTEMENT_ATOME_01. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_PIVOTEMENT_ATOME_01()
{
	/* The reactions of state PIVOTEMENT_ATOME_01. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence5 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[103])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_PIVOTEMENT_ATOME_01();
					/* 'default' enter sequence for state PIVOTEMENT_ATOME_02 */
					/* Entry action for state 'PIVOTEMENT_ATOME_02'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[104]), 500, false);
					Application.m_servos_ax.setPosition(SERVO_VENTOUSE_ARD_VERT, IA::DefaultSCI::TOUSE_D_BAS);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_PIVOTEMENT_ATOME_02;
					stateConfVectorPosition = 0;
					historyVector[3] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state PIVOTEMENT_ATOME_02. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_PIVOTEMENT_ATOME_02()
{
	/* The reactions of state PIVOTEMENT_ATOME_02. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence5 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[104])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_PIVOTEMENT_ATOME_02();
					/* 'default' enter sequence for state DEVENTOUSAGE_ATOMES */
					/* Entry action for state 'DEVENTOUSAGE_ATOMES'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[100]), 1 * 1000, false);
					Application.m_power_switch.setOutput(POMPE_ARD, false);
					Application.m_power_switch.setOutput(EV_ARD, true);
					Application.m_power_switch.setOutput(POMPE_ARG, false);
					Application.m_power_switch.setOutput(EV_ARG, true);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_DEVENTOUSAGE_ATOMES;
					stateConfVectorPosition = 0;
					historyVector[3] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state POSITIONS_BRAS_HAUT_01. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_BRAS_HAUT_01()
{
	/* The reactions of state POSITIONS_BRAS_HAUT_01. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence5 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[105])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_BRAS_HAUT_01();
					/* 'default' enter sequence for state POSITIONS_BRAS_HAUT_02 */
					/* Entry action for state 'POSITIONS_BRAS_HAUT_02'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[106]), 1500, false);
					Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARD, IA::DefaultSCI::KMAR_D_HAUT);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_BRAS_HAUT_02;
					stateConfVectorPosition = 0;
					historyVector[3] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state POSITIONS_BRAS_HAUT_02. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_BRAS_HAUT_02()
{
	/* The reactions of state POSITIONS_BRAS_HAUT_02. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence5 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[106])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_BRAS_HAUT_02();
					/* 'default' enter sequence for state PIVOTEMENT_ATOME_01 */
					/* Entry action for state 'PIVOTEMENT_ATOME_01'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[103]), 2 * 1000, false);
					Application.m_servos_ax.setPosition(SERVO_VENTOUSE_ARG_VERT, IA::DefaultSCI::TOUSE_G_BAS);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_PIVOTEMENT_ATOME_01;
					stateConfVectorPosition = 0;
					historyVector[3] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state SECU_ELETROVANNES. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_SECU_ELETROVANNES()
{
	/* The reactions of state SECU_ELETROVANNES. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence5 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[107])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_SECU_ELETROVANNES();
					/* 'default' enter sequence for state GLISSSADE */
					/* Entry action for state 'GLISSSADE'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[98]), 2 * 1000, false);
					Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARG, 140);
					Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_G, 95);
					Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARD, 170);
					Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_D, 170);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_GLISSSADE;
					stateConfVectorPosition = 0;
					historyVector[3] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state POSITIONS_PLATEAUX_BAS. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_PLATEAUX_BAS()
{
	/* The reactions of state POSITIONS_PLATEAUX_BAS. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence5 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[108])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_POSITIONS_PLATEAUX_BAS();
					/* 'default' enter sequence for state FIN_SEQUENCE */
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS_FIN_SEQUENCE;
					stateConfVectorPosition = 0;
					historyVector[3] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state DEPASSE_ZONE_CHAOS_RAMASSE_DEPART. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEPASSE_ZONE_CHAOS_RAMASSE_DEPART()
{
	/* The reactions of state DEPASSE_ZONE_CHAOS_RAMASSE_DEPART. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence4 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (iface.EV_ConvergenceMvt_raised || timeEvents[109])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEPASSE_ZONE_CHAOS_RAMASSE_DEPART();
					/* 'default' enter sequence for state DEPLACEMENT_RAMASSAGE_ATOME */
					/* Entry action for state 'DEPLACEMENT_RAMASSAGE_ATOME'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[110]), 2 * 1000, false);
					SCI_Asser_OCB::XYTeta(114, 0, IA::DefaultSCI::PI);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEPLACEMENT_RAMASSAGE_ATOME;
					stateConfVectorPosition = 0;
					historyVector[4] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state FIN_SEQUENCE. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_FIN_SEQUENCE()
{
	/* The reactions of state FIN_SEQUENCE. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence4 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_FIN_SEQUENCE();
				/* Default enter sequence for state null */
				stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART__final_;
				stateConfVectorPosition = 0;
			}
		}
	}
}

/* The reactions of state null. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART__final_()
{
	/* The reactions of state null. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence4 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			} 
		}
	}
}

/* The reactions of state DEPLACEMENT_RAMASSAGE_ATOME. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEPLACEMENT_RAMASSAGE_ATOME()
{
	/* The reactions of state DEPLACEMENT_RAMASSAGE_ATOME. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence4 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (iface.EV_ConvergenceMvt_raised || timeEvents[110])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEPLACEMENT_RAMASSAGE_ATOME();
					/* 'default' enter sequence for state ACTIVATION_POMPE */
					/* Entry action for state 'ACTIVATION_POMPE'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[113]), 1 * 1000, false);
					Application.m_power_switch.setOutput(POMPE_ARD, true);
					Application.m_power_switch.setOutput(POMPE_ARG, true);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_ACTIVATION_POMPE;
					stateConfVectorPosition = 0;
					historyVector[4] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state PRISE_ATOME. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PRISE_ATOME()
{
	/* The reactions of state PRISE_ATOME. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence4 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[111])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PRISE_ATOME();
					/* 'default' enter sequence for state Copy_2_PRISE_ATOME */
					/* Entry action for state 'Copy_2_PRISE_ATOME'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[127]), 500, false);
					Application.m_servos_ax.setPosition(SERVO_VENTOUSE_ARD_VERT, IA::DefaultSCI::TOUSE_D_MILIEU);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_2_PRISE_ATOME;
					stateConfVectorPosition = 0;
					historyVector[4] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state DESCENTE PARECHOC. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DESCENTE_PARECHOC()
{
	/* The reactions of state DESCENTE PARECHOC. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence4 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[112])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DESCENTE_PARECHOC();
					/* 'default' enter sequence for state DEPASSE_ZONE_CHAOS_RAMASSE_DEPART */
					/* Entry action for state 'DEPASSE_ZONE_CHAOS_RAMASSE_DEPART'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[109]), 4 * 1000, false);
					SCI_Asser_OCB::XYTeta(123.5, 0, IA::DefaultSCI::PI);
					iface.evit_choix_strategie = ((int32_t) EVITEMENT_NORMAL);
					iface.evit_nombre_max_tentatives = 1;
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEPASSE_ZONE_CHAOS_RAMASSE_DEPART;
					stateConfVectorPosition = 0;
					historyVector[4] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state ACTIVATION_POMPE. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_ACTIVATION_POMPE()
{
	/* The reactions of state ACTIVATION_POMPE. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence4 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[113])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_ACTIVATION_POMPE();
					/* 'default' enter sequence for state Copy_1_POSITIONS_PLATEAUX_MILIEU */
					/* Entry action for state 'Copy_1_POSITIONS_PLATEAUX_MILIEU'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[124]), 500, false);
					Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_G, IA::DefaultSCI::TOB_G_BAS);
					Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_D, IA::DefaultSCI::TOB_D_BAS);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_1_POSITIONS_PLATEAUX_MILIEU;
					stateConfVectorPosition = 0;
					historyVector[4] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state DEVENTOUSAGE_ATOMES. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEVENTOUSAGE_ATOMES()
{
	/* The reactions of state DEVENTOUSAGE_ATOMES. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence4 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[114])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEVENTOUSAGE_ATOMES();
					/* 'default' enter sequence for state SECU_ELETROVANNES */
					/* Entry action for state 'SECU_ELETROVANNES'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[122]), 500, false);
					Application.m_power_switch.setOutput(EV_ARD, false);
					Application.m_power_switch.setOutput(EV_ARG, false);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_SECU_ELETROVANNES;
					stateConfVectorPosition = 0;
					historyVector[4] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state VITESSE_VENTOUSE_01. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_VITESSE_VENTOUSE_01()
{
	/* The reactions of state VITESSE_VENTOUSE_01. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence4 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[115])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_VITESSE_VENTOUSE_01();
					/* 'default' enter sequence for state VITESSE_VENTOUSE_02 */
					/* Entry action for state 'VITESSE_VENTOUSE_02'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[116]), 40, false);
					Application.m_servos_ax.setSpeed(SERVO_VENTOUSE_ARD_VERT, 200);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_VITESSE_VENTOUSE_02;
					stateConfVectorPosition = 0;
					historyVector[4] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state VITESSE_VENTOUSE_02. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_VITESSE_VENTOUSE_02()
{
	/* The reactions of state VITESSE_VENTOUSE_02. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence4 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[116])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_VITESSE_VENTOUSE_02();
					/* 'default' enter sequence for state POSITIONS_BRAS_HAUT_01 */
					/* Entry action for state 'POSITIONS_BRAS_HAUT_01'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[120]), 1500, false);
					Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARG, IA::DefaultSCI::KMAR_G_HAUT);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_BRAS_HAUT_01;
					stateConfVectorPosition = 0;
					historyVector[4] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state PIVOTEMENT_ATOME_01. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PIVOTEMENT_ATOME_01()
{
	/* The reactions of state PIVOTEMENT_ATOME_01. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence4 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[117])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PIVOTEMENT_ATOME_01();
					/* 'default' enter sequence for state PIVOTEMENT_ATOME_02 */
					/* Entry action for state 'PIVOTEMENT_ATOME_02'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[118]), 1 * 1000, false);
					Application.m_servos_ax.setPosition(SERVO_VENTOUSE_ARD_VERT, IA::DefaultSCI::TOUSE_D_BAS);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PIVOTEMENT_ATOME_02;
					stateConfVectorPosition = 0;
					historyVector[4] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state PIVOTEMENT_ATOME_02. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PIVOTEMENT_ATOME_02()
{
	/* The reactions of state PIVOTEMENT_ATOME_02. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence4 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[118])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PIVOTEMENT_ATOME_02();
					/* 'default' enter sequence for state POSITIONS_PLATEAUX_MILIEU */
					/* Entry action for state 'POSITIONS_PLATEAUX_MILIEU'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[119]), 500, false);
					Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_G, IA::DefaultSCI::TOB_G_BAS);
					Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_D, IA::DefaultSCI::TOB_D_BAS);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_PLATEAUX_MILIEU;
					stateConfVectorPosition = 0;
					historyVector[4] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state POSITIONS_PLATEAUX_MILIEU. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_PLATEAUX_MILIEU()
{
	/* The reactions of state POSITIONS_PLATEAUX_MILIEU. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence4 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[119])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_PLATEAUX_MILIEU();
					/* 'default' enter sequence for state DEVENTOUSAGE_ATOMES */
					/* Entry action for state 'DEVENTOUSAGE_ATOMES'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[114]), 500, false);
					Application.m_power_switch.setOutput(POMPE_ARD, false);
					Application.m_power_switch.setOutput(EV_ARD, true);
					Application.m_power_switch.setOutput(POMPE_ARG, false);
					Application.m_power_switch.setOutput(EV_ARG, true);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_DEVENTOUSAGE_ATOMES;
					stateConfVectorPosition = 0;
					historyVector[4] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state POSITIONS_BRAS_HAUT_01. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_BRAS_HAUT_01()
{
	/* The reactions of state POSITIONS_BRAS_HAUT_01. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence4 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[120])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_BRAS_HAUT_01();
					/* 'default' enter sequence for state POSITIONS_BRAS_HAUT_02 */
					/* Entry action for state 'POSITIONS_BRAS_HAUT_02'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[121]), 1500, false);
					Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARD, IA::DefaultSCI::KMAR_D_HAUT);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_BRAS_HAUT_02;
					stateConfVectorPosition = 0;
					historyVector[4] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state POSITIONS_BRAS_HAUT_02. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_BRAS_HAUT_02()
{
	/* The reactions of state POSITIONS_BRAS_HAUT_02. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence4 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[121])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_BRAS_HAUT_02();
					/* 'default' enter sequence for state PIVOTEMENT_ATOME_01 */
					/* Entry action for state 'PIVOTEMENT_ATOME_01'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[117]), 2 * 1000, false);
					Application.m_servos_ax.setPosition(SERVO_VENTOUSE_ARG_VERT, IA::DefaultSCI::TOUSE_G_BAS);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PIVOTEMENT_ATOME_01;
					stateConfVectorPosition = 0;
					historyVector[4] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state SECU_ELETROVANNES. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_SECU_ELETROVANNES()
{
	/* The reactions of state SECU_ELETROVANNES. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence4 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[122])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_SECU_ELETROVANNES();
					/* 'default' enter sequence for state POSITIONS_PLATEAUX_BAS */
					/* Entry action for state 'POSITIONS_PLATEAUX_BAS'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[123]), 200, false);
					Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_G, IA::DefaultSCI::TOB_G_BAS);
					Application.m_servos_sd20.CommandePosition(SERVO_PLATEAU_D, IA::DefaultSCI::TOB_D_BAS);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_PLATEAUX_BAS;
					stateConfVectorPosition = 0;
					historyVector[4] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state POSITIONS_PLATEAUX_BAS. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_PLATEAUX_BAS()
{
	/* The reactions of state POSITIONS_PLATEAUX_BAS. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence4 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[123])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_POSITIONS_PLATEAUX_BAS();
					/* 'default' enter sequence for state GLISSSADE */
					/* Entry action for state 'GLISSSADE'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[125]), 500, false);
					Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARG, IA::DefaultSCI::KMAR_G_HAUT);
					Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARD, IA::DefaultSCI::KMAR_D_HAUT);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_GLISSSADE;
					stateConfVectorPosition = 0;
					historyVector[4] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state Copy_1_POSITIONS_PLATEAUX_MILIEU. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_1_POSITIONS_PLATEAUX_MILIEU()
{
	/* The reactions of state Copy_1_POSITIONS_PLATEAUX_MILIEU. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence4 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[124])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_1_POSITIONS_PLATEAUX_MILIEU();
					/* 'default' enter sequence for state PRISE_ATOME */
					/* Entry action for state 'PRISE_ATOME'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[111]), 40, false);
					Application.m_servos_ax.setPosition(SERVO_VENTOUSE_ARG_VERT, IA::DefaultSCI::TOUSE_G_MILIEU);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_PRISE_ATOME;
					stateConfVectorPosition = 0;
					historyVector[4] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state GLISSSADE. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_GLISSSADE()
{
	/* The reactions of state GLISSSADE. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence4 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[125])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_GLISSSADE();
					/* 'default' enter sequence for state FIN_SEQUENCE */
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_FIN_SEQUENCE;
					stateConfVectorPosition = 0;
					historyVector[4] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state Copy_1_PRISE_ATOME. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_1_PRISE_ATOME()
{
	/* The reactions of state Copy_1_PRISE_ATOME. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence4 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[126])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_1_PRISE_ATOME();
					/* 'default' enter sequence for state VITESSE_VENTOUSE_01 */
					/* Entry action for state 'VITESSE_VENTOUSE_01'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[115]), 40, false);
					Application.m_servos_ax.setSpeed(SERVO_VENTOUSE_ARG_VERT, 200);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_VITESSE_VENTOUSE_01;
					stateConfVectorPosition = 0;
					historyVector[4] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state Copy_2_PRISE_ATOME. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_2_PRISE_ATOME()
{
	/* The reactions of state Copy_2_PRISE_ATOME. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence4 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[127])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_2_PRISE_ATOME();
					/* 'default' enter sequence for state Copy_1_PRISE_ATOME */
					/* Entry action for state 'Copy_1_PRISE_ATOME'. */
					timer->setTimer(this, (sc_eventid)(&timeEvents[126]), 1 * 1000, false);
					Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARD, IA::DefaultSCI::KMAR_D_BAS);
					Application.m_servos_sd20.CommandePosition(SERVO_BRAS_ARG, IA::DefaultSCI::KMAR_G_BAS);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART_Copy_1_PRISE_ATOME;
					stateConfVectorPosition = 0;
					historyVector[4] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state SE_METTRE_EN_LIEU_SUR. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_SE_METTRE_EN_LIEU_SUR()
{
	/* The reactions of state SE_METTRE_EN_LIEU_SUR. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence6 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_SE_METTRE_EN_LIEU_SUR();
				/* Default enter sequence for state null */
				stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO__final_;
				stateConfVectorPosition = 0;
			}
		}
	}
}

/* The reactions of state null. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO__final_()
{
	/* The reactions of state null. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence6 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			} 
		}
	}
}

/* The reactions of state MAINTIEN_KMAR_AR. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_MAINTIEN_KMAR_AR()
{
	/* The reactions of state MAINTIEN_KMAR_AR. */
	if (timeEvents[9])
	{ 
		exseq_main_region_MATCH_EN_COURS();
		/* 'default' enter sequence for state FIN_MATCH */
		/* Entry action for state 'FIN_MATCH'. */
		Application.m_leds.setPattern(PATTERN_CLIGNO_1234, 400);
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = 9999;
		Application.m_power_switch.setOutput(EV_AV, false);
		Application.m_power_switch.setOutput(EV_ARD, false);
		Application.m_power_switch.setOutput(EV_ARG, false);
		Application.m_power_switch.setOutput(POMPE_ARD, false);
		Application.m_power_switch.setOutput(POMPE_ARG, false);
		Application.m_power_switch.setOutput(POMPE_AV, false);
		stateConfVector[0] = main_region_FIN_MATCH;
		stateConfVectorPosition = 0;
	}  else
	{
		iface.tempsMatch = iface.tempsMatch + ifaceInternalSCI.Te;
		Application.m_messenger_xbee_ntw.m_database.m_TimestampMatch.Timestamp = ((int32_t) iface.tempsMatch);
		if ((iface.IN_Obstacle == 1) && (iface.inhibeObstacle == false))
		{ 
			exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO();
			/* 'default' enter sequence for state DETECTION_OBSTACLE */
			/* Entry action for state 'DETECTION_OBSTACLE'. */
			iface.evitementEnCours = true;
			Application.m_leds.setPattern(PATTERN_K2000, 1000);
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMMENT_OBSTACLE_CONTENEUR */
			/* 'default' enter sequence for region r1 */
			/* Default react sequence for initial entry  */
			/* 'default' enter sequence for state EVITEMENT_INIT */
			/* Entry action for state 'EVITEMENT_INIT'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[10]), (1) * 1000, false);
			iface.evit_memo_cde_min = Application.m_asservissement.cde_min;
			iface.evit_memo_cde_max = Application.m_asservissement.cde_max;
			iface.evit_memo_idx_sportiv = Application.m_asservissement.Ind_perfo;
			iface.evit_memo_vitesse_avance = Application.m_asservissement.vitesse_avance_max;
			iface.evit_memo_vitesse_angle = Application.m_asservissement.vitesse_rotation_max;
			iface.evit_sens_avant_detection = iface.IN_sens_deplacement;
			iface.evit_memo_force_obstacle = iface.forceObstacle;
			iface.forceObstacle = true;
			iface.evit_debug_etape = 0;
			iface.evit_nombre_tentatives = 0;
			iface.evit_toggle_signe = iface.evit_toggle_signe * -1;
			Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_INIT;
			stateConfVectorPosition = 0;
		}  else
		{
			if (ifaceInternalSCI.sequence6 == false)
			{ 
				exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO();
				/* 'default' enter sequence for state SUPERVISEUR */
				/* Entry action for state 'SUPERVISEUR'. */
				ifaceInternalSCI.idx_strategy += 1;
				/* 'default' enter sequence for region TACHE_SUPERVISEUR */
				/* Default react sequence for initial entry  */
				react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1();
			}  else
			{
				if (timeEvents[128])
				{ 
					exseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_MAINTIEN_KMAR_AR();
					/* 'default' enter sequence for state SE_METTRE_EN_LIEU_SUR */
					/* Entry action for state 'SE_METTRE_EN_LIEU_SUR'. */
					iface.score_grosbot += 0;
					iface.inhibeObstacle = true;
					Application.m_asservissement.CommandeMouvementXY_TETA(100, 0, IA::DefaultSCI::PI);
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO_SE_METTRE_EN_LIEU_SUR;
					stateConfVectorPosition = 0;
					historyVector[5] = stateConfVector[0];
				} 
			}
		}
	}
}

/* The reactions of state FIN_MATCH. */
void IA::react_main_region_FIN_MATCH()
{
	/* The reactions of state FIN_MATCH. */
	Application.m_asservissement.CommandeManuelle(0, 0);
	iface.score_experience = 5 + 15 + 20;
	iface.score_minibot = 0;
	iface.score_total = iface.score_grosbot + iface.score_minibot + iface.score_experience;
}

/* The reactions of state null. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1__choice_0()
{
	/* The reactions of state null. */
	if ((iface.evit_choix_strategie == 0) || (iface.evit_detection_obstacle_bitfield == 0))
	{ 
		/* 'default' enter sequence for state SORTIE_EVITEMENT */
		/* Entry action for state 'SORTIE_EVITEMENT'. */
		timer->setTimer(this, (sc_eventid)(&timeEvents[11]), (15) * 1000, false);
		iface.evitementEnCours = false;
		Application.m_asservissement.CommandeManuelle(0, 0);
		Application.m_asservissement.setCdeMinCdeMax(iface.evit_memo_cde_min, iface.evit_memo_cde_max);
		Application.m_asservissement.setIndiceSportivite(((float) iface.evit_memo_idx_sportiv));
		Application.m_asservissement.CommandeVitesseMouvement(((float) iface.evit_memo_vitesse_avance), ((float) iface.evit_memo_vitesse_angle));
		iface.forceObstacle = iface.evit_memo_force_obstacle;
		iface.evit_debug_etape = 99;
		stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_SORTIE_EVITEMENT;
		stateConfVectorPosition = 0;
	}  else
	{
		/* 'default' enter sequence for state STRATEGIE_EVITEMENT */
		/* Entry action for state 'STRATEGIE_EVITEMENT'. */
		iface.evit_strategie_evitement_en_cours = true;
		/* 'default' enter sequence for region r1 */
		/* Default react sequence for initial entry  */
		/* 'default' enter sequence for state DEBUT_STRATEGIE_EVITEMENT */
		/* Entry action for state 'DEBUT_STRATEGIE_EVITEMENT'. */
		iface.evit_strategie_evitement_en_cours = true;
		stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_DEBUT_STRATEGIE_EVITEMENT;
		stateConfVectorPosition = 0;
	}
}

/* The reactions of state null. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1__choice_0()
{
	/* The reactions of state null. */
	if (iface.evit_detection_obstacle_bitfield == 1)
	{ 
		/* 'default' enter sequence for state EVITEMENT_AVD */
		/* Entry action for state 'EVITEMENT_AVD'. */
		iface.evit_sgn_dist_eloigne = -1;
		iface.evit_sgn_angle_pivote = +1;
		iface.evit_sgn_dist_evacue = +1;
		stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVD;
		stateConfVectorPosition = 0;
	}  else
	{
		if (iface.evit_detection_obstacle_bitfield == 2)
		{ 
			/* 'default' enter sequence for state EVITEMENT_AVG */
			/* Entry action for state 'EVITEMENT_AVG'. */
			iface.evit_sgn_dist_eloigne = -1;
			iface.evit_sgn_angle_pivote = -1;
			iface.evit_sgn_dist_evacue = +1;
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVG;
			stateConfVectorPosition = 0;
		}  else
		{
			if (iface.evit_detection_obstacle_bitfield == 3)
			{ 
				/* 'default' enter sequence for state EVITEMENT_AVD_AVG */
				/* Entry action for state 'EVITEMENT_AVD_AVG'. */
				iface.evit_sgn_dist_eloigne = -1;
				iface.evit_sgn_angle_pivote = iface.evit_toggle_signe;
				iface.evit_sgn_dist_evacue = +1;
				stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_AVD_AVG;
				stateConfVectorPosition = 0;
			}  else
			{
				if (iface.evit_detection_obstacle_bitfield == 4)
				{ 
					/* 'default' enter sequence for state EVITEMENT_ARD */
					/* Entry action for state 'EVITEMENT_ARD'. */
					iface.evit_sgn_dist_eloigne = +1;
					iface.evit_sgn_angle_pivote = -1;
					iface.evit_sgn_dist_evacue = -1;
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARD;
					stateConfVectorPosition = 0;
				}  else
				{
					if (iface.evit_detection_obstacle_bitfield == 8)
					{ 
						/* 'default' enter sequence for state EVITEMENT_ARG */
						/* Entry action for state 'EVITEMENT_ARG'. */
						iface.evit_sgn_dist_eloigne = +1;
						iface.evit_sgn_angle_pivote = +1;
						iface.evit_sgn_dist_evacue = -1;
						stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARG;
						stateConfVectorPosition = 0;
					}  else
					{
						if (iface.evit_detection_obstacle_bitfield == 12)
						{ 
							/* 'default' enter sequence for state EVITEMENT_ARD_ARG */
							/* Entry action for state 'EVITEMENT_ARD_ARG'. */
							iface.evit_sgn_dist_eloigne = +1;
							iface.evit_sgn_angle_pivote = iface.evit_toggle_signe;
							iface.evit_sgn_dist_evacue = -1;
							stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_ARD_ARG;
							stateConfVectorPosition = 0;
						}  else
						{
							/* 'default' enter sequence for state EVITEMENT_DEFAULT */
							/* Entry action for state 'EVITEMENT_DEFAULT'. */
							iface.evit_strategie_evitement_en_cours = false;
							stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_STRATEGIE_EVITEMENT_r1_EVITEMENT_DEFAULT;
							stateConfVectorPosition = 0;
						}
					}
				}
			}
		}
	}
}

/* The reactions of state null. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1__choice_1()
{
	/* The reactions of state null. */
	if (iface.evit_nombre_tentatives >= iface.evit_nombre_max_tentatives)
	{ 
		/* 'default' enter sequence for state SORTIE_EVITEMENT */
		/* Entry action for state 'SORTIE_EVITEMENT'. */
		timer->setTimer(this, (sc_eventid)(&timeEvents[11]), (15) * 1000, false);
		iface.evitementEnCours = false;
		Application.m_asservissement.CommandeManuelle(0, 0);
		Application.m_asservissement.setCdeMinCdeMax(iface.evit_memo_cde_min, iface.evit_memo_cde_max);
		Application.m_asservissement.setIndiceSportivite(((float) iface.evit_memo_idx_sportiv));
		Application.m_asservissement.CommandeVitesseMouvement(((float) iface.evit_memo_vitesse_avance), ((float) iface.evit_memo_vitesse_angle));
		iface.forceObstacle = iface.evit_memo_force_obstacle;
		iface.evit_debug_etape = 99;
		stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_SORTIE_EVITEMENT;
		stateConfVectorPosition = 0;
	}  else
	{
		/* 'default' enter sequence for state EVITEMENT_ATTENTE */
		/* Entry action for state 'EVITEMENT_ATTENTE'. */
		timer->setTimer(this, (sc_eventid)(&timeEvents[12]), (2) * 1000, false);
		Application.m_asservissement.CommandeMouvementXY_TETA(((float) iface.IN_x_pos), ((float) iface.IN_y_pos), ((float) iface.IN_teta_pos));
		iface.evit_debug_etape = 30;
		stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_DETECTION_OBSTACLE_r1_EVITEMMENT_OBSTACLE_CONTENEUR_r1_EVITEMENT_ATTENTE;
		stateConfVectorPosition = 0;
	}
}

/* The reactions of state null. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH__choice_0()
{
	/* The reactions of state null. */
	if (ifaceInternalSCI.sequence1)
	{ 
		/* 'Entry_history' enter sequence for state SEQUENCE_01_NETTOYAGE */
		/* 'Entry_history' enter sequence for region TACHE_NETTOYAGE */
		/* Default react sequence for initial entry Entry_history */
		/* Default react sequence for shallow history entry  */
		/* Enter the region with shallow history */
		if (historyVector[0] != IA_last_state)
		{
			shenseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_01_NETTOYAGE_TACHE_NETTOYAGE();
		} 
	}  else
	{
		if (ifaceInternalSCI.sequence2)
		{ 
			/* 'Entry_history' enter sequence for state SEQUENCE_02_GOLDENIUM */
			/* 'Entry_history' enter sequence for region TACHE_GOLDENIUM */
			/* Default react sequence for initial entry Entry_history */
			/* Default react sequence for shallow history entry  */
			/* Enter the region with shallow history */
			if (historyVector[1] != IA_last_state)
			{
				shenseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM();
			} 
		}  else
		{
			if (ifaceInternalSCI.sequence3)
			{ 
				/* 'Entry_history' enter sequence for state SEQUENCE_03_DISTRIBUTEUR */
				/* 'Entry_history' enter sequence for region TACHE_DISTRIBUTEUR */
				/* Default react sequence for initial entry Entry_history */
				/* Default react sequence for shallow history entry  */
				/* Enter the region with shallow history */
				if (historyVector[2] != IA_last_state)
				{
					shenseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_03_DISTRIBUTEUR_TACHE_DISTRIBUTEUR();
				} 
			}  else
			{
				if (ifaceInternalSCI.sequence4)
				{ 
					/* 'Entry_history' enter sequence for state SEQUENCE_04_ATOME_DEPART */
					/* 'Entry_history' enter sequence for region TACHE_RAMASSAGE_ATOME_DEPART */
					/* Default react sequence for initial entry Entry_history */
					/* Default react sequence for shallow history entry  */
					/* Enter the region with shallow history */
					if (historyVector[4] != IA_last_state)
					{
						shenseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_04_ATOME_DEPART_TACHE_RAMASSAGE_ATOME_DEPART();
					} 
				}  else
				{
					if (ifaceInternalSCI.sequence5)
					{ 
						/* 'Entry_history' enter sequence for state SEQUENCE_05_RAMASSAGE_ZONE_CHAOS */
						/* 'Entry_history' enter sequence for region TACHE_RAMASSAGE_ZONE_CHAOS */
						/* Default react sequence for initial entry Entry_history */
						/* Default react sequence for shallow history entry  */
						/* Enter the region with shallow history */
						if (historyVector[3] != IA_last_state)
						{
							shenseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_05_RAMASSAGE_ZONE_CHAOS_TACHE_RAMASSAGE_ZONE_CHAOS();
						} 
					}  else
					{
						if (ifaceInternalSCI.sequence6)
						{ 
							/* 'Entry_history' enter sequence for state SEQUENCE_06_FIN_HOMOLO */
							/* 'Entry_history' enter sequence for region STRATEGIE_FIN_HOMOLO */
							/* Default react sequence for initial entry Entry_history */
							/* Default react sequence for shallow history entry  */
							/* Enter the region with shallow history */
							if (historyVector[5] != IA_last_state)
							{
								shenseq_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_06_FIN_HOMOLO_STRATEGIE_FIN_HOMOLO();
							} 
						} 
					}
				}
			}
		}
	}
}

/* The reactions of state null. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM__choice_0()
{
	/* The reactions of state null. */
	if (iface.Couleur == IA::DefaultSCI::VIOLET)
	{ 
		/* 'default' enter sequence for state PREPARATION_KMAR_GAUCHE */
		/* Entry action for state 'PREPARATION_KMAR_GAUCHE'. */
		timer->setTimer(this, (sc_eventid)(&timeEvents[28]), 200, false);
		Application.m_asservissement_chariot.setConsigne(500);
		Application.m_servos_ax.setPosition(SERVO_VENTOUSE_AV_VERT, 200);
		stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_GAUCHE;
		stateConfVectorPosition = 0;
		historyVector[1] = stateConfVector[0];
	}  else
	{
		if (iface.Couleur == IA::DefaultSCI::JAUNE)
		{ 
			/* 'default' enter sequence for state PREPARATION_KMAR_DROITE */
			/* Entry action for state 'PREPARATION_KMAR_DROITE'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[29]), 200, false);
			Application.m_asservissement_chariot.setConsigne(500);
			Application.m_servos_ax.setPosition(SERVO_VENTOUSE_AV_VERT, 850);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_PREPARATION_KMAR_DROITE;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
		} 
	}
}

/* The reactions of state null. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM__choice_1()
{
	/* The reactions of state null. */
	if (iface.Couleur == IA::DefaultSCI::JAUNE)
	{ 
		/* 'default' enter sequence for state KMAR_LEGEREMENT_A_GAUCHE */
		/* Entry action for state 'KMAR_LEGEREMENT_A_GAUCHE'. */
		timer->setTimer(this, (sc_eventid)(&timeEvents[62]), 500, false);
		Application.m_servos_ax.setPosition(SERVO_VENTOUSE_AV_VERT, 400);
		stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_LEGEREMENT_A_GAUCHE;
		stateConfVectorPosition = 0;
		historyVector[1] = stateConfVector[0];
	}  else
	{
		if (iface.Couleur == IA::DefaultSCI::VIOLET)
		{ 
			/* 'default' enter sequence for state KMAR_LEGEREMENT_A_DROITE */
			/* Entry action for state 'KMAR_LEGEREMENT_A_DROITE'. */
			timer->setTimer(this, (sc_eventid)(&timeEvents[63]), 500, false);
			Application.m_servos_ax.setPosition(SERVO_VENTOUSE_AV_VERT, 624);
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SEQUENCE_02_GOLDENIUM_TACHE_GOLDENIUM_KMAR_LEGEREMENT_A_DROITE;
			stateConfVectorPosition = 0;
			historyVector[1] = stateConfVector[0];
		} 
	}
}

/* The reactions of state null. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_0()
{
	/* The reactions of state null. */
	if (Application.m_match.strategie[ifaceInternalSCI.idx_strategy] == 1)
	{ 
		/* 'default' enter sequence for state SEQUENCE_01 */
		/* Entry action for state 'SEQUENCE_01'. */
		ifaceInternalSCI.sequence1 = true;
		stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_01;
		stateConfVectorPosition = 0;
	}  else
	{
		if (Application.m_match.strategie[ifaceInternalSCI.idx_strategy] == 2)
		{ 
			/* 'default' enter sequence for state SEQUENCE_02 */
			/* Entry action for state 'SEQUENCE_02'. */
			ifaceInternalSCI.sequence2 = true;
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_02;
			stateConfVectorPosition = 0;
		}  else
		{
			if (Application.m_match.strategie[ifaceInternalSCI.idx_strategy] == 3)
			{ 
				/* 'default' enter sequence for state SEQUENCE_03 */
				/* Entry action for state 'SEQUENCE_03'. */
				ifaceInternalSCI.sequence3 = true;
				stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_03;
				stateConfVectorPosition = 0;
			}  else
			{
				if (Application.m_match.strategie[ifaceInternalSCI.idx_strategy] == 4)
				{ 
					/* 'default' enter sequence for state SEQUENCE_04 */
					/* Entry action for state 'SEQUENCE_04'. */
					ifaceInternalSCI.sequence4 = true;
					stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_04;
					stateConfVectorPosition = 0;
				}  else
				{
					if (Application.m_match.strategie[ifaceInternalSCI.idx_strategy] == 5)
					{ 
						/* 'default' enter sequence for state SEQUENCE_05 */
						/* Entry action for state 'SEQUENCE_05'. */
						ifaceInternalSCI.sequence5 = true;
						stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_05;
						stateConfVectorPosition = 0;
					}  else
					{
						if (Application.m_match.strategie[ifaceInternalSCI.idx_strategy] == 6)
						{ 
							/* 'default' enter sequence for state SEQUENCE_06 */
							/* Entry action for state 'SEQUENCE_06'. */
							ifaceInternalSCI.sequence6 = true;
							stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_SEQUENCE_06;
							stateConfVectorPosition = 0;
						}  else
						{
							/* 'default' enter sequence for state AUCUNE_SEQUENCE */
							/* Entry action for state 'AUCUNE_SEQUENCE'. */
							Application.m_asservissement.CommandeManuelle(0, 0);
							stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_AUCUNE_SEQUENCE;
							stateConfVectorPosition = 0;
						}
					}
				}
			}
		}
	}
}

/* The reactions of state null. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_1()
{
	/* The reactions of state null. */
	if (ifaceInternalSCI.idx_strategy < 10)
	{ 
		react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR__choice_0();
	}  else
	{
		/* 'default' enter sequence for state AUCUNE_SEQUENCE */
		/* Entry action for state 'AUCUNE_SEQUENCE'. */
		Application.m_asservissement.CommandeManuelle(0, 0);
		stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_SUPERVISEUR_TACHE_SUPERVISEUR_AUCUNE_SEQUENCE;
		stateConfVectorPosition = 0;
	}
}

/* The reactions of state null. */
void IA::react_main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE__choice_0()
{
	/* The reactions of state null. */
	if (iface.choixStrategie == HOMOLO1)
	{ 
		/* 'default' enter sequence for state HOMOLO1 */
		/* Entry action for state 'HOMOLO1'. */
		Application.m_match.strategie[0] = 4;
		Application.m_match.strategie[1] = 1;
		Application.m_match.strategie[2] = 6;
		stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_HOMOLO1;
		stateConfVectorPosition = 0;
	}  else
	{
		if (iface.choixStrategie == HOMOLO2)
		{ 
			/* 'default' enter sequence for state HOMOLO2 */
			/* Entry action for state 'HOMOLO2'. */
			Application.m_match.strategie[0] = 6;
			stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_HOMOLO2;
			stateConfVectorPosition = 0;
		}  else
		{
			if (iface.choixStrategie == STRATEGIE_01)
			{ 
				/* 'default' enter sequence for state STRATEGIE1 */
				/* Entry action for state 'STRATEGIE1'. */
				Application.m_match.strategie[0] = 4;
				Application.m_match.strategie[1] = 1;
				Application.m_match.strategie[2] = 5;
				Application.m_match.strategie[3] = 2;
				Application.m_match.strategie[4] = 3;
				stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_STRATEGIE1;
				stateConfVectorPosition = 0;
			}  else
			{
				/* 'default' enter sequence for state STRATEGIE_PAR_DEFAUT */
				/* Entry action for state 'STRATEGIE_PAR_DEFAUT'. */
				Application.m_match.strategie[0] = 4;
				Application.m_match.strategie[1] = 1;
				Application.m_match.strategie[2] = 2;
				stateConfVector[0] = main_region_MATCH_EN_COURS_DEROULEMENT_MATCH_ETABLISSEMENT_STRATEGY_TACHE_CHOIX_STRATEGIE_STRATEGIE_PAR_DEFAUT;
				stateConfVectorPosition = 0;
			}
		}
	}
}



